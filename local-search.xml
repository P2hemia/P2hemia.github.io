<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python基础（中）</title>
    <link href="/2022/01/20/python-ji-chu-zhong/"/>
    <url>/2022/01/20/python-ji-chu-zhong/</url>
    
    <content type="html"><![CDATA[<p>最近这几天一边学习其他知识，一边又把Python的基础知识接着整理了一下，这次主要就是整理了Python中比较重要的几个数据结构，分别是列表、字典、元组和集合，作者认为这几块是比较容易让人产生困惑的，以及可能在后续的学习中会弄混淆，所以特别抽出来写一篇Python（中），后续还会接着整理最后下部分的基础知识。</p><h2 id="11-列表"><a href="#11-列表" class="headerlink" title="11. 列表"></a>11. 列表</h2><h3 id="11-1-为什么需要列表"><a href="#11-1-为什么需要列表" class="headerlink" title="11.1 为什么需要列表"></a>11.1 为什么需要列表</h3><ul><li>变量可以存储一个元素，但是列表是一个“大容器”，可以存储N多个元素，程序可以方便地对这些数据进行整体操作</li><li>列表相当于其它语言中的数组</li></ul><h3 id="11-2-列表的创建"><a href="#11-2-列表的创建" class="headerlink" title="11.2 列表的创建"></a>11.2 列表的创建</h3><ul><li><p>列表需要使用中括号[]，元素之间使用英文的逗号进行分割</p></li><li><p><code>lst = [&#39;大圣&#39;, &#39;孙悟空&#39;]</code></p></li><li><p>列表的创建方式</p><ul><li>直接使用中括号    <code>lst = [&#39;大圣&#39;, &#39;孙悟空&#39;]</code></li><li>调用内置函数list()   <code>lst2 = list([&#39;大圣&#39;, &#39;孙悟空&#39;])</code></li></ul></li></ul><h3 id="11-3-列表的特点"><a href="#11-3-列表的特点" class="headerlink" title="11.3 列表的特点"></a>11.3 列表的特点</h3><ol><li>列表元素按照顺序有序排序</li><li>索引映射唯一一个数据</li><li>列表可以存储重复数据</li><li>列表可以任意数据类型混存</li><li>根据需要动态分配和回收内存</li></ol><h3 id="11-4-列表的查询操作"><a href="#11-4-列表的查询操作" class="headerlink" title="11.4 列表的查询操作"></a>11.4 列表的查询操作</h3><blockquote><ol><li>获取列表中指定元素的索引<code>index()</code></li></ol></blockquote><ul><li>如查列表中存在<code>N</code>个相同元素，只返回相同元素中的第一个元素的索引</li><li>如果查询的元素在列表中不存在，则会抛出<code>ValueError</code></li><li>还可以在指定的<code>start</code>和<code>stop</code>之间进行查找</li></ul><p>下面用一个简单的代码例子来说明<code>index()</code>方法查询的三个特点</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">985</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-built_in">print</span>(lst.index(<span class="hljs-string">&#x27;hello&#x27;</span>))  <span class="hljs-comment"># 如查列表中有相同元素，只返回相同元素中的第一个元素的索引</span><br><span class="hljs-built_in">print</span>(lst.index(<span class="hljs-string">&#x27;python&#x27;</span>))  <span class="hljs-comment"># 如果不存在，则会抛出异常.ValueError: &#x27;python&#x27; is not in list</span><br><span class="hljs-built_in">print</span>(lst.index(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 索引从1到3，但是不包括3.ValueError: &#x27;hello&#x27; is not in list</span><br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>获取列表中的单个元素</li></ol></blockquote><ul><li>正向索引从<code>0</code>到<code>N-1</code>    举例：<code>lst[0]</code></li><li>逆向索引从<code>-N</code>到<code>-1</code>     举例：<code>lst[-N]</code></li><li>指定索引不存在时，会抛出<code>indexError</code></li></ul><p>下面用一个简单的代码例子来说明获取单个元素的方法查询三个特点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">985</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">211</span>]<br><span class="hljs-comment"># 获取索引为2的元素</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">2</span>])   <span class="hljs-comment"># 985</span><br><span class="hljs-comment"># 获取索引为-3的元素</span><br><span class="hljs-built_in">print</span>(lst[-<span class="hljs-number">3</span>])  <span class="hljs-comment"># hello</span><br><span class="hljs-comment"># 获取索引为10的元素</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">10</span>])  <span class="hljs-comment"># 报错提示列表超出范围，查询不到。IndexError: list index out of range</span><br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>获取列表中的多个元素</li></ol></blockquote><p>语法格式：列表名<code>[start : stop : step]</code></p><ul><li>切片的结果：原列表片段的拷贝</li><li>切片的范围：<code>[start, stop]</code></li><li><code>step</code>默认为<code>1</code>：可以简写为<code>[start: stop]</code></li><li><code>step</code>为正数的时候<ul><li><code>[: stop: step]</code>：切片的第一个元素默认是列表中的第一个元素</li><li><code>[start: :step]</code>：切片的最后一个元素默认是列表的最后一个元素</li></ul></li><li><code>step</code>为负数的时候<ul><li><code>[: stop: step]</code>：切片的第一个元素默认是列表中的最后一个元素</li><li><code>[start: :step]</code>：切片的最后一个元素默认是列表的第一个元素</li></ul></li></ul><p>下面通过一个例子解释一下，如何获取列表中的多个元素，以及它们的不同形式写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>]<br><span class="hljs-comment"># start=1,stop=6,step=1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">1</span>])   <span class="hljs-comment"># [20, 30, 40, 50, 60]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表&#x27;</span>, <span class="hljs-built_in">id</span>(lst))   <span class="hljs-comment"># 原列表 2125077867328</span><br>lst2 = lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;切的片段&#x27;</span>, <span class="hljs-built_in">id</span>(lst2)) <span class="hljs-comment"># 切的片段 2125077761664</span><br><span class="hljs-comment"># 默认步长为1    后面加一个冒号，step不填也默认步长为1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>])     <span class="hljs-comment"># [20, 30, 40, 50, 60]</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:])    <span class="hljs-comment"># [20, 30, 40, 50, 60]</span><br><span class="hljs-comment"># start=1，stop=6，step=2</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># [20, 40, 60]</span><br><span class="hljs-comment"># stop=6,step=2,start采用默认</span><br><span class="hljs-built_in">print</span>(lst[:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>])    <span class="hljs-comment"># [10, 30, 50]</span><br><span class="hljs-comment"># start=1，step=2，stop采用默认</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>])    <span class="hljs-comment"># [20, 40, 60, 80]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------------step步长为负数的情况-----------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(lst[::-<span class="hljs-number">1</span>])    <span class="hljs-comment"># [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-comment"># start=7,stop省略，step=-1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">7</span>::-<span class="hljs-number">1</span>])   <span class="hljs-comment"># [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-comment"># start=6，stop=0，step=-1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">2</span>])  <span class="hljs-comment"># [70, 50, 30]</span><br></code></pre></td></tr></table></figure><blockquote><ol start="4"><li>判断指定元素在列表中是否存在</li></ol></blockquote><ul><li>元素 <code>in</code>  列表名</li><li>元素 <code>not  in</code>  列表名</li></ul><p>下面是一个例子说明如何判断指定元素是否在列表中存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> lst)    <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">in</span> lst)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lst)    <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lst)   <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><blockquote><ol start="5"><li>列表元素的遍历</li></ol></blockquote><p><code>for  迭代变量  in  列表名 ：</code></p><p>下面是一个例子说明如何操作对列表元素的遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-built_in">print</span>(item)<br><br>    <span class="hljs-comment">#输出结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">10</span><br><span class="hljs-string">20</span><br><span class="hljs-string">python</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="11-5-列表的增加操作"><a href="#11-5-列表的增加操作" class="headerlink" title="11.5 列表的增加操作"></a>11.5 列表的增加操作</h3><blockquote><p>列表元素的增加操作</p></blockquote><table><thead><tr><th align="center">方法/其它</th><th align="center">操作描述</th></tr></thead><tbody><tr><td align="center"><code>append()</code></td><td align="center">在列表的末尾添加<strong>一个元素</strong></td></tr><tr><td align="center"><code>extend()</code></td><td align="center">在列表的末尾添加<strong>至少一个元素</strong></td></tr><tr><td align="center"><code>insert()</code></td><td align="center">在列表的任意位置添加<strong>一个元素</strong></td></tr><tr><td align="center">切片</td><td align="center">在列表的任意位置添加<strong>至少一个元素</strong></td></tr></tbody></table><p>下面用一个代码例子来说明上面四种添加方法的不同之处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># 向列表的末尾添加一个元素</span><br><br>lst2 = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>]<br><span class="hljs-comment"># lst.append(lst2)    # 将lst2作为一个元素添加到列表的末尾</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 30, 100, [&#x27;hello&#x27;, &#x27;world&#x27;]]</span><br>lst.extend(lst2)    <span class="hljs-comment"># 将lst2里面的各个元素作为单独元素添加到列表的末尾</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 30, 100, &#x27;hello&#x27;, &#x27;world&#x27;]</span><br><span class="hljs-comment"># 在任意位置上添加一个元素</span><br>lst.insert(<span class="hljs-number">1</span>, <span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 90, 20, 30, 100, &#x27;hello&#x27;, &#x27;world&#x27;]</span><br><br>lst3 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-comment"># 在任意的位置上添加N多个元素</span><br>lst[<span class="hljs-number">1</span>:] = lst3<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, True, False, &#x27;hello&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="11-6-列表的删除操作"><a href="#11-6-列表的删除操作" class="headerlink" title="11.6 列表的删除操作"></a>11.6 列表的删除操作</h3><table><thead><tr><th align="center">方法/其它</th><th align="center">操作描述</th></tr></thead><tbody><tr><td align="center"><code>remove()</code></td><td align="center">1. 一次删除一个元素<br />2. 重复元素只能删除第一个<br />3. 元素不存在抛出<code>ValueError</code></td></tr><tr><td align="center"><code>pop()</code></td><td align="center">1. 删除一个指定索引位置上的元素<br />2. 指定索引不存在抛出<code>IndexError</code><br />3. 不指定索引，删除列表种最后一个元素</td></tr><tr><td align="center">切片</td><td align="center">一次至少删除一个元素</td></tr><tr><td align="center"><code>clear()</code></td><td align="center">清空列表</td></tr><tr><td align="center"><code>del</code></td><td align="center">删除列表</td></tr></tbody></table><p>下面通过一个代码例子，来说明一下几种列表的删除操作的一些用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>]<br>lst.remove(<span class="hljs-number">30</span>)  <span class="hljs-comment"># 从列表种移除一个元素，如果有重复的只移除第一个元素</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 40, 50, 60, 30]</span><br><span class="hljs-comment"># lst.remove(100) # ValueError: list.remove(x): x not in list</span><br><br><span class="hljs-comment"># pop()根据索引移除元素</span><br>lst.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 40, 50, 60, 30]，将索引为1的元素20删除</span><br><span class="hljs-comment"># lst.pop(5)  # IndexError: pop index out of range，如果指定的索引位置不存在，将抛出异常</span><br>lst.pop()   <span class="hljs-comment"># 如果不指定参数（索引），那么将删除列表种的最后一个元素</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 40, 50, 60]</span><br><br><span class="hljs-comment"># 切片操作</span><br><span class="hljs-string">&quot;&quot;&quot;切片操作，删除至少一个元素，将产生一个新的列表对象&quot;&quot;&quot;</span><br>new_list = lst[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表&#x27;</span>, lst)   <span class="hljs-comment"># 原列表 [10, 40, 50, 60]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新列表&#x27;</span>, new_list)  <span class="hljs-comment"># 新列表 [40, 50]</span><br><span class="hljs-string">&quot;&quot;&quot;不产生新的列表对象，而是删除原列表中的内容&quot;&quot;&quot;</span><br>lst[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] = []<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 60]</span><br><br><span class="hljs-comment"># 清除列表中的所有元素</span><br>lst.clear()<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># del语句会将列表对象删除</span><br><span class="hljs-keyword">del</span> lst<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># NameError: name &#x27;lst&#x27; is not defined</span><br></code></pre></td></tr></table></figure><h3 id="11-7-列表元素的修改操作"><a href="#11-7-列表元素的修改操作" class="headerlink" title="11.7 列表元素的修改操作"></a>11.7 列表元素的修改操作</h3><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul><p>下面是一个代码例子，来参考学习一下列表元素的两种修改操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-comment"># 一次修改一个值</span><br>lst[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 100, 40]</span><br><span class="hljs-comment"># 利用切片，一次修改多个值</span><br>lst[<span class="hljs-number">1</span>: <span class="hljs-number">3</span>] = [<span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>, <span class="hljs-number">600</span>]<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 300, 400, 500, 600, 40]</span><br></code></pre></td></tr></table></figure><h3 id="11-8-列表元素的排序操作"><a href="#11-8-列表元素的排序操作" class="headerlink" title="11.8 列表元素的排序操作"></a>11.8 列表元素的排序操作</h3><blockquote><p>列表元素的排序操作，常见的有两种方式</p></blockquote><ul><li>调用<code>sort()</code>方法，列表中的所有元素默认按照从小到大的顺序进行排序，可以指定<code>reverse=True</code>，进行降序排序</li><li>调用内置函数<code>sorted()</code>，可以指定<code>reverse=True</code>，进行降序排序，原列表不发生改变</li></ul><p>下面通过一个例子，了解一下两种不同函数进行排序操作的一些特点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">98</span>, <span class="hljs-number">54</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序前的列表&#x27;</span>, lst, <span class="hljs-built_in">id</span>(lst))   <span class="hljs-comment"># 排序前的列表 [20, 40, 10, 98, 54] 2701818270784</span><br><span class="hljs-comment"># 开始排序，利用列表对象的sort方法，升序排序</span><br>lst.sort()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序后的列表&#x27;</span>, lst, <span class="hljs-built_in">id</span>(lst))   <span class="hljs-comment"># 排序后的列表 [10, 20, 40, 54, 98] 2701818270784</span><br><span class="hljs-comment"># 通过指定关键字参数，将列表中的元素进行降序排序</span><br>lst.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [98, 54, 40, 20, 10]</span><br><span class="hljs-comment"># ---------使用内置函数sorted()对列表进行排序，将产生一个新的列表对象-----------</span><br>lst = [<span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">98</span>, <span class="hljs-number">54</span>]<br>new_list = <span class="hljs-built_in">sorted</span>(lst)<br><span class="hljs-built_in">print</span>(new_list)     <span class="hljs-comment"># [10, 20, 40, 54, 98]</span><br><span class="hljs-comment"># 指定关键字参数，实现列表元素的降序排序</span><br>desc_list = <span class="hljs-built_in">sorted</span>(lst, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(desc_list)    <span class="hljs-comment"># [98, 54, 40, 20, 10]</span><br></code></pre></td></tr></table></figure><h3 id="11-9-列表生成式"><a href="#11-9-列表生成式" class="headerlink" title="11.9 列表生成式"></a>11.9 列表生成式</h3><p>列表生成式简称<strong>“生成列表的公式”</strong></p><p>下面通过一段代码，加深对列表生成式的理解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>lst2 = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(lst2) <span class="hljs-comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="hljs-string">&quot;&quot;&quot;列表中的元素的值为2，4，6，8，10&quot;&quot;&quot;</span><br>lst3 = [i*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)]<br><span class="hljs-built_in">print</span>(lst3) <span class="hljs-comment"># [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure><blockquote><p>由上述代码可见，其实真正决定<code>lst</code>的取值的就在于<code>for</code>前面的表达式为多少，如果是<code>i</code>，那就是<code>range()</code>本身迭代的元素，如果是<code>i*2</code>，那就要把迭代的元素全扩大2倍，就如注意事项说的一样，<code>i*i</code>表示为列表元素的表达式。</p></blockquote><h2 id="12-字典"><a href="#12-字典" class="headerlink" title="12 字典"></a>12 字典</h2><h3 id="12-1-什么是字典"><a href="#12-1-什么是字典" class="headerlink" title="12.1 什么是字典"></a>12.1 什么是字典</h3><ul><li><p>Python内置的数据结构之一，与列表一样是一个<strong>可变序列</strong></p><ul><li><strong>可变</strong>就是指可以执行增删改操作</li></ul></li><li><p>以键值对的方式存储数据，字典是一个<strong>无序的序列</strong></p></li><li><p><code>scores = &#123;&#39;张山&#39;: 100, &#39;李四&#39;: 98, &#39;王五&#39;: 45&#125;</code></p><ul><li>他们分别由字典名、花括号、逗号、键、冒号、值一一对应组成</li></ul></li></ul><h3 id="12-2-字典的原理"><a href="#12-2-字典的原理" class="headerlink" title="12.2 字典的原理"></a>12.2 字典的原理</h3><blockquote><p> 字典的实现原理</p></blockquote><p>字典的实现原理与查字典类似，查字典是先根据部首或者拼音查找对应的页码，而Python中的字典是根据<code>key</code>查找<code>value</code>所在的位置</p><h3 id="12-3-字典的创建与删除"><a href="#12-3-字典的创建与删除" class="headerlink" title="12.3 字典的创建与删除"></a>12.3 字典的创建与删除</h3><blockquote><ol><li>字典的创建</li></ol></blockquote><ul><li>最常用的方式：使用花括号<ul><li><code>scores = &#123;&#39;张山&#39;: 100, &#39;李四&#39;: 98, &#39;王五&#39;: 45&#125;</code></li></ul></li><li>使用内置函数<code>dict()</code><ul><li><code>dict(name = &#39;jack&#39;, age = 20)</code></li></ul></li></ul><p>下面通过一段代码，来了解一下</p><h3 id="12-4-字典的查询操作"><a href="#12-4-字典的查询操作" class="headerlink" title="12.4 字典的查询操作"></a>12.4 字典的查询操作</h3><blockquote><p>字典中元素的获取有两种方式</p></blockquote><ol><li><code>[]</code>  ——&gt; 举例：<code>scores[&#39;张三&#39;]</code></li><li><code>get()</code>方法  ——&gt; 举例：<code>scores.get(&#39;张三&#39;)</code></li></ol><p>两种方法有着一些区别之处</p><ul><li><code>[]</code>：如果字典中不存在指定的<code>key</code>，抛出<code>KeyError</code>异常</li><li><code>get()</code>方法取值：如果字典中不存在指定的<code>key</code>，并不会抛出<code>KeyError</code>，而是返回<code>None</code>，可以通过参数设置默认的<code>value</code>，以便指定的<code>key</code>不存在时返回</li></ul><p>下面通过一段代码，了解一下字典的查询操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;获取字典中的元素&quot;&quot;&quot;</span><br>scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-comment"># 第一种方式，使用[]</span><br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;张三&#x27;</span>])     <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;陈六&#x27;</span>])     <span class="hljs-comment"># KeyError: &#x27;陈六&#x27;</span><br><span class="hljs-comment"># 第二种方式，使用get()方法</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;张三&#x27;</span>))     <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;陈六&#x27;</span>))     <span class="hljs-comment"># 并不会报错，而是输出None</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;麻七&#x27;</span>, <span class="hljs-number">99</span>)) <span class="hljs-comment"># 99是在查找‘麻七’时，所对应的value不存在时，提供的一个默认值</span><br></code></pre></td></tr></table></figure><h3 id="12-5-字典元素的增、删、改操作"><a href="#12-5-字典元素的增、删、改操作" class="headerlink" title="12.5 字典元素的增、删、改操作"></a>12.5 字典元素的增、删、改操作</h3><h4 id="1-key的判断"><a href="#1-key的判断" class="headerlink" title="1. key的判断"></a>1. key的判断</h4><table><thead><tr><th align="center">key的判断</th><th align="center">解释</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center"><code>in</code></td><td align="center">指定的<code>key</code>在字典中<strong>存在</strong>返回<code>True</code></td><td align="center"><code>&#39;张三&#39; in scores</code></td></tr><tr><td align="center"><code>not in</code></td><td align="center">指定的<code>key</code>在字典中<strong>不存在</strong>返回<code>True</code></td><td align="center"><code>&#39;Marry&#39; not in scores</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-string">&quot;&quot;&quot;key值的判断&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">in</span> scores)       <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> scores)   <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h4 id="2-字典元素的删除"><a href="#2-字典元素的删除" class="headerlink" title="2. 字典元素的删除"></a>2. 字典元素的删除</h4><ul><li><code>del scores[&#39;张三&#39;]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-string">&quot;&quot;&quot;字典的删除&quot;&quot;&quot;</span><br><span class="hljs-keyword">del</span> scores[<span class="hljs-string">&#x27;张三&#x27;</span>]    <span class="hljs-comment"># 删除指定的键值对（key-value）</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45&#125;</span><br>scores.clear()  <span class="hljs-comment"># 清空字典中的所有元素</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-字典元素的新增"><a href="#3-字典元素的新增" class="headerlink" title="3. 字典元素的新增"></a>3. 字典元素的新增</h4><ul><li><code>scores[&#39;jack&#39;] = 90</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-string">&quot;&quot;&quot;字典元素的新增&quot;&quot;&quot;</span><br>scores[<span class="hljs-string">&#x27;陈六&#x27;</span>] = <span class="hljs-number">98</span>   <span class="hljs-comment"># 新增元素</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;陈六&#x27;: 98&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;字典元素的修改&quot;&quot;&quot;</span><br>scores[<span class="hljs-string">&#x27;陈六&#x27;</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;陈六&#x27;: 100&#125;</span><br></code></pre></td></tr></table></figure><p>值得注意的是，字典元素的新增也可以作为修改来运行，只需把括号里面的键改成自己需要修改的元素，即可对他的<code>value</code>进行修改</p><h4 id="4-获取字典视图的三个方法"><a href="#4-获取字典视图的三个方法" class="headerlink" title="4. 获取字典视图的三个方法"></a>4. 获取字典视图的三个方法</h4><ul><li><code>keys()</code>              ——&gt;获取字典中所有的<code>key</code></li><li><code>values()</code>       ——&gt;获取字典中所有<code>value</code></li><li><code>items()</code>         ——&gt;获取字典中所有<code>key</code>，<code>value</code>对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-comment"># 获取所有的key</span><br>keys = scores.keys()<br><span class="hljs-built_in">print</span>(keys)             <span class="hljs-comment"># dict_keys([&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(keys))       <span class="hljs-comment"># &lt;class &#x27;dict_keys&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(keys))       <span class="hljs-comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]，将所有的key组成的试图转成列表</span><br><br><span class="hljs-comment"># 获取所有的value</span><br>values = scores.values()<br><span class="hljs-built_in">print</span>(values)           <span class="hljs-comment"># dict_values([100, 98, 45])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(values))     <span class="hljs-comment"># &lt;class &#x27;dict_values&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(values))     <span class="hljs-comment"># [100, 98, 45]</span><br><br><span class="hljs-comment"># 获取所有的key-value对</span><br>items=scores.items()<br><span class="hljs-built_in">print</span>(items)            <span class="hljs-comment"># dict_items([(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(items))      <span class="hljs-comment"># &lt;class &#x27;dict_items&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(items))      <span class="hljs-comment"># [(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)]，转换之后的列表元素是有元组组成的</span><br></code></pre></td></tr></table></figure><h4 id="5-字典元素的遍历"><a href="#5-字典元素的遍历" class="headerlink" title="5. 字典元素的遍历"></a>5. 字典元素的遍历</h4><p>代码格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>下面是一个代码例子，用来理解一下元素的遍历方法的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-comment"># 字典元素的遍历</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-built_in">print</span>(item, scores[item], scores.get(item))<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">张三 100 100</span><br><span class="hljs-string">李四 98 98</span><br><span class="hljs-string">王五 45 45</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p> 由代码例子可见，遍历的时候，获取<code>value</code>的值也是和上面的方法类似，可以直接使用<code>[]</code>方法，也可以使用<code>get()</code>方法。但是使用[]方法的时候可能会抛出异常，而<code>get()</code>方法不会抛出异常，只会输出<code>None</code></p></blockquote><h3 id="12-6-字典的特点"><a href="#12-6-字典的特点" class="headerlink" title="12.6 字典的特点"></a>12.6 字典的特点</h3><ul><li>字典中的所有元素都是一个<code>key-value</code>对，<code>key</code>不允许重复，<code>value</code>可以重复</li><li>字典中的元素是无序的</li><li>字典中的<code>key</code>必须是不可变对象</li><li>字典也可以根据需要动态地伸缩</li><li>字典会浪费较大的内存，是一种使用空间换时间的数据结构</li></ul><h3 id="12-7字典推导式"><a href="#12-7字典推导式" class="headerlink" title="12.7字典推导式"></a>12.7字典推导式</h3><p><code>items = [&#39;Fruits&#39;, &#39;Books&#39;, &#39;Others&#39;]      prices = [96, 78, 85]</code></p><p><code>&#123;&#39;Fruits&#39;: 96,&#39;Books&#39;: 78, &#39;Others&#39;: 85&#125;</code></p><ul><li>内置函数<code>zip()</code><ul><li>用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">items = [<span class="hljs-string">&#x27;Fruits&#x27;</span>, <span class="hljs-string">&#x27;Books&#x27;</span>, <span class="hljs-string">&#x27;Others&#x27;</span>]<br>prices = [<span class="hljs-number">96</span>, <span class="hljs-number">78</span>, <span class="hljs-number">85</span>]<br>lst = <span class="hljs-built_in">zip</span>(items, prices)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(lst))    <span class="hljs-comment"># [(&#x27;Fruits&#x27;, 96), (&#x27;Books&#x27;, 78), (&#x27;Others&#x27;, 85)]</span><br><br>d = &#123;item: price <span class="hljs-keyword">for</span> item, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items, prices)&#125;<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># &#123;&#x27;Fruits&#x27;: 96, &#x27;Books&#x27;: 78, &#x27;Others&#x27;: 85&#125;</span><br><br>items = [<span class="hljs-string">&#x27;Fruits&#x27;</span>, <span class="hljs-string">&#x27;Books&#x27;</span>, <span class="hljs-string">&#x27;Others&#x27;</span>]<br>prices = [<span class="hljs-number">96</span>, <span class="hljs-number">78</span>, <span class="hljs-number">85</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>]<br>d = &#123;item: price <span class="hljs-keyword">for</span> item, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items, prices)&#125;<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># &#123;&#x27;Fruits&#x27;: 96, &#x27;Books&#x27;: 78, &#x27;Others&#x27;: 85&#125;</span><br><br>d = &#123;item.upper(): price <span class="hljs-keyword">for</span> item, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items, prices)&#125;<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># &#123;&#x27;FRUITS&#x27;: 96, &#x27;BOOKS&#x27;: 78, &#x27;OTHERS&#x27;: 85&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>根据上述代码的演示，可以发现，就是利用两个列表合并，用for循环遍历生成了一个字典，其中使用到了内置函数<code>zip()</code>，包括使用到了<code>str.upper()</code>函数，这个函数的意思为将小写字母变成大写字母</p></blockquote><h2 id="13-元组"><a href="#13-元组" class="headerlink" title="13. 元组"></a>13. 元组</h2><h3 id="13-1-什么是元组"><a href="#13-1-什么是元组" class="headerlink" title="13.1 什么是元组"></a>13.1 什么是元组</h3><ul><li><p><code>t = (&#39;Python&#39;, &#39;hello&#39;, 90)</code></p></li><li><p>元组：Python内置的数据结构之一，是一个不可变序列</p></li><li><p>不可变序列和可变序列</p><ul><li>不可变序列：字符串、元组<ul><li>不可变序列没有增删改的操作</li></ul></li><li>可变序列：列表、字典<ul><li>可变序列可以对序列执行增删改操作，对象地址不发生更改</li></ul></li></ul></li></ul><h3 id="13-2-元组的创建方式"><a href="#13-2-元组的创建方式" class="headerlink" title="13.2 元组的创建方式"></a>13.2 元组的创建方式</h3><blockquote><ol><li>直接小括号</li></ol></blockquote><p><code>t = (&#39;Python&#39;, &#39;hello&#39;, 90)</code></p><blockquote><ol start="2"><li>使用内置函数tuple()</li></ol></blockquote><p><code>t = tuple((&#39;Python&#39;, &#39;hello&#39;, 90))</code></p><blockquote><ol start="3"><li>只包含一个元组的元素需要使用逗号和小括号</li></ol></blockquote><p><code>t = (10, )</code></p><p>下面是几段代码，来解释一下元组的创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种创建方式</span><br>t = (<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(t)                <span class="hljs-comment"># (&#x27;Python&#x27;, &#x27;hello&#x27;, 90)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-built_in">type</span>(t))     <span class="hljs-comment"># t &lt;class &#x27;tuple&#x27;&gt;</span><br><br>t2 = <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">90</span>  <span class="hljs-comment"># 省略了小括号</span><br><span class="hljs-built_in">print</span>(t2)               <span class="hljs-comment"># (&#x27;Python&#x27;, &#x27;hello&#x27;, 90)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t2&#x27;</span>, <span class="hljs-built_in">type</span>(t2))   <span class="hljs-comment"># t2 &lt;class &#x27;tuple&#x27;&gt;</span><br><br>t3 = (<span class="hljs-string">&#x27;python&#x27;</span>, )       <span class="hljs-comment"># 如果元组种只有一个元素，逗号不能省略</span><br><span class="hljs-built_in">print</span>(t3)               <span class="hljs-comment"># (&#x27;python&#x27;,)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t3&#x27;</span>, <span class="hljs-built_in">type</span>(t3))   <span class="hljs-comment"># t3 &lt;class &#x27;tuple&#x27;&gt;</span><br><br><span class="hljs-comment"># 第二种创建方式，使用内置函数tuple()</span><br>t4 = <span class="hljs-built_in">tuple</span>((<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">90</span>))<br><span class="hljs-built_in">print</span>(t4)               <span class="hljs-comment"># (&#x27;Python&#x27;, &#x27;hello&#x27;, 90)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t4&#x27;</span>, <span class="hljs-built_in">type</span>(t4))   <span class="hljs-comment"># t4 &lt;class &#x27;tuple&#x27;&gt;</span><br><br><span class="hljs-comment"># 空列表的创建方式</span><br>lst = []<br>lst1 = <span class="hljs-built_in">list</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空列表&#x27;</span>, lst, lst1)     <span class="hljs-comment"># 空列表 [] []</span><br><br><span class="hljs-comment"># 空字典的创建方式</span><br>d = &#123;&#125;<br>d1 = <span class="hljs-built_in">dict</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空字典&#x27;</span>, d, d1)         <span class="hljs-comment"># 空字典 &#123;&#125; &#123;&#125;</span><br><br><span class="hljs-comment"># 空元组的创建方式</span><br>t = ()<br>t1 = <span class="hljs-built_in">tuple</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空元组&#x27;</span>, t, t1)         <span class="hljs-comment"># 空元组 () ()</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码种也提到了一些注意事项，例如元组只有一个元素的时候，应该怎么创建，在后面加上逗号。另外，还提到了空列表、空字典、空元组的创建方式</p></blockquote><h3 id="13-3-元组的遍历"><a href="#13-3-元组的遍历" class="headerlink" title="13.3 元组的遍历"></a>13.3 元组的遍历</h3><p>元组是可迭代对象，所以可以使用<code>for  in</code>进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">10</span>, [<span class="hljs-number">20</span>, <span class="hljs-number">30</span>], <span class="hljs-number">9</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><h3 id="13-4-为什么将元组设计成不可变序列"><a href="#13-4-为什么将元组设计成不可变序列" class="headerlink" title="13.4 为什么将元组设计成不可变序列"></a>13.4 为什么将元组设计成不可变序列</h3><ul><li>在多任务环境下，同时操作对象时不需要加锁</li><li>因此，在程序种尽量使用不可变序列</li></ul><p><strong>注意事项：</strong></p><ul><li>元组种存储的是对象的引用<ul><li>如果元组中对象本身是不可对象，则不能再引用其他对象</li><li>如果元组种的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变</li></ul></li></ul><p>下面是一段代码例子，用来说明一下注意事项中的两条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">10</span>, [<span class="hljs-number">20</span>, <span class="hljs-number">30</span>], <span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(t))    <span class="hljs-comment"># 1505236190656</span><br><span class="hljs-built_in">print</span>(t)  <span class="hljs-comment"># (10, [20, 30], 9)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">0</span>], <span class="hljs-built_in">type</span>(t[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(t[<span class="hljs-number">0</span>]))  <span class="hljs-comment"># 10 &lt;class &#x27;int&#x27;&gt; 2168335919696</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">1</span>], <span class="hljs-built_in">type</span>(t[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(t[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># [20, 30] &lt;class &#x27;list&#x27;&gt; 1505235036864</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">2</span>], <span class="hljs-built_in">type</span>(t[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(t[<span class="hljs-number">2</span>]))  <span class="hljs-comment"># 9 &lt;class &#x27;int&#x27;&gt; 2168335919664</span><br><br><span class="hljs-string">&quot;&quot;&quot;尝试将t[1]修改成100&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">100</span>))<br><span class="hljs-comment"># t[1] = 100      # 元组是不允许修改元素的</span><br><span class="hljs-comment"># 由于[20，30]是列表，而列表是可变序列，所以可以向列中添加元素，但是列表的内存地址不变</span><br>t[<span class="hljs-number">1</span>].append(<span class="hljs-number">100</span>)  <span class="hljs-comment"># 向列表中添加元素</span><br><span class="hljs-built_in">print</span>(t, <span class="hljs-built_in">id</span>(t[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># (10, [20, 30, 100], 9) 1505235036864</span><br></code></pre></td></tr></table></figure><blockquote><p>由此可见，如果元组对象中的是不可变对象，比如<code>10</code>，<code>9</code>，那么他们就不能再引用其他对象，因为他们的<code>id</code>是固定的，如果是<code>t[1]</code>，<code>[20, 30]</code>，本身是一个可变的列表，那么它的引用是不可变的，因为它的<code>id</code>是固定的。但是可以再列表后面接着追加变量，例如<code>append(100)</code>，此时它的<code>id</code>仍然是没有变化</p></blockquote><h2 id="14-集合"><a href="#14-集合" class="headerlink" title="14. 集合"></a>14. 集合</h2><h3 id="14-1-什么是集合"><a href="#14-1-什么是集合" class="headerlink" title="14.1 什么是集合"></a>14.1 什么是集合</h3><ul><li>Python语言提供的内置数据结构</li><li>与列表、字典一样都属于可变类型的序列</li><li>集合是没有value的字典</li></ul><h3 id="14-2-集合的创建"><a href="#14-2-集合的创建" class="headerlink" title="14.2 集合的创建"></a>14.2 集合的创建</h3><ul><li>直接<code>&#123;&#125;</code><ul><li><code>s = &#123;&#39;python&#39;, &#39;hello&#39;, 90&#125;</code></li></ul></li><li>使用内置函数<code>set()</code></li></ul><p>下面通过一些代码例子，来了解一下集合的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种创建方式，使用&#123;&#125;</span><br>s = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>&#125;    <span class="hljs-comment"># 集合中的元素不允许重复</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;2, 3, 4, 5, 6, 7&#125;</span><br><br><span class="hljs-comment"># 第二种创建方式，使用内置函数set()</span><br>s1 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(s1, <span class="hljs-built_in">type</span>(s1))     <span class="hljs-comment"># &#123;0, 1, 2, 3, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>])     <span class="hljs-comment"># 将列表中的元素转换成集合</span><br><span class="hljs-built_in">print</span>(s2, <span class="hljs-built_in">type</span>(s2))     <span class="hljs-comment"># &#123;1, 2, 4, 5, 6&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">65</span>))     <span class="hljs-comment"># 元组是无序的，所以打印出来的数字顺序变化</span><br><span class="hljs-built_in">print</span>(s3, <span class="hljs-built_in">type</span>(s3))     <span class="hljs-comment"># &#123;65, 1, 2, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s4 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;python&#x27;</span>)      <span class="hljs-comment"># 将str类型的元素转换成集合</span><br><span class="hljs-built_in">print</span>(s4, <span class="hljs-built_in">type</span>(s4))     <span class="hljs-comment"># &#123;&#x27;h&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;n&#x27;, &#x27;t&#x27;, &#x27;y&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s5 = <span class="hljs-built_in">set</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">31</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>&#125;)   <span class="hljs-comment"># 将集合中的元素转换成另外一个集合，元素的顺序发成变化</span><br><span class="hljs-built_in">print</span>(s5, <span class="hljs-built_in">type</span>(s5))     <span class="hljs-comment"># &#123;1, 22, 23, 45, 31&#125; &lt;class &#x27;set&#x27;&gt;</span><br><br><span class="hljs-comment"># 定义一个空集合</span><br>s6 = &#123;&#125;     <span class="hljs-comment"># 直接定义一个花括号，类型是字典，并不是集合</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s6))     <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br>s7 = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 用set()定义的时候才是集合</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s7))     <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="14-3-集合的增删查改操作"><a href="#14-3-集合的增删查改操作" class="headerlink" title="14.3 集合的增删查改操作"></a>14.3 集合的增删查改操作</h3><h4 id="1-集合元素的判断操作"><a href="#1-集合元素的判断操作" class="headerlink" title="1. 集合元素的判断操作"></a>1. 集合元素的判断操作</h4><ul><li><code>in</code>或者<code>not in</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># 集合元素的判断操作</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> s)      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">in</span> s)     <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h4 id="2-集合元素的新增操作"><a href="#2-集合元素的新增操作" class="headerlink" title="2. 集合元素的新增操作"></a>2. 集合元素的新增操作</h4><ul><li>调用<code>add()</code>方法，一次添加一个元素</li><li>调用<code>update()</code>方法，至少添加一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># 集合元素的新增操作</span><br>s.add(<span class="hljs-number">80</span>)   <span class="hljs-comment"># 一次添加一个元素</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;80, 50, 20, 40, 10, 30&#125;</span><br>s.update(&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>&#125;)   <span class="hljs-comment"># 一次添加至少一个元素</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;100, 40, 200, 10, 300, 80, 50, 20, 30&#125;</span><br>s.update([<span class="hljs-number">100</span>, <span class="hljs-number">101</span>])<br>s.update((<span class="hljs-number">201</span>, <span class="hljs-number">202</span>))<br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;100, 101, 40, 200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-集合元素的删除操作"><a href="#3-集合元素的删除操作" class="headerlink" title="3. 集合元素的删除操作"></a>3. 集合元素的删除操作</h4><ul><li>调用<code>remove()</code>方法，一次删除一个指定元素，如果指定的元素不存在，则抛出<code>KeyError</code>异常</li><li>调用<code>discard()</code>方法，一次删除一个指定元素，如果指定的元素不存在，不抛出异常</li><li>调用<code>pop()</code>方法，一次只删除一个任意元素</li><li>调用<code>clear()</code>方法，清空集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">40</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>, <span class="hljs-number">201</span>, <span class="hljs-number">300</span>, <span class="hljs-number">202</span>, <span class="hljs-number">80</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-comment"># 集合元素的删除操作</span><br>s.remove(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;101, 40, 200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br><span class="hljs-comment"># s.remove(500)   # KeyError: 500</span><br>s.discard(<span class="hljs-number">101</span>)<br>s.discard(<span class="hljs-number">500</span>)  <span class="hljs-comment"># 集合中没有500，但是程序也没有报错没有抛出异常</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;40, 200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br>s.pop()     <span class="hljs-comment"># 随机把40删除了，pop()函数是没有参数的，删除的元素也是随机的</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br>s.clear()   <span class="hljs-comment"># 直接把集合清空了</span><br></code></pre></td></tr></table></figure><h3 id="14-4-集合之间的关系"><a href="#14-4-集合之间的关系" class="headerlink" title="14.4 集合之间的关系"></a>14.4 集合之间的关系</h3><ul><li>两个集合是否相等<ul><li>可以使用运算符<code>==</code>或者<code>!=</code>进行判断</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断两个集合是否相等</span><br>s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s2 = &#123;<span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">print</span>(s == s2)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s != s2)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>一个集合是否是另一个集合的子集<ul><li>可以调用方法<code>issubset</code>进行判断</li><li><code>B</code>是<code>A</code>的子集</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个集合是否是另一个集合的子集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s3 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-built_in">print</span>(s2.issubset(s1))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s3.issubset(s1))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>一个集合是否是另一个集合的超集<ul><li>可以调用方法<code>issuperset</code>进行判断</li><li><code>A</code>是<code>B</code>的超集</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个集合是否是另一个集合的超集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s3 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-built_in">print</span>(s1.issuperset(s2))    <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s1.issuperset(s3))    <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>两个集合是否没有交集<ul><li>可以调用方法<code>isdisjoint</code>进行判断</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 两个集合是否没有交集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s3 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-built_in">print</span>(s2.isdisjoint(s3))    <span class="hljs-comment"># False     有交集为False</span><br>s4 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;<br><span class="hljs-built_in">print</span>(s2.isdisjoint(s4))    <span class="hljs-comment"># True  s2和s4是没有交集的，没有交集为True</span><br></code></pre></td></tr></table></figure><h3 id="14-5-集合的数据操作"><a href="#14-5-集合的数据操作" class="headerlink" title="14.5 集合的数据操作"></a>14.5 集合的数据操作</h3><p>交集、并集、差集、对称差集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># （1）交集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s2 = &#123;<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-built_in">print</span>(s1.intersection(s2))  <span class="hljs-comment"># &#123;40, 20, 30&#125;</span><br><span class="hljs-built_in">print</span>(s1 &amp; s2)  <span class="hljs-comment"># &#123;40, 20, 30&#125;      intersection()和 &amp; 等价，都是交集操作</span><br><br><span class="hljs-comment"># （2）并集</span><br><span class="hljs-built_in">print</span>(s1.union(s2))     <span class="hljs-comment"># &#123;40, 10, 50, 20, 30&#125;</span><br><span class="hljs-built_in">print</span>(s1 | s2)  <span class="hljs-comment"># &#123;40, 10, 50, 20, 30&#125;      union()和 | 等价，都是并集操作</span><br><br><span class="hljs-comment"># （3）差集</span><br><span class="hljs-built_in">print</span>(s1.difference(s2))    <span class="hljs-comment"># &#123;10&#125;</span><br><span class="hljs-built_in">print</span>(s1-s2)    <span class="hljs-comment"># &#123;10&#125;      difference()和 - 等价，都是差集操作</span><br><br><span class="hljs-comment"># （4）对称差集</span><br><span class="hljs-built_in">print</span>(s1.symmetric_difference(s2))  <span class="hljs-comment"># &#123;10, 50&#125;</span><br></code></pre></td></tr></table></figure><h3 id="14-6-集合生成式"><a href="#14-6-集合生成式" class="headerlink" title="14.6 集合生成式"></a>14.6 集合生成式</h3><ul><li>用于生成集合的公式<ul><li><code>&#123;i * i for i in range(1, 10)&#125;</code></li><li><code>i*i</code>中的<code>i</code>表示集合元素的表达式，第二个i是自定义变量，<code>range</code>是可迭代对象</li></ul></li><li>将<code>&#123;&#125;</code>修改为<code>[]</code>就是列表生成式</li><li>没有元素生成式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表生成式</span><br>lst = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)]<br><span class="hljs-built_in">print</span>(lst)      <span class="hljs-comment"># [0, 1, 4, 9, 16, 25]</span><br><br><span class="hljs-comment"># 集合生成式</span><br>s = &#123;i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)&#125;<br><span class="hljs-built_in">print</span>(s)        <span class="hljs-comment"># &#123;0, 1, 64, 4, 36, 9, 16, 49, 81, 25&#125;</span><br></code></pre></td></tr></table></figure><h2 id="15-列表、字典、元组、集合总结"><a href="#15-列表、字典、元组、集合总结" class="headerlink" title="15. 列表、字典、元组、集合总结"></a>15. 列表、字典、元组、集合总结</h2><table><thead><tr><th align="center">数据结构</th><th align="center">是否可变</th><th align="center">是否重复</th><th align="center">是否有序</th><th align="center">定义符号</th></tr></thead><tbody><tr><td align="center">列表（<code>list</code>）</td><td align="center">可变</td><td align="center">可重复</td><td align="center">有序</td><td align="center"><code>[]</code></td></tr><tr><td align="center">元组（<code>tuple</code>）</td><td align="center">不可变</td><td align="center">可重复</td><td align="center">有序</td><td align="center"><code>()</code></td></tr><tr><td align="center">字典（<code>dict</code>）</td><td align="center">可变</td><td align="center"><code>key</code>不可重复<br /><code>value</code>可重复</td><td align="center">无序</td><td align="center"><code>&#123;key: value&#125;</code></td></tr><tr><td align="center">集合（<code>set</code>）</td><td align="center">可变</td><td align="center">不可重复</td><td align="center">无序</td><td align="center"><code>&#123;&#125;</code></td></tr></tbody></table><p><img src="python%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.png" alt="元组与集合的知识总结"></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>日常学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础（上）</title>
    <link href="/2022/01/14/python-ji-chu-shang/"/>
    <url>/2022/01/14/python-ji-chu-shang/</url>
    
    <content type="html"><![CDATA[<p>前一段时间一直在学习Python基础，但是学的也是杂乱无章，忘的也比较快，今天特别抽时间把学习的笔记整理出来一部分，基本上都是参考马士兵Python的b站课程顺序整理出来的</p><h2 id="1-print打印"><a href="#1-print打印" class="headerlink" title="1. print打印"></a>1. print打印</h2><ul><li>功能：向目的地输出内容</li><li>输出的内容：数字、字符串、表达式</li><li>目的地：LDLE（集成开发环境）、控制台、文件</li></ul><h2 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2. 转义字符"></a>2. 转义字符</h2><h3 id="2-1-什么是转义字符"><a href="#2-1-什么是转义字符" class="headerlink" title="2.1 什么是转义字符"></a>2.1 什么是转义字符</h3><blockquote><p>就是反斜杠+想要实现的转义功能首字母</p></blockquote><h3 id="2-2-为什么需要转义字符"><a href="#2-2-为什么需要转义字符" class="headerlink" title="2.2 为什么需要转义字符"></a>2.2 为什么需要转义字符</h3><blockquote><p>当字符串中包含反斜杠、单引号和双引号等有特殊用途的字符时，必须使用反斜杠对这些字符进行转义（转换一个含义）</p><ul><li>反斜杠 <code>\\</code></li><li>单引号 <code>\‘</code></li><li>双引号 <code>\“</code></li></ul></blockquote><blockquote><p>当字符串中包含换行、回车、水平制表符或者退格等无法直接表示的特殊字符时，也可以使用转义字符</p><ul><li>换行 \n     newline换行首字母</li><li>回车 \r     回车会把前面的覆盖掉<code>print(&#39;hello \r world&#39;)</code>，这里的打印出world，回车会把hello覆盖</li><li>水平制表符 \t      制表符从前到后开始数，四个为一个制表位</li><li>退格 \b      退一格，会把上一个字符退格删了</li></ul></blockquote><h3 id="2-3-原字符"><a href="#2-3-原字符" class="headerlink" title="2.3 原字符"></a>2.3 原字符</h3><blockquote><p>原字符：不希望字符串中的转义字符起作用，就使用原字符， 就是在字符串之前加上<code>R</code>或者<code>r</code></p><p>注意事项：最后一个字符不能是反斜杠</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nworld\&#x27;)</span><br></code></pre></td></tr></table></figure><p>最后只有一个字符是反斜杠就会报错，如果是两个反斜杠就没有问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nworld&#x27;</span>)<span class="hljs-comment">#则打印出来显示的为”hello\nworld“</span><br></code></pre></td></tr></table></figure><h2 id="3-二进制和字符编码"><a href="#3-二进制和字符编码" class="headerlink" title="3. 二进制和字符编码"></a>3. 二进制和字符编码</h2><p><strong>8bit(位)=1byte(字节)        1024byte=1kb        1024kb=1mb        1024mb=1gb        1024gb=1t</strong></p><blockquote><p>机器语言只能识别0和1</p></blockquote><blockquote><p>基本的汉字和一些符号有ASII表</p></blockquote><blockquote><p>在中国有GB2312、GBK、GB18030等一些编码，在国外有其他国家的字符编码</p></blockquote><blockquote><p>但是Unicode几乎包含了全世界的字符、他就是UTF-8编码</p></blockquote><h2 id="4-标识符和保留字"><a href="#4-标识符和保留字" class="headerlink" title="4. 标识符和保留字"></a>4. 标识符和保留字</h2><h3 id="4-1-保留字"><a href="#4-1-保留字" class="headerlink" title="4.1 保留字"></a>4.1 保留字</h3><blockquote><p>有一些单词被赋予了特定的意义，这些单词在给任何对象起名字的时候都不能用到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">None</span>       <span class="hljs-keyword">break</span>      <span class="hljs-keyword">except</span>     <span class="hljs-keyword">in</span>         <span class="hljs-keyword">raise</span><br><span class="hljs-literal">True</span>       <span class="hljs-class"><span class="hljs-keyword">class</span>      <span class="hljs-title">finally</span>    <span class="hljs-title">is</span>         <span class="hljs-title">return</span></span><br><span class="hljs-class"><span class="hljs-title">and</span>        <span class="hljs-title">continue</span>   <span class="hljs-title">for</span>        <span class="hljs-title">lambda</span>     <span class="hljs-title">try</span></span><br><span class="hljs-class"><span class="hljs-title">as</span>         <span class="hljs-title">def</span>        <span class="hljs-title">from</span>       <span class="hljs-title">nonlocal</span>   <span class="hljs-title">while</span></span><br><span class="hljs-class"><span class="hljs-title">assert</span>     <span class="hljs-title">del</span>        <span class="hljs-title">global</span>     <span class="hljs-title">not</span>        <span class="hljs-title">with</span></span><br><span class="hljs-class"><span class="hljs-title">async</span>      <span class="hljs-title">elif</span>       <span class="hljs-title">if</span>         <span class="hljs-title">or</span>         <span class="hljs-title">yield</span></span><br></code></pre></td></tr></table></figure></blockquote><p><strong>1.  <code>True</code>、<code>False</code></strong></p><p><code>False </code>布尔类型的值，表示假，与<code>True</code>相反 <code>True </code>布尔类型的值，表示真，与<code>False</code>相反</p><p><strong>2. <code>and</code>、<code>or</code>、<code>not</code></strong></p><p>逻辑运算符 与、或、非</p><p><strong>3.<code>class</code></strong></p><p>定义类的关键字</p><p><strong>4.<code>is</code>、<code>in</code></strong></p><p>Python中的对象包含三个要素：<code>id</code>，<code>type</code>，<code>value</code> 其中：</p><ul><li><code>id</code>:用来唯一标识一个对象</li><li><code>type</code>：标识对象的类型</li><li><code>value</code>：是对象的值</li></ul><p><code>is</code>：就是用来判断a对象是否就是b对象，是通过id来判断的</p><p><code>==</code>：判断的是a对象的值是否和b对象的值相等，是通过value来判断的</p><p><code>in</code>：判断变量是否存在序列中</p><p><strong>5.<code>try</code>、<code>except</code>、<code>finally</code>、<code>raise</code></strong></p><p>使用<code>try...except...finally</code>语句来处理异常。</p><ul><li>通常的语句块放在<code>try</code>块中</li><li>错误处理的语句放在<code>except</code>块中</li><li>始终执行的语句放在<code>finally</code>块中</li><li><code>raise</code> 语句抛出一个指定的异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:        <br>    <span class="hljs-comment">#some code here        </span><br>    <span class="hljs-keyword">raise</span> MyException      <br><span class="hljs-keyword">except</span> MyException:        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyException encoutered&quot;</span>) <br><span class="hljs-keyword">finally</span>:        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Arrive finally&quot;</span>)<br>    <br>x = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;x 不能大于 5。x 的值为: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x))<br></code></pre></td></tr></table></figure><p><strong>6.<code>if</code>、<code>elif</code>、<code>else</code></strong></p><p>判断语句，<code>if</code>语句用来检验一个条件，如果条件为真，运行一块语句(称为<code>if…</code>块)，否则处理另外一块语句（称为<code>else…</code>块）。<code>else</code>从句是可选的</p><p><strong>7.<code>def</code>、<code>global</code>、<code>nonlocal</code>、<code>return</code>、<code>yield</code></strong></p><ul><li><code>def </code>定义函数的关键字</li><li><code>global</code> 定义全局变量</li><li><code>nonlocal </code>在局部寻找外层函数中离他最近的那个变量</li><li><code>return</code> 函数中的返回值</li><li><code>yield</code>的用法有点像<code>return</code>,除了它返回的是一个生成器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createGenerator</span>():</span><br>    mylist = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist:<br>        <span class="hljs-keyword">yield</span> i*i<br></code></pre></td></tr></table></figure><p><strong>8.<code>for</code>、<code>while</code></strong></p><p><code>for</code>循环可以遍历任何序列的项目，如一个列表或者一个字符串 <code>while</code>循环可以通关判断条件真假无限循环</p><p><strong>9.<code>break</code>、<code>continue</code></strong></p><ul><li><code>break</code>语句是用来终止循环语句，即使哪怕循环条件没有称为<code>false</code>或者序列还没有被完全递归，也会停止循环</li><li><code>continue</code>语句被用来跳过当前循环块中的剩余语句，继续进行下一轮循环</li></ul><p><strong>10.<code>assert</code></strong></p><p><code>assert</code> 关键字用于在代码中设置检查点，用于当程序出现错误时中断程序执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt;<span class="hljs-number">10</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#3&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt;<span class="hljs-number">10</span><br>AssertionError<br> <br><span class="hljs-comment"># assert 条件后可以增加错误信息解释</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;超出范围！&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#5&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;超出范围！&#x27;</span><br>AssertionError: 超出范围！<br></code></pre></td></tr></table></figure><p><strong>11.<code>del</code></strong></p><p><code>del</code>删除变量或者序列的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-number">85</span>] <span class="hljs-comment"># 定义一个list      </span><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>] <span class="hljs-comment"># 删除第0个元素      </span><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] <span class="hljs-comment"># 删除从第2个到第3个元素。</span><br></code></pre></td></tr></table></figure><p><strong>12.<code>import</code>、<code>from</code>、 <code>as</code></strong></p><p>用于导包，<code>as</code>为重命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> fd <span class="hljs-keyword">as</span> f<br></code></pre></td></tr></table></figure><p><strong>13.<code>with</code></strong></p><p>用于文件的读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 写文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>) <span class="hljs-keyword">as</span> out_file:<br>    out_file.write(<span class="hljs-string">&quot;公众号：一行数据，没想到吧，这里有植入&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>14.<code>pass</code></strong></p><p><code>pass</code>空的类，函数，方法的占位符</p><p><strong>15.<code>await</code>、<code>async</code></strong></p><p><code>async</code> 用来声明一个函数为异步函数，异步函数的特点是能在函数执行过程中挂起，去执行其他异步函数，等到挂起条件（假设挂起条件是<code>sleep(5)</code>）消失后，也就是5秒到了再回来执行。</p><p><code>await</code> 用来用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>(<span class="hljs-params">i</span>):</span><br>     r = <span class="hljs-keyword">await</span> other_test(i)<br>     <span class="hljs-built_in">print</span>(i,r)<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">other_test</span>(<span class="hljs-params">i</span>):</span><br>     r = requests.get(i)<br>     <span class="hljs-built_in">print</span>(i)<br>     <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">4</span>)<br>     <span class="hljs-built_in">print</span>(time.time()-start)<br>     <span class="hljs-keyword">return</span> r<br> <br>url = [<span class="hljs-string">&quot;https://segmentfault.com/p/1210000013564725&quot;</span>,<br>        <span class="hljs-string">&quot;https://www.jianshu.com/p/83badc8028bd&quot;</span>,<br>        <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>]<br> <br>loop = asyncio.get_event_loop()<br>task = [asyncio.ensure_future(test2(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url]<br>start = time.time()<br>loop.run_until_complete(asyncio.wait(task))<br>endtime = time.time()-start<br><span class="hljs-built_in">print</span>(endtime)<br>loop.close()<br></code></pre></td></tr></table></figure><p><strong>16.<code>lambda</code></strong></p><p>通常是在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是<strong>匿名函数</strong></p><p><code>&lt;函数名&gt; = lambda &lt;参数&gt; : &lt;表达式&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span> x, y, z: x+y+z  <span class="hljs-comment">#f是表达式的名字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">#像函数一样调用</span><br></code></pre></td></tr></table></figure><h3 id="4-2-标识符"><a href="#4-2-标识符" class="headerlink" title="4.2 标识符"></a>4.2 标识符</h3><ul><li>变量、函数、类、模块和其他对象的起的名字都叫标识符</li><li>规则<ul><li>字母、数字、下划线_</li><li>不能以数字开头</li><li>不能是python保留字</li><li>严格区分大小写</li></ul></li></ul><p><strong>通过程序可以将所有保留字打印出来</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<span class="hljs-number">23</span><br><br><span class="hljs-comment">#输出结果</span><br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;__peg_parser__&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;async&#x27;</span>, <span class="hljs-string">&#x27;await&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h2><blockquote><p>变量就是内存中一个带标签的盒子</p></blockquote><p><strong>变量由三部分组成</strong></p><ul><li>标识：表示对象所存储的内存地址，使用内置函数<code>id(obj)</code>来获取</li><li>类型：表示的是对象的数据类型，使用内置函数<code>type(obj)</code>来获取</li><li>值：表示对象所存储的具体数据，使用<code>print(obj)</code>可以将值进行打印输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;张志鹏&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标识：&quot;</span>, <span class="hljs-built_in">id</span>(name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;类型：&quot;</span>, <span class="hljs-built_in">type</span>(name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;值&quot;</span>, name)<br><br><span class="hljs-comment">#标识： 2222422933936</span><br><span class="hljs-comment">#类型： &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment">#值 张志鹏</span><br></code></pre></td></tr></table></figure><blockquote><p>当多次赋值之后，变量名会指向新的空间</p></blockquote><h2 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6. 数据类型"></a>6. 数据类型</h2><blockquote><p>常用的数据类型</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">表示</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">int</td><td align="center">98</td></tr><tr><td align="center">浮点数类型</td><td align="center">float</td><td align="center">3.14159</td></tr><tr><td align="center">布尔类型</td><td align="center">bool</td><td align="center">TURE、FALSE</td></tr><tr><td align="center">字符串类型</td><td align="center">str</td><td align="center">人生苦短，我用python</td></tr></tbody></table><h3 id="6-1-整数类型"><a href="#6-1-整数类型" class="headerlink" title="6.1 整数类型"></a>6.1 整数类型</h3><ul><li>英文为<code>integer</code>，简写为<code>int</code>，可以表示为正数、负数和零</li><li>整数的不同进制表示方式<ul><li>十进制—&gt;默认的进制</li><li>二进制—&gt;以0b开头</li><li>八进制—&gt;以0o开头</li><li>十六进制—&gt;以0x开头</li></ul></li></ul><h3 id="6-2-浮点类型"><a href="#6-2-浮点类型" class="headerlink" title="6.2 浮点类型"></a>6.2 浮点类型</h3><ul><li><p>浮点数由整数部分和小数部分组成</p></li><li><p>浮点数存储不精确性</p><ul><li><p>使用浮点数进行计算时，可能会出现小数位数不确定的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1.1</span>+<span class="hljs-number">2.2</span>) <span class="hljs-comment">#3.3000000000000003</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1.1</span>+<span class="hljs-number">2.1</span>) <span class="hljs-comment">#3.2</span><br></code></pre></td></tr></table></figure></li><li><p>解决方案</p><ul><li><p>导入模块<code>decimal</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><span class="hljs-built_in">print</span>(Decimal(<span class="hljs-string">&#x27;1.1&#x27;</span>)+Decimal(<span class="hljs-string">&#x27;2.2&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="6-3-布尔类型"><a href="#6-3-布尔类型" class="headerlink" title="6.3 布尔类型"></a>6.3 布尔类型</h3><ul><li><p>用来表示真或假的值</p></li><li><p><code>True</code>表示真，<code>False</code>表示假</p></li><li><p>布尔值可以转化为整数</p><ul><li>True—&gt;1</li><li>False—&gt;0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">#2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-4-字符串类型"><a href="#6-4-字符串类型" class="headerlink" title="6.4 字符串类型"></a>6.4 字符串类型</h3><ul><li>字符串又被称为不可变的字符序列</li><li>可以使用单引号、双引号、三引号来定义</li><li>单引号和双引号定义的字符串必须在一行</li><li>三引号定义的字符串可以分布在连续的多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;人生苦短，我用python&#x27;</span><br>str2 = <span class="hljs-string">&quot;人生苦短，我用python&quot;</span><br>str3 = <span class="hljs-string">&#x27;&#x27;&#x27;人生苦短</span><br><span class="hljs-string">我用python&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(str1)<br><span class="hljs-built_in">print</span>(str2)<br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-comment">#人生苦短，我用python</span><br><br><span class="hljs-comment">#人生苦短，我用python</span><br><br><span class="hljs-comment">#人生苦短</span><br><span class="hljs-comment">#我用python</span><br></code></pre></td></tr></table></figure><h3 id="6-5-数据类型转换"><a href="#6-5-数据类型转换" class="headerlink" title="6.5 数据类型转换"></a>6.5 数据类型转换</h3><blockquote><p>将不同数据类型的数据拼接在一起</p></blockquote><table><thead><tr><th align="center">函数名</th><th align="center">作用</th><th align="center">注意事项</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">str()</td><td align="center">将其他数据类型转换成字符串</td><td align="center">也可用于引号转换</td><td align="center">str(123)—&gt;’123’</td></tr><tr><td align="center">int()</td><td align="center">将其他数据类型转换成整数</td><td align="center">1.文字类和小数类字符串，无法转换成整数<br/>2.浮点数转换成整数，抹零取整</td><td align="center">int(‘123’)<br/>int(9.8)</td></tr><tr><td align="center">float()</td><td align="center">将其他数据类型转换成浮点数</td><td align="center">1.文字类无法转成整数<br/>2.整数转成浮点数，末尾为.0</td><td align="center">float(‘9.9’)<br/>float(9)</td></tr></tbody></table><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7. 注释"></a>7. 注释</h2><ul><li>在代码中对代码的功能进行解释说明的标注性文字，可以提高代码的可读性</li><li>注释的内容会被Python解释器忽略</li><li>通常包括三种类型的注释<ul><li>单行注释——&gt;以<code>#</code>开头，直到换行结束</li><li>多行注释——&gt;将一对三括号（<code>‘’‘</code>或者<code>&quot;&quot;&quot;</code>）注释</li><li>中文编码声明注释——&gt;在文件开头加上中文声明注释，用以指明编码文件的编码格式</li></ul></li></ul><h2 id="8-input函数"><a href="#8-input函数" class="headerlink" title="8. input函数"></a>8. input函数</h2><blockquote><p>作用：接收来自用户的输入</p><p>返回值类型：输入值的类型为<code>str</code></p><p>值的存储：使用<code>=</code>对输入的值进行存储</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入函数input</span><br>present=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;大圣想要什么礼物呢？&#x27;</span>)<br><span class="hljs-built_in">print</span>(present,<span class="hljs-built_in">type</span>(present))<br><br><span class="hljs-comment">#大圣想要什么礼物呢？定海神针</span><br><span class="hljs-comment">#定海神针 &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从键盘录入两个整数，计算两个整数的和</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个加数&#x27;</span>)<br>a = <span class="hljs-built_in">int</span>(a)      <span class="hljs-comment"># 将转换之后的结果存储到a中</span><br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个加数&#x27;</span>)<br>b = <span class="hljs-built_in">int</span>(b)<br><span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-comment"># 也可以直接a = int(input(&#x27;请输入一个加数&#x27;))</span><br></code></pre></td></tr></table></figure><h2 id="9-常用运算符"><a href="#9-常用运算符" class="headerlink" title="9. 常用运算符"></a>9. 常用运算符</h2><h3 id="9-1-算术运算符"><a href="#9-1-算术运算符" class="headerlink" title="9.1 算术运算符"></a>9.1 算术运算符</h3><ol><li><p>标准算术运算符        加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、整除（<code>//</code>）</p><p><code>取整（一正一负向下取整） 9//-4或者-9//4的答案都是-3，由-2向下取整为-3</code></p></li><li><p>取余运算符        <code>%</code></p><p><code>取余（一正一负要公式）  余数=被除数-除数*商</code></p><p><code>9%-4结果为-3    9-(-4)*(-3)=9-12=-3</code></p><p><code>-9%4结果为3    -9-(4)*(-3)=-9+12=3</code></p></li><li><p>幂运算符          <code> **</code></p></li></ol><h3 id="9-2-赋值运算符"><a href="#9-2-赋值运算符" class="headerlink" title="9.2 赋值运算符"></a>9.2 赋值运算符</h3><blockquote><p>执行顺序：从右到左</p><p>支持链式赋值    <code>a=b=c=20</code></p><p>支持参数赋值    <code>+=、-=、*=、/=、//=、%=</code></p><p>支持系列解包赋值    <code>a,b,c=20,30,40</code></p></blockquote><h3 id="9-3-比较运算符"><a href="#9-3-比较运算符" class="headerlink" title="9.3 比较运算符"></a>9.3 比较运算符</h3><blockquote><p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>       返回值为True、False</p><p><code>==</code>            对象value的比较</p><p><code>is</code>、<code>is not</code>         对象的id的比较</p></blockquote><p>其中，一个 <code>=</code> 称为赋值运算符，<code>==</code> 称为比较运算符</p><p>一个变量由三部分组成，标识，类型，值</p><p><code>==</code> 比较的是值还是标识呢？      比较的是值</p><p>比较对象的标识使用  <code>is</code> 和 <code>is not</code></p><p>下面由两个例子供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a == b)<span class="hljs-comment"># True说明，a与b的value    相等</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<span class="hljs-comment"># True说明，a与b的id标识  相等</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>lst2 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(lst1 == lst2)     <span class="hljs-comment"># value  --&gt;True</span><br><span class="hljs-built_in">print</span>(lst1 <span class="hljs-keyword">is</span> lst2)     <span class="hljs-comment"># id --&gt;False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(lst1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(lst2))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">True</span><br><span class="hljs-string">False</span><br><span class="hljs-string">1351505079360</span><br><span class="hljs-string">1351504973504</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="9-4-布尔运算符"><a href="#9-4-布尔运算符" class="headerlink" title="9.4 布尔运算符"></a>9.4 布尔运算符</h3><p>布尔运算符主要是对于布尔值之间的运算</p><p>包括<code> and</code> 、<code>or</code> 、<code>not</code> 、<code>in</code> 、<code>not in</code> </p><ul><li>运算符<code>and</code>        当两个运算数都为<code>True</code>时，运算结果才为<code>True</code></li><li>运算符<code>or</code>        只要有一个运算数为<code>True</code>，运算结果就为<code>True</code></li><li>运算符<code>not</code>       如果运算数为<code>True</code>，运算结果为<code>False</code>，反之</li><li>运算符<code>in</code>         表示在不在里面，下面用例子演示一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;helloworld&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w&#x27;</span> <span class="hljs-keyword">in</span> s)<span class="hljs-comment"># True，表示字符w在变量s里面出现</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k&#x27;</span> <span class="hljs-keyword">in</span> s)<span class="hljs-comment"># Flase，表示字符k不在变量s里面出现</span><br></code></pre></td></tr></table></figure><h3 id="9-5-位运算符"><a href="#9-5-位运算符" class="headerlink" title="9.5 位运算符"></a>9.5 位运算符</h3><p><strong>在做位运算的操作时候一定要先把数据转换成二进制再进行计算</strong></p><table><thead><tr><th align="center">位运算符</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">位与 <code>&amp;</code></td><td align="center">对应数位都是1，结果数位才是1，否则是0</td></tr><tr><td align="center">位或 `</td><td align="center">`</td></tr><tr><td align="center">左移运算符<code>&lt;&lt;</code></td><td align="center">高位溢出舍弃，低位补0</td></tr><tr><td align="center">右移运算符<code>&gt;&gt;</code></td><td align="center">低位溢出舍弃，高位补0</td></tr></tbody></table><h3 id="9-6-运算符的优先级"><a href="#9-6-运算符的优先级" class="headerlink" title="9.6 运算符的优先级"></a>9.6 运算符的优先级</h3><p>优先级依次为：</p><blockquote><p><code>**</code>                    幂运算符号</p><p><code>*</code>,<code>/</code>,<code>//</code>,<code>%</code>        乘除、取余</p><p><code>+</code>,<code>-</code>                加减</p><p><strong>算术运算：先算乘除，后算加减，有幂运算，先算幂运算</strong></p><p><code>&lt;&lt;</code>,<code>&gt;&gt;</code>            左移位、右移位运算符</p><p><code>&amp;</code>            位与</p><p><code>|</code>            位或</p><p><strong>位运算：先算移位，再算位与和位或</strong></p><p><code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code>        大于小于、比较</p><p><strong>比较运算：结果集为True、False</strong></p><p><code>and</code>            布尔运算符</p><p><code>or</code>                布尔运算符</p><p><strong>布尔运算：对上一步结果集进行布尔运算</strong></p><p><code>=</code>                    最后再是赋值运算符</p></blockquote><h2 id="10-程序的组织结构"><a href="#10-程序的组织结构" class="headerlink" title="10 程序的组织结构"></a>10 程序的组织结构</h2><p><strong>程序的结构一般都分为顺序结构、选择结构和循环结构，此处和本人学过的C语言、C++语言以及Java语言相识，都是同为三种基本结构</strong></p><hr><h3 id="10-1-顺序结构"><a href="#10-1-顺序结构" class="headerlink" title="10.1 顺序结构"></a>10.1 顺序结构</h3><p><strong>顺序结构</strong>，顾名思义，就是按照一定的顺序来执行语言程序，在python中，就是按照自上到下的顺序来执行程序，又比如在赋值运算中就是从右到左，按着一定的优先级的顺序来执行赋值运算。</p><h3 id="10-2-对象的布尔值"><a href="#10-2-对象的布尔值" class="headerlink" title="10.2 对象的布尔值"></a>10.2 对象的布尔值</h3><p>在进行下面两种结构总结之前，应该先介绍一下对象的布尔值</p><ul><li>Python一切皆对象，所有对象都有一个布尔值<ul><li>获取对象的布尔值，就要使用到内置函数bool()</li></ul></li><li>以下对象的布尔值为False<ul><li>False</li><li>数值0</li><li>None</li><li>空字符串</li><li>空列表        <code>[]</code>、<code>list()</code></li><li>空元组        <code>()</code>、<code>tuple()</code></li><li>空字典        <code>&#123;&#125;</code>、<code>dict()</code></li><li>空集合        <code>set()</code></li></ul></li></ul><h3 id="10-3-选择结构"><a href="#10-3-选择结构" class="headerlink" title="10.3 选择结构"></a>10.3 选择结构</h3><p><strong>选择结构，就是程序根据判断条件的布尔值选择性地执行部分代码，明确的让计算机在什么条件下，该去做什么</strong></p><p>语法结构通常有单分支结构、双分支结构、多分支结构、嵌套if结构</p><p><strong>语法结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#单分支结构</span><br><span class="hljs-keyword">if</span> 条件表达式:<br>    条件执行体<span class="hljs-number">1</span><br>    条件执行体<span class="hljs-number">2</span><br><br><span class="hljs-comment">#双分支结构</span><br><span class="hljs-keyword">if</span> 条件表达式:<br>    条件执行体<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    条件执行体<span class="hljs-number">2</span><br>    <br><span class="hljs-comment">#多分支结构</span><br><span class="hljs-keyword">if</span> 条件表达式<span class="hljs-number">1</span>:<br>    条件执行体<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 条件表达式<span class="hljs-number">2</span>:<br>    条件执行体<span class="hljs-number">3</span><br><span class="hljs-keyword">elif</span> 条件表达式N:<br>    条件执行体N<br><span class="hljs-keyword">else</span>:<br>    条件执行体N+<span class="hljs-number">1</span><br>    <br><span class="hljs-comment">#嵌套if结构</span><br><span class="hljs-keyword">if</span> 条件表达式<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> 内层条件表达式:<br>        内层条件执行体<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        内层条件执行体<span class="hljs-number">2</span><br><span class="hljs-keyword">else</span>:<br>    条件执行体<br></code></pre></td></tr></table></figure><p>选择结构中可以简写成条件表达式<code>if....else</code>，：<code>【条件为真的结果】if 条件 else 【条件为假的结果】</code></p><p>下面以一个例子来参考一下用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#比较大小</span><br><span class="hljs-keyword">if</span> num_a&gt;=num_b:<br>    <span class="hljs-built_in">print</span>(num_a,<span class="hljs-string">&#x27;大于等于&#x27;</span>,num_b)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(num_a,<span class="hljs-string">&#x27;小于&#x27;</span>,num_b)<br><br><span class="hljs-comment">#使用条件表达式进行比较</span><br><span class="hljs-built_in">print</span>( (num_a,<span class="hljs-string">&#x27;大于等于&#x27;</span>,num_b)<span class="hljs-keyword">if</span> num_a&gt;=num_b <span class="hljs-keyword">else</span>  (num_a,<span class="hljs-string">&#x27;小于&#x27;</span>,num_b))<br><span class="hljs-comment">#或者将打印出来的东西化简</span><br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">str</span>(num_a)+<span class="hljs-string">&#x27;大于等于&#x27;</span>+<span class="hljs-built_in">str</span>(num_b) <span class="hljs-keyword">if</span> num_a&gt;=num_b <span class="hljs-keyword">else</span>  <span class="hljs-built_in">str</span>(num_a)+<span class="hljs-string">&#x27;小于&#x27;</span>+<span class="hljs-built_in">str</span>(num_b)  )<br></code></pre></td></tr></table></figure><p><strong>此外，在Python中还有一点与其他语言不相同之处</strong></p><p>在C与Java中，表示两个数之间的范围通常只能用<code>score &gt; 80 &amp;&amp; score &lt; 90</code></p><p>但是在Python中，表示两个数之间的范围可以用两种表达方式<code>score &gt; 80 and score &lt; 90</code>或者直接<code>80 &lt; score &lt; 90</code>，此处的&amp;&amp;也换成了Python中布尔运算符的and，并且可以直接用数学中连等的方式来表示</p><h3 id="10-4-pass语句"><a href="#10-4-pass语句" class="headerlink" title="10.4 pass语句"></a>10.4 pass语句</h3><blockquote><p>pass语句：语句什么都不做，只是一个占位符，用在语法上需要语句的地方</p></blockquote><p>pass语句可以用在：<strong>先搭建语法结构，还没想好代码怎么写的时候</strong></p><p>关于什么语法可以一起使用：</p><ul><li>if语句的条件执行体</li><li>for-in语句的循环体</li><li>定义函数时的函数体</li></ul><p>下面是使用方式，以<code>if</code>语句作为例子参考学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> a&gt;b:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#此时的代码是没有报错的，但是也不会执行出结果，有种类似于只为了不报错也不想看到出格的结果的感觉</span><br></code></pre></td></tr></table></figure><h3 id="10-5-range-函数"><a href="#10-5-range-函数" class="headerlink" title="10.5 range()函数"></a>10.5 range()函数</h3><p>在总结循环结构之前还是需要先写一下<code>range()</code>函数的用法，因为可能后面的<code>for</code>循环会经常用到这个函数</p><blockquote><p><code>range()</code>函数：就是用来生成一个整数序列</p></blockquote><ul><li><p>创建<code>range</code>对象有三种方式，后面会有相关代码例子介绍</p><ul><li><code>range(stop)</code></li><li><code>range(start,stop)</code></li><li><code>range(start,stop,step)</code></li></ul></li><li><p><code>range()</code>函数的返回值是一个迭代器对象</p></li><li><p>range类型的优点</p></li><li><blockquote><p>不管<code>range</code>对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要存储start,stop和step，只有当用到range对象时，才会去计算序列中的相关元素</p></blockquote></li><li><p><code>in</code> 与 <code>not in</code> 可以判断整数序列中是否存在（不存在）指定的整数</p></li></ul><p>下面就一个例子，简单描述一下<code>range()</code>函数的一些创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># rang()的三种创建方式</span><br><span class="hljs-string">&quot;&quot;&quot;第一种创建方式：只有一个参数（小括号里面只给了一个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)       <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，默认从0开始，默认相差1称为步长</span><br><span class="hljs-built_in">print</span>(r)            <span class="hljs-comment"># range(0, 10)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># 用于查看range对象种的整数序列  ——&gt;list是列表的意思</span><br><br><span class="hljs-string">&quot;&quot;&quot;第二种创建方式：给了两个参数（小括号里面给了两个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)    <span class="hljs-comment"># 指定了起始值，从1开始，到10结束（不包括10），默认步长为1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-string">&quot;&quot;&quot;第三种创建方式：给了三个参数（小括号里面给了三个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># 指定了起始值，从1开始，到10结束（不包括10），指定了步长为2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># [1, 3, 5, 7, 9]</span><br><br><span class="hljs-string">&quot;&quot;&quot;判断指出的整数 再序列中是否存在 用in， not in&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> r)      <span class="hljs-comment"># False， 10不在当前的r这个整数序列 中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span> <span class="hljs-keyword">in</span> r)       <span class="hljs-comment"># True， 9在当前的r这个序列中</span><br></code></pre></td></tr></table></figure><h3 id="10-6-循环结构"><a href="#10-6-循环结构" class="headerlink" title="10.6 循环结构"></a>10.6 循环结构</h3><blockquote><p> 循环结构就是指反复做一件事情</p></blockquote><p>循环结构一般有<code>while</code>、<code>for -in</code></p><p><strong>选择结构的if与循环结构<code>while</code>的区别</strong></p><ul><li><code>if</code>是判断一次，条件为<code>True</code>执行一次</li><li><code>while</code>是判断N+1次，条件为<code>True</code>执行N次</li></ul><hr><p><code>while</code>的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件表达式:<br>    条件执行体(循环体)<br></code></pre></td></tr></table></figure><p><code>while</code>的一个万金油例子，计算1-100之间的偶数和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span> += a<br>    a += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-100之间的偶数和为&#x27;</span>, <span class="hljs-built_in">sum</span>)<br><span class="hljs-comment">#输出结果：1-100之间的偶数和为 2550</span><br></code></pre></td></tr></table></figure><hr><p><code>for-in</code>循环</p><blockquote><ul><li><code>in</code>表达从（字符串、序列等）中依次取值，又称为遍历</li><li><code>for-in</code>遍历的对象必须是可迭代对象</li></ul></blockquote><p><code>for-in</code>的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 自定义的变量 <span class="hljs-keyword">in</span> 可迭代对象:<br>    循环体<br></code></pre></td></tr></table></figure><p><strong>另外，循环体内不需要访问自定义变量，可以将自定义变量替代为下划线</strong></p><p>下面以几个代码例子演示一下<code>for-in</code>的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Python&#x27;</span>:    <span class="hljs-comment"># 第一次取出来的是P，将P赋值给item，将item的值输出</span><br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># 输出结果依次为 P  y  t  h  o  n</span><br><br><span class="hljs-comment"># range()产生一个整数序列 --&gt;也是一个可迭代对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 输出结果依次为 0  1  2  3  4  5  6  7  8  9</span><br><br><span class="hljs-comment"># 如果在循环体中不需要使用到自定义变量，可将自定义变量写成”_“</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;人生苦短，我用Python&#x27;</span>)<br><span class="hljs-comment"># 输出结果为循环五次 人生苦短，我用Python</span><br></code></pre></td></tr></table></figure><h3 id="10-7-流程控制语句"><a href="#10-7-流程控制语句" class="headerlink" title="10.7 流程控制语句"></a>10.7 流程控制语句</h3><blockquote><p><code>break</code>语句：用于结束循环结构，通常与分支结构<code>if</code>一起使用</p></blockquote><blockquote><p><code>continue</code>语句：用于结束当前循环，进入下一次循环，通常与分支结构中的<code>if</code>一起使用</p></blockquote><blockquote><p>通常在多重循环中的<code>break</code>和<code>continue</code>只用于控制本层的循环</p></blockquote><p>此处提到的控制语句<code>break</code>和<code>continue</code>其实与C语言中的作业一样，都是结束循环和结束本次循环的意思</p><h3 id="10-8-else语句"><a href="#10-8-else语句" class="headerlink" title="10.8 else语句"></a>10.8 else语句</h3><p><code>else</code>语句在前面的<code>if...else</code>中有讲到，但是它其实有这三种搭配方式，所以单独提出来再总结一些东西</p><hr><p><code>else</code>可以与<code>if</code>配合使用，但是<code>if</code>条件表达式不成立的时候才能执行<code>else</code></p><p><code>else</code>也可以和<code>while</code>、<code>for</code>配合使用，但是只有当没有碰到<code>break</code>的时候才执行<code>else</code></p><p>下面列举几个例子方便理解使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 此处的else是与上面的if搭配使用的，如果if执行成功，就不会再执行else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br><span class="hljs-keyword">else</span>:           <span class="hljs-comment"># 此处的else是与最上面的for搭配使用的，如果没有遇到break，那么else就一定会被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次密码均输入错误&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">3</span>:<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 此处的else是与上面的if搭配使用的，如果if执行成功，就不会再执行else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br>    a+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:           <span class="hljs-comment"># 此处的else是与最上面的while搭配使用的，如果没有遇到break，那么else就一定会被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次密码均输入错误&#x27;</span>)<br><br></code></pre></td></tr></table></figure><blockquote><p>由此可见，其实<code>else</code>的用法和C语言的其实也不太一样，但是代码其实从上到下按照本身的逻辑走一遍，这里面的<code>else</code>是与谁搭配使用的就很好被理解了</p></blockquote><h3 id="10-9-嵌套循环"><a href="#10-9-嵌套循环" class="headerlink" title="10.9 嵌套循环"></a>10.9 嵌套循环</h3><p>嵌套循环在前面几个知识点的例子中都有涉及到，只是没有指出来细细讲解</p><p><strong>其意义就是：</strong>循环结构中<strong>又嵌套</strong>了另外的完整的循环结构，其中内层循环作为外层循环的循环体执行</p><p>下面就直接举一个打印九九乘法表的代码例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, item+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(it, <span class="hljs-string">&#x27;*&#x27;</span>, item, <span class="hljs-string">&#x27;=&#x27;</span>, item*it, end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1 * 1 = 1</span><br><span class="hljs-string">1 * 2 = 22 * 2 = 4</span><br><span class="hljs-string">1 * 3 = 32 * 3 = 63 * 3 = 9</span><br><span class="hljs-string">1 * 4 = 42 * 4 = 83 * 4 = 124 * 4 = 16</span><br><span class="hljs-string">1 * 5 = 52 * 5 = 103 * 5 = 154 * 5 = 205 * 5 = 25</span><br><span class="hljs-string">1 * 6 = 62 * 6 = 123 * 6 = 184 * 6 = 245 * 6 = 306 * 6 = 36</span><br><span class="hljs-string">1 * 7 = 72 * 7 = 143 * 7 = 214 * 7 = 285 * 7 = 356 * 7 = 427 * 7 = 49</span><br><span class="hljs-string">1 * 8 = 82 * 8 = 163 * 8 = 244 * 8 = 325 * 8 = 406 * 8 = 487 * 8 = 568 * 8 = 64</span><br><span class="hljs-string">1 * 9 = 92 * 9 = 183 * 9 = 274 * 9 = 365 * 9 = 456 * 9 = 547 * 9 = 638 * 9 = 729 * 9 = 81</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>果然啊，用Python写九九乘法表就是很容易，比起C语言和Java的双层for循环，这个似乎简单了不少</p></blockquote><p>由于时间的原因，也没有整理出来特别多的知识点，所以只整理到了这里，有些知识点的细节部分可能没有讲清楚，后续有时间还会接着整理出中、下部分。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>日常学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bug改错之hexo部署问题</title>
    <link href="/2022/01/12/bug-gai-cuo-zhi-hexo-bu-shu-wen-ti/"/>
    <url>/2022/01/12/bug-gai-cuo-zhi-hexo-bu-shu-wen-ti/</url>
    
    <content type="html"><![CDATA[<p><img src="%E9%97%AE%E9%A2%98%E7%85%A7%E7%89%87.jpg" alt="问题描述"></p><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><blockquote><p>在利用<code>hexo</code>部署个人博客网站的过程中遇到了一些问题，下面是报错代码，作者也总结了几种方法，供参考。</p><p><code>FATAL &#123;   err: Error: Spawn failed       at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:51:21)       at ChildProcess.emit (node:events:390:28)       at ChildProcess.cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)       at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;     code: 128   &#125; &#125; Something&#39;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</code></p></blockquote><h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h1><h2 id="2-1-解决方式一："><a href="#2-1-解决方式一：" class="headerlink" title="2.1 解决方式一："></a>2.1 解决方式一：</h2><p>1、进入到博客根目录，先把<code>git</code>提交的内容文件夹<code>.deploy_git</code>手动删除，也可利用指令<code>rm -rf .deploy_git</code>对文件夹进行删除</p><p>2、重新执行<code>git config --global core.autocrlf false</code></p><p>3、最后再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="2-2-解决方式二："><a href="#2-2-解决方式二：" class="headerlink" title="2.2 解决方式二："></a>2.2 解决方式二：</h2><blockquote><p>有可能是因为<code>git</code>的<code>repo</code>配置的地址不正确，可以将<code>http</code>方式变更为<code>ssh</code>方式</p></blockquote><p>1、进入到博客根目录，先把<code>git</code>提交的内容文件夹<code>.deploy_git</code>手动删除，也可利用指令<code>rm -rf .deploy_git</code>对文件夹进行删除</p><p>2、找到博客根目录的<code>_config.yml</code>文件，打开后，对下列的<code>repo</code>进行修改</p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/yourname/yourname.github.io.git -&gt; git@github.com:XXXXXXX/XXXXXX.github.io.git</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>3、 最后再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="2-3-解决方式三：（不太建议）"><a href="#2-3-解决方式三：（不太建议）" class="headerlink" title="2.3 解决方式三：（不太建议）"></a>2.3 解决方式三：（不太建议）</h2><p>1、进入博客根目录 <code>cd D:/MyBlog</code></p><p>2、进入deploy文件夹 <code>cd .deploy_git/</code></p><p>3、强制推送 <code>git push -f</code></p>]]></content>
    
    
    <categories>
      
      <category>Bug改错</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bug</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>勉励文章</title>
    <link href="/2022/01/12/mian-li-wen-zhang/"/>
    <url>/2022/01/12/mian-li-wen-zhang/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是之前比较火的一篇论文致谢，有人说看完热泪盈眶，有人看完陷入沉思，更多的，是对一个穿过黑暗的勇者的敬佩。自己也突然想到了“内卷”两个字眼，下面的是朋友圈的一位朋友发的，感觉说的似乎有那么点道理，便想着发出来记录一下。</p></blockquote><p>越多的人这样做，大家耗费了更多时间和精力却得到了一样的结果。</p><p>内卷指的是，每个人都愿意为五斗米折腰 ，<br>但永远有人折的更低 ，却只是那五斗米。</p><p>内卷并不是说的努力，而是无效内耗。<br>就比如我们这一届老师布置的作业，本身是个实务分析题，写过程就行，有的人加上各种其他的字数，写成了一篇论文的长度，而有的老师鼓励这种，就使得大家都这样做，最后本身课业压力都大，还需要为了某个作业去花费更多的精力才能拿到大家都正常不卷时候的分数，但是本身可以拿这些时间干更多有意义的事情。</p><p>又比如大学的时候，明明要求论文写5000字，有一个同学硬生生写了8000，结果被另一个人知道了，熬夜写了10000，我觉得这才是卷，在负担自己的情况下，卷别人，根本没有正常的努力了，真正的只是正常的努力不是内卷。</p><p>我们不是那些反方向坐地铁却徒劳无功的人我们是渴望步入理想大学的高中生是不甘平庸的大学生。</p><p>我从不认为谁的努力如“内卷”的释义<br>“付出了时间和精力，却得到了和原来一样的结果”。</p><p>这个世界上有人正过着你想要的生活所以我们从不认输。<br>我们总要忍受一段日子才能真正成为自己的光比起那些不努力就能获取的成功我更喜欢<br>先努力优秀，再大方拥有。</p><p>希望少一些无效内耗，也希望不要再滥用“内卷”。</p><p><img src="%E8%87%B4%E8%B0%A2.png" alt="研究生论文致谢"></p>]]></content>
    
    
    <categories>
      
      <category>记录生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
