<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python基础（上）</title>
    <link href="/2022/01/14/python-ji-chu-shang/"/>
    <url>/2022/01/14/python-ji-chu-shang/</url>
    
    <content type="html"><![CDATA[<p>前一段时间一直在学习Python基础，但是学的也是杂乱无章，忘的也不叫快，今天特别抽时间把学习的笔记整理出来一部分，基本上都是参考马士兵Python的b站课程顺序整理出来的</p><h2 id="1-print打印"><a href="#1-print打印" class="headerlink" title="1. print打印"></a>1. print打印</h2><ul><li>功能：向目的地输出内容</li><li>输出的内容：数字、字符串、表达式</li><li>目的地：LDLE（集成开发环境）、控制台、文件</li></ul><h2 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2. 转义字符"></a>2. 转义字符</h2><h3 id="2-1-什么是转义字符"><a href="#2-1-什么是转义字符" class="headerlink" title="2.1 什么是转义字符"></a>2.1 什么是转义字符</h3><blockquote><p>就是反斜杠+想要实现的转义功能首字母</p></blockquote><h3 id="2-2-为什么需要转义字符"><a href="#2-2-为什么需要转义字符" class="headerlink" title="2.2 为什么需要转义字符"></a>2.2 为什么需要转义字符</h3><blockquote><p>当字符串中包含反斜杠、单引号和双引号等有特殊用途的字符时，必须使用反斜杠对这些字符进行转义（转换一个含义）</p><ul><li>反斜杠 <code>\\</code></li><li>单引号 <code>\‘</code></li><li>双引号 <code>\“</code></li></ul></blockquote><blockquote><p>当字符串中包含换行、回车、水平制表符或者退格等无法直接表示的特殊字符时，也可以使用转义字符</p><ul><li>换行 \n     newline换行首字母</li><li>回车 \r     回车会把前面的覆盖掉<code>print(&#39;hello \r world&#39;)</code>，这里的打印出world，回车会把hello覆盖</li><li>水平制表符 \t      制表符从前到后开始数，四个为一个制表位</li><li>退格 \b      退一格，会把上一个字符退格删了</li></ul></blockquote><h3 id="2-3-原字符"><a href="#2-3-原字符" class="headerlink" title="2.3 原字符"></a>2.3 原字符</h3><blockquote><p>原字符：不希望字符串中的转义字符起作用，就使用原字符， 就是在字符串之前加上<code>R</code>或者<code>r</code></p><p>注意事项：最后一个字符不能是反斜杠</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nworld\&#x27;)</span><br></code></pre></td></tr></table></figure><p>最后只有一个字符是反斜杠就会报错，如果是两个反斜杠就没有问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nworld&#x27;</span>)<span class="hljs-comment">#则打印出来显示的为”hello\nworld“</span><br></code></pre></td></tr></table></figure><h2 id="3-二进制和字符编码"><a href="#3-二进制和字符编码" class="headerlink" title="3. 二进制和字符编码"></a>3. 二进制和字符编码</h2><p><strong>8bit(位)=1byte(字节)        1024byte=1kb        1024kb=1mb        1024mb=1gb        1024gb=1t</strong></p><blockquote><p>机器语言只能识别0和1</p></blockquote><blockquote><p>基本的汉字和一些符号有ASII表</p></blockquote><blockquote><p>在中国有GB2312、GBK、GB18030等一些编码，在国外有其他国家的字符编码</p></blockquote><blockquote><p>但是Unicode几乎包含了全世界的字符、他就是UTF-8编码</p></blockquote><h2 id="4-标识符和保留字"><a href="#4-标识符和保留字" class="headerlink" title="4. 标识符和保留字"></a>4. 标识符和保留字</h2><h3 id="4-1-保留字"><a href="#4-1-保留字" class="headerlink" title="4.1 保留字"></a>4.1 保留字</h3><blockquote><p>有一些单词被赋予了特定的意义，这些单词在给任何对象起名字的时候都不能用到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">None</span>       <span class="hljs-keyword">break</span>      <span class="hljs-keyword">except</span>     <span class="hljs-keyword">in</span>         <span class="hljs-keyword">raise</span><br><span class="hljs-literal">True</span>       <span class="hljs-class"><span class="hljs-keyword">class</span>      <span class="hljs-title">finally</span>    <span class="hljs-title">is</span>         <span class="hljs-title">return</span></span><br><span class="hljs-class"><span class="hljs-title">and</span>        <span class="hljs-title">continue</span>   <span class="hljs-title">for</span>        <span class="hljs-title">lambda</span>     <span class="hljs-title">try</span></span><br><span class="hljs-class"><span class="hljs-title">as</span>         <span class="hljs-title">def</span>        <span class="hljs-title">from</span>       <span class="hljs-title">nonlocal</span>   <span class="hljs-title">while</span></span><br><span class="hljs-class"><span class="hljs-title">assert</span>     <span class="hljs-title">del</span>        <span class="hljs-title">global</span>     <span class="hljs-title">not</span>        <span class="hljs-title">with</span></span><br><span class="hljs-class"><span class="hljs-title">async</span>      <span class="hljs-title">elif</span>       <span class="hljs-title">if</span>         <span class="hljs-title">or</span>         <span class="hljs-title">yield</span></span><br></code></pre></td></tr></table></figure></blockquote><ol><li><p>True、False</p></li><li><p>and、or、not</p></li><li><p>class</p></li><li><p>is、in</p></li><li><p>try、except、finally、raise</p></li><li><p>if、elif、else</p></li><li><p>def、global、nonlocal、return、yield</p></li><li><p>for、while</p></li><li><p>break、continue</p></li><li><p>assert</p></li><li><p>del</p></li><li><p>import、from、 as</p></li><li><p>with</p></li><li><p>pass</p></li><li><p>await、async</p></li><li><p>lambda</p></li></ol><p><strong>1.  True、False</strong></p><p>False 布尔类型的值，表示假，与True相反 True 布尔类型的值，表示真，与False相反</p><p><strong>2. and、or、not</strong></p><p>逻辑运算符 与、或、非</p><p><strong>3.class</strong></p><p>定义类的关键字</p><p><strong>4.is、in</strong></p><p>Python中的对象包含三个要素：id,type,value 其中：</p><ul><li>id:用来唯一标识一个对象</li><li>type：标识对象的类型</li><li>value：是对象的值</li></ul><p>is：就是用来判断a对象是否就是b对象，是通过id来判断的</p><p>==：判断的是a对象的值是否和b对象的值相等，是通过value来判断的</p><p>in：判断变量是否存在序列中</p><p><strong>5.try、except、finally、raise</strong></p><p>使用try…except…finally语句来处理异常。</p><ul><li>通常的语句块放在try块中</li><li>错误处理的语句放在except块中</li><li>始终执行的语句放在finally块中</li><li>raise 语句抛出一个指定的异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:        <br>    <span class="hljs-comment">#some code here        </span><br>    <span class="hljs-keyword">raise</span> MyException      <br><span class="hljs-keyword">except</span> MyException:        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyException encoutered&quot;</span>) <br><span class="hljs-keyword">finally</span>:        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Arrive finally&quot;</span>)<br>    <br>x = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;x 不能大于 5。x 的值为: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x))<br></code></pre></td></tr></table></figure><p><strong>6.if、elif、else</strong></p><p>判断语句，if语句用来检验一个条件，如果条件为真，运行一块语句(称为if…块)，否则处理另外一块语句（称为else…块）。else从句是可选的</p><p><strong>7.def、global、nonlocal、return、yield</strong></p><ul><li>def 定义函数的关键字</li><li>global 定义全局变量</li><li>nonlocal 在局部寻找外层函数中离他最近的那个变量</li><li>return 函数中的返回值</li><li>yield的用法有点像return,除了它返回的是一个生成器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createGenerator</span>():</span><br>    mylist = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist:<br>        <span class="hljs-keyword">yield</span> i*i<br></code></pre></td></tr></table></figure><p><strong>8.for、while</strong></p><p>for循环可以遍历任何序列的项目，如一个列表或者一个字符串 while循环可以通关判断条件真假无限循环</p><p><strong>9.break、continue</strong></p><ul><li>break语句是用来终止循环语句，即使哪怕循环条件没有称为false或者序列还没有被完全递归，也会停止循环</li><li>continue语句被用来跳过当前循环块中的剩余语句，继续进行下一轮循环</li></ul><p><strong>10.assert</strong></p><p>assert 关键字用于在代码中设置检查点，用于当程序出现错误时中断程序执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt;<span class="hljs-number">10</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#3&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt;<span class="hljs-number">10</span><br>AssertionError<br> <br><span class="hljs-comment"># assert 条件后可以增加错误信息解释</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;超出范围！&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#5&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;超出范围！&#x27;</span><br>AssertionError: 超出范围！<br></code></pre></td></tr></table></figure><p><strong>11.del</strong></p><p>del删除变量或者序列的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-number">85</span>] <span class="hljs-comment"># 定义一个list      </span><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>] <span class="hljs-comment"># 删除第0个元素      </span><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] <span class="hljs-comment"># 删除从第2个到第3个元素。</span><br></code></pre></td></tr></table></figure><p><strong>12.import、from、 as</strong></p><p>用于导包，as为重命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> fd <span class="hljs-keyword">as</span> f<br></code></pre></td></tr></table></figure><p><strong>13.with</strong></p><p>用于文件的读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 写文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>) <span class="hljs-keyword">as</span> out_file:<br>    out_file.write(<span class="hljs-string">&quot;公众号：一行数据，没想到吧，这里有植入&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>14.pass</strong></p><p>pass空的类，函数，方法的占位符</p><p><strong>15.await、async</strong></p><p>async 用来声明一个函数为异步函数，异步函数的特点是能在函数执行过程中挂起，去执行其他异步函数，等到挂起条件（假设挂起条件是sleep(5)）消失后，也就是5秒到了再回来执行。</p><p>await 用来用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>(<span class="hljs-params">i</span>):</span><br>     r = <span class="hljs-keyword">await</span> other_test(i)<br>     <span class="hljs-built_in">print</span>(i,r)<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">other_test</span>(<span class="hljs-params">i</span>):</span><br>     r = requests.get(i)<br>     <span class="hljs-built_in">print</span>(i)<br>     <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">4</span>)<br>     <span class="hljs-built_in">print</span>(time.time()-start)<br>     <span class="hljs-keyword">return</span> r<br> <br>url = [<span class="hljs-string">&quot;https://segmentfault.com/p/1210000013564725&quot;</span>,<br>        <span class="hljs-string">&quot;https://www.jianshu.com/p/83badc8028bd&quot;</span>,<br>        <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>]<br> <br>loop = asyncio.get_event_loop()<br>task = [asyncio.ensure_future(test2(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url]<br>start = time.time()<br>loop.run_until_complete(asyncio.wait(task))<br>endtime = time.time()-start<br><span class="hljs-built_in">print</span>(endtime)<br>loop.close()<br></code></pre></td></tr></table></figure><p><strong>16.lambda</strong></p><p>通常是在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是<strong>匿名函数</strong></p><p>&lt;函数名&gt; = lambda &lt;参数&gt; : &lt;表达式&gt;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span> x, y, z: x+y+z  <span class="hljs-comment">#f是表达式的名字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">#像函数一样调用</span><br></code></pre></td></tr></table></figure><h3 id="4-2-标识符"><a href="#4-2-标识符" class="headerlink" title="4.2 标识符"></a>4.2 标识符</h3><ul><li>变量、函数、类、模块和其他对象的起的名字都叫标识符</li><li>规则<ul><li>字母、数字、下划线_</li><li>不能以数字开头</li><li>不能是python保留字</li><li>严格区分大小写</li></ul></li></ul><p><strong>通过程序可以将所有保留字打印出来</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<span class="hljs-number">23</span><br><br><span class="hljs-comment">#输出结果</span><br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;__peg_parser__&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;async&#x27;</span>, <span class="hljs-string">&#x27;await&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h2><blockquote><p>变量就是内存中一个带标签的盒子</p></blockquote><p><strong>变量由三部分组成</strong></p><ul><li>标识：表示对象所存储的内存地址，使用内置函数<code>id(obj)</code>来获取</li><li>类型：表示的是对象的数据类型，使用内置函数<code>type(obj)</code>来获取</li><li>值：表示对象所存储的具体数据，使用<code>print(obj)</code>可以将值进行打印输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;张志鹏&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标识：&quot;</span>, <span class="hljs-built_in">id</span>(name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;类型：&quot;</span>, <span class="hljs-built_in">type</span>(name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;值&quot;</span>, name)<br><br><span class="hljs-comment">#标识： 2222422933936</span><br><span class="hljs-comment">#类型： &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment">#值 张志鹏</span><br></code></pre></td></tr></table></figure><blockquote><p>当多次赋值之后，变量名会指向新的空间</p></blockquote><h2 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6. 数据类型"></a>6. 数据类型</h2><blockquote><p>常用的数据类型</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">表示</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">int</td><td align="center">98</td></tr><tr><td align="center">浮点数类型</td><td align="center">float</td><td align="center">3.14159</td></tr><tr><td align="center">布尔类型</td><td align="center">bool</td><td align="center">TURE、FALSE</td></tr><tr><td align="center">字符串类型</td><td align="center">str</td><td align="center">人生苦短，我用python</td></tr></tbody></table><h3 id="6-1-整数类型"><a href="#6-1-整数类型" class="headerlink" title="6.1 整数类型"></a>6.1 整数类型</h3><ul><li>英文为integer，简写为int，可以表示为正数、负数和零</li><li>整数的不同进制表示方式<ul><li>十进制—&gt;默认的进制</li><li>二进制—&gt;以0b开头</li><li>八进制—&gt;以0o开头</li><li>十六进制—&gt;以0x开头</li></ul></li></ul><h3 id="6-2-浮点类型"><a href="#6-2-浮点类型" class="headerlink" title="6.2 浮点类型"></a>6.2 浮点类型</h3><ul><li><p>浮点数由整数部分和小数部分组成</p></li><li><p>浮点数存储不精确性</p><ul><li><p>使用浮点数进行计算时，可能会出现小数位数不确定的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1.1</span>+<span class="hljs-number">2.2</span>) <span class="hljs-comment">#3.3000000000000003</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1.1</span>+<span class="hljs-number">2.1</span>) <span class="hljs-comment">#3.2</span><br></code></pre></td></tr></table></figure></li><li><p>解决方案</p><ul><li><p>导入模块decimal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><span class="hljs-built_in">print</span>(Decimal(<span class="hljs-string">&#x27;1.1&#x27;</span>)+Decimal(<span class="hljs-string">&#x27;2.2&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="6-3-布尔类型"><a href="#6-3-布尔类型" class="headerlink" title="6.3 布尔类型"></a>6.3 布尔类型</h3><ul><li><p>用来表示真或假的值</p></li><li><p>True表示真，False表示假</p></li><li><p>布尔值可以转化为整数</p><ul><li>True—&gt;1</li><li>False—&gt;0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">#2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-4-字符串类型"><a href="#6-4-字符串类型" class="headerlink" title="6.4 字符串类型"></a>6.4 字符串类型</h3><ul><li>字符串又被称为不可变的字符序列</li><li>可以使用单引号、双引号、三引号来定义</li><li>单引号和双引号定义的字符串必须在一行</li><li>三引号定义的字符串可以分布在连续的多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;人生苦短，我用python&#x27;</span><br>str2 = <span class="hljs-string">&quot;人生苦短，我用python&quot;</span><br>str3 = <span class="hljs-string">&#x27;&#x27;&#x27;人生苦短</span><br><span class="hljs-string">我用python&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(str1)<br><span class="hljs-built_in">print</span>(str2)<br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-comment">#人生苦短，我用python</span><br><br><span class="hljs-comment">#人生苦短，我用python</span><br><br><span class="hljs-comment">#人生苦短</span><br><span class="hljs-comment">#我用python</span><br></code></pre></td></tr></table></figure><h3 id="6-5-数据类型转换"><a href="#6-5-数据类型转换" class="headerlink" title="6.5 数据类型转换"></a>6.5 数据类型转换</h3><blockquote><p>将不同数据类型的数据拼接在一起</p></blockquote><table><thead><tr><th align="center">函数名</th><th align="center">作用</th><th align="center">注意事项</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">str()</td><td align="center">将其他数据类型转换成字符串</td><td align="center">也可用于引号转换</td><td align="center">str(123)—&gt;’123’</td></tr><tr><td align="center">int()</td><td align="center">将其他数据类型转换成整数</td><td align="center">1.文字类和小数类字符串，无法转换成整数<br/>2.浮点数转换成整数，抹零取整</td><td align="center">int(‘123’)<br/>int(9.8)</td></tr><tr><td align="center">float()</td><td align="center">将其他数据类型转换成浮点数</td><td align="center">1.文字类无法转成整数<br/>2.整数转成浮点数，末尾为.0</td><td align="center">float(‘9.9’)<br/>float(9)</td></tr></tbody></table><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7. 注释"></a>7. 注释</h2><ul><li>在代码中对代码的功能进行解释说明的标注性文字，可以提高代码的可读性</li><li>注释的内容会被Python解释器忽略</li><li>通常包括三种类型的注释<ul><li>单行注释——&gt;以<code>#</code>开头，直到换行结束</li><li>多行注释——&gt;将一对三括号（<code>‘’‘</code>或者<code>&quot;&quot;&quot;</code>）注释</li><li>中文编码声明注释——&gt;在文件开头加上中文声明注释，用以指明编码文件的编码格式</li></ul></li></ul><h2 id="8-input函数"><a href="#8-input函数" class="headerlink" title="8. input函数"></a>8. input函数</h2><blockquote><p>作用：接收来自用户的输入</p><p>返回值类型：输入值的类型为<code>str</code></p><p>值的存储：使用<code>=</code>对输入的值进行存储</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入函数input</span><br>present=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;大圣想要什么礼物呢？&#x27;</span>)<br><span class="hljs-built_in">print</span>(present,<span class="hljs-built_in">type</span>(present))<br><br><span class="hljs-comment">#大圣想要什么礼物呢？定海神针</span><br><span class="hljs-comment">#定海神针 &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从键盘录入两个整数，计算两个整数的和</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个加数&#x27;</span>)<br>a = <span class="hljs-built_in">int</span>(a)      <span class="hljs-comment"># 将转换之后的结果存储到a中</span><br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个加数&#x27;</span>)<br>b = <span class="hljs-built_in">int</span>(b)<br><span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-comment"># 也可以直接a = int(input(&#x27;请输入一个加数&#x27;))</span><br></code></pre></td></tr></table></figure><h2 id="9-常用运算符"><a href="#9-常用运算符" class="headerlink" title="9. 常用运算符"></a>9. 常用运算符</h2><h3 id="9-1-算术运算符"><a href="#9-1-算术运算符" class="headerlink" title="9.1 算术运算符"></a>9.1 算术运算符</h3><ol><li><p>标准算术运算符        加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、整除（<code>//</code>）</p><p><code>取整（一正一负向下取整） 9//-4或者-9//4的答案都是-3，由-2向下取整为-3</code></p></li><li><p>取余运算符        <code>%</code></p><p><code>取余（一正一负要公式）  余数=被除数-除数*商</code></p><p><code>9%-4结果为-3    9-(-4)*(-3)=9-12=-3</code></p><p><code>-9%4结果为3    -9-(4)*(-3)=-9+12=3</code></p></li><li><p>幂运算符          <code> **</code></p></li></ol><h3 id="9-2-赋值运算符"><a href="#9-2-赋值运算符" class="headerlink" title="9.2 赋值运算符"></a>9.2 赋值运算符</h3><blockquote><p>执行顺序：从右到左</p><p>支持链式赋值    <code>a=b=c=20</code></p><p>支持参数赋值    <code>+=、-=、*=、/=、//=、%=</code></p><p>支持系列解包赋值    <code>a,b,c=20,30,40</code></p></blockquote><h3 id="9-3-比较运算符"><a href="#9-3-比较运算符" class="headerlink" title="9.3 比较运算符"></a>9.3 比较运算符</h3><blockquote><p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>       返回值为True、False</p><p><code>==</code>            对象value的比较</p><p><code>is</code>、<code>is not</code>         对象的id的比较</p></blockquote><p>其中，一个 <code>=</code> 称为赋值运算符，<code>==</code> 称为比较运算符</p><p>一个变量由三部分组成，标识，类型，值</p><p><code>==</code> 比较的是值还是标识呢？      比较的是值</p><p>比较对象的标识使用  <code>is</code> 和 <code>is not</code></p><p>下面由两个例子供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a == b)<span class="hljs-comment"># True说明，a与b的value    相等</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<span class="hljs-comment"># True说明，a与b的id标识  相等</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>lst2 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(lst1 == lst2)     <span class="hljs-comment"># value  --&gt;True</span><br><span class="hljs-built_in">print</span>(lst1 <span class="hljs-keyword">is</span> lst2)     <span class="hljs-comment"># id --&gt;False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(lst1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(lst2))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">True</span><br><span class="hljs-string">False</span><br><span class="hljs-string">1351505079360</span><br><span class="hljs-string">1351504973504</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="9-4-布尔运算符"><a href="#9-4-布尔运算符" class="headerlink" title="9.4 布尔运算符"></a>9.4 布尔运算符</h3><p>布尔运算符主要是对于布尔值之间的运算</p><p>包括<code> and</code> 、<code>or</code> 、<code>not</code> 、<code>in</code> 、<code>not in</code> </p><ul><li><p>运算符<code>and</code>        当两个运算数都为<code>True</code>时，运算结果才为<code>True</code></p></li><li><p>运算符<code>or</code>        只要有一个运算数为<code>True</code>，运算结果就为<code>True</code></p></li><li><p>运算符<code>not</code>       如果运算数为<code>True</code>，运算结果为<code>False</code>，反之</p></li><li><p>运算符<code>in</code>         表示在不在里面，下面用例子演示一下</p><ul><li>```python<br>s = ‘helloworld’<br>print(‘w’ in s)        # True，表示字符w在变量s里面出现<br>print(‘k’ in s)        # Flase，表示字符k不在变量s里面出现<figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><br>### 9.5 位运算符<br><br>**在做位运算的操作时候一定要先把数据转换成二进制再进行计算**<br><br>|    位运算符    |                 操作                  |<br>| :------------: | :-----------------------------------: |<br>|    位与 `&amp;`    | 对应数位都是1，结果数位才是1，否则是0 |<br>|    位或 `|`    | 对应数位都是0，结果数位才是0，否则为1 |<br>| 左移运算符`&lt;&lt;` |         高位溢出舍弃，低位补0         |<br>| 右移运算符`&gt;&gt;` |         低位溢出舍弃，高位补0         |<br><br>### 9.6 运算符的优先级<br><br>优先级依次为：<br><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`**`</span>幂运算符号</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`*`</span>,<span class="hljs-string">`/`</span>,<span class="hljs-string">`//`</span>,<span class="hljs-string">`%`</span>乘除、取余</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`+`</span>,<span class="hljs-string">`-`</span>加减</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">**算术运算：先算乘除，后算加减，有幂运算，先算幂运算**</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`&lt;&lt;`</span>,<span class="hljs-string">`&gt;&gt;`</span>左移位、右移位运算符</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`&amp;`</span>位与</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`|`</span>位或</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">**位运算：先算移位，再算位与和位或**</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`&gt;`</span>,<span class="hljs-string">`&lt;`</span>,<span class="hljs-string">`&gt;=`</span>,<span class="hljs-string">`&lt;=`</span>,<span class="hljs-string">`==`</span>,<span class="hljs-string">`!=`</span>大于小于、比较</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">**比较运算：结果集为True、False**</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`and`</span>布尔运算符</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`or`</span>布尔运算符</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">**布尔运算：对上一步结果集进行布尔运算**</span><br><span class="hljs-meta">&gt;</span><br><span class="hljs-meta">&gt;</span> <span class="javascript"><span class="hljs-string">`=`</span>最后再是赋值运算符</span><br><br>## 10 程序的组织结构<br><br>**程序的结构一般都分为顺序结构、选择结构和循环结构，此处和本人学过的C语言、C++语言以及Java语言相识，都是同为三种基本结构**<br><br>****<br><br>### 10.1 顺序结构<br><br>**顺序结构**，顾名思义，就是按照一定的顺序来执行语言程序，在python中，就是按照自上到下的顺序来执行程序，又比如在赋值运算中就是从右到左，按着一定的优先级的顺序来执行赋值运算。<br><br>### 10.2 对象的布尔值<br><br>在进行下面两种结构总结之前，应该先介绍一下对象的布尔值<br><br>- Python一切皆对象，所有对象都有一个布尔值<br>  - 获取对象的布尔值，就要使用到内置函数bool()<br>- 以下对象的布尔值为False<br>  - False<br>  - 数值0<br>  - None<br>  - 空字符串<br>  - 空列表        `[]`、`list()`<br>  - 空元组        `()`、`tuple()`<br>  - 空字典        `&#123;&#125;`、`dict()`<br>  - 空集合        `set()`<br><br>### 10.3 选择结构<br><br>**选择结构，就是程序根据判断条件的布尔值选择性地执行部分代码，明确的让计算机在什么条件下，该去做什么**<br><br>语法结构通常有单分支结构、双分支结构、多分支结构、嵌套if结构<br><br>**语法结构：**<br><br>```python<br>#单分支结构<br>if 条件表达式:<br>    条件执行体1<br>    条件执行体2<br><br>#双分支结构<br>if 条件表达式:<br>    条件执行体1<br>else:<br>    条件执行体2<br>    <br>#多分支结构<br>if 条件表达式1:<br>    条件执行体1<br>elif 条件表达式2:<br>    条件执行体3<br>elif 条件表达式N:<br>    条件执行体N<br>else:<br>    条件执行体N+1<br>    <br>#嵌套if结构<br>if 条件表达式1:<br>    if 内层条件表达式:<br>        内层条件执行体1<br>    else:<br>        内层条件执行体2<br>else:<br>    条件执行体<br></code></pre></td></tr></table></figure></li></ul></li></ul><p>选择结构中可以简写成条件表达式<code>if....else</code>，：<code>【条件为真的结果】if 条件 else 【条件为假的结果】</code></p><p>下面以一个例子来参考一下用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#比较大小</span><br><span class="hljs-keyword">if</span> num_a&gt;=num_b:<br>    <span class="hljs-built_in">print</span>(num_a,<span class="hljs-string">&#x27;大于等于&#x27;</span>,num_b)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(num_a,<span class="hljs-string">&#x27;小于&#x27;</span>,num_b)<br><br><span class="hljs-comment">#使用条件表达式进行比较</span><br><span class="hljs-built_in">print</span>( (num_a,<span class="hljs-string">&#x27;大于等于&#x27;</span>,num_b)<span class="hljs-keyword">if</span> num_a&gt;=num_b <span class="hljs-keyword">else</span>  (num_a,<span class="hljs-string">&#x27;小于&#x27;</span>,num_b))<br><span class="hljs-comment">#或者将打印出来的东西化简</span><br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">str</span>(num_a)+<span class="hljs-string">&#x27;大于等于&#x27;</span>+<span class="hljs-built_in">str</span>(num_b) <span class="hljs-keyword">if</span> num_a&gt;=num_b <span class="hljs-keyword">else</span>  <span class="hljs-built_in">str</span>(num_a)+<span class="hljs-string">&#x27;小于&#x27;</span>+<span class="hljs-built_in">str</span>(num_b)  )<br></code></pre></td></tr></table></figure><p><strong>此外，在Python中还有一点与其他语言不相同之处</strong></p><p>在C与Java中，表示两个数之间的范围通常只能用<code>score &gt; 80 &amp;&amp; score &lt; 90</code></p><p>但是在Python中，表示两个数之间的范围可以用两种表达方式<code>score &gt; 80 and score &lt; 90</code>或者直接<code>80 &lt; score &lt; 90</code>，此处的&amp;&amp;也换成了Python中布尔运算符的and，并且可以直接用数学中连等的方式来表示</p><h3 id="10-4-pass语句"><a href="#10-4-pass语句" class="headerlink" title="10.4 pass语句"></a>10.4 pass语句</h3><blockquote><p>pass语句：语句什么都不做，只是一个占位符，用在语法上需要语句的地方</p></blockquote><p>pass语句可以用在：<strong>先搭建语法结构，还没想好代码怎么写的时候</strong></p><p>关于什么语法可以一起使用：</p><ul><li>if语句的条件执行体</li><li>for-in语句的循环体</li><li>定义函数时的函数体</li></ul><p>下面是使用方式，以<code>if</code>语句作为例子参考学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> a&gt;b:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#此时的代码是没有报错的，但是也不会执行出结果，有种类似于只为了不报错也不想看到出格的结果的感觉</span><br></code></pre></td></tr></table></figure><h3 id="10-5-range-函数"><a href="#10-5-range-函数" class="headerlink" title="10.5 range()函数"></a>10.5 range()函数</h3><p>在总结循环结构之前还是需要先写一下<code>range()</code>函数的用法，因为可能后面的<code>for</code>循环会经常用到这个函数</p><blockquote><p><code>range()</code>函数：就是用来生成一个整数序列</p></blockquote><ul><li><p>创建<code>range</code>对象有三种方式，后面会有相关代码例子介绍</p><ul><li><code>range(stop)</code></li><li><code>range(start,stop)</code></li><li><code>range(start,stop,step)</code></li></ul></li><li><p><code>range()</code>函数的返回值是一个迭代器对象</p></li><li><p>range类型的优点</p></li><li><blockquote><p>不管<code>range</code>对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要存储start,stop和step，只有当用到range对象时，才会去计算序列中的相关元素</p></blockquote></li><li><p><code>in</code> 与 <code>not in</code> 可以判断整数序列中是否存在（不存在）指定的整数</p></li></ul><p>下面就一个例子，简单描述一下<code>range()</code>函数的一些创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># rang()的三种创建方式</span><br><span class="hljs-string">&quot;&quot;&quot;第一种创建方式：只有一个参数（小括号里面只给了一个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)       <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，默认从0开始，默认相差1称为步长</span><br><span class="hljs-built_in">print</span>(r)            <span class="hljs-comment"># range(0, 10)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># 用于查看range对象种的整数序列  ——&gt;list是列表的意思</span><br><br><span class="hljs-string">&quot;&quot;&quot;第二种创建方式：给了两个参数（小括号里面给了两个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)    <span class="hljs-comment"># 指定了起始值，从1开始，到10结束（不包括10），默认步长为1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-string">&quot;&quot;&quot;第三种创建方式：给了三个参数（小括号里面给了三个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># 指定了起始值，从1开始，到10结束（不包括10），指定了步长为2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># [1, 3, 5, 7, 9]</span><br><br><span class="hljs-string">&quot;&quot;&quot;判断指出的整数 再序列中是否存在 用in， not in&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> r)      <span class="hljs-comment"># False， 10不在当前的r这个整数序列 中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span> <span class="hljs-keyword">in</span> r)       <span class="hljs-comment"># True， 9在当前的r这个序列中</span><br></code></pre></td></tr></table></figure><h3 id="10-6-循环结构"><a href="#10-6-循环结构" class="headerlink" title="10.6 循环结构"></a>10.6 循环结构</h3><blockquote><p> 循环结构就是指反复做一件事情</p></blockquote><p>循环结构一般有<code>while</code>、<code>for -in</code></p><p><strong>选择结构的if与循环结构<code>while</code>的区别</strong></p><ul><li><code>if</code>是判断一次，条件为<code>True</code>执行一次</li><li><code>while</code>是判断N+1次，条件为<code>True</code>执行N次</li></ul><hr><p><code>while</code>的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件表达式:<br>    条件执行体(循环体)<br></code></pre></td></tr></table></figure><p><code>while</code>的一个万金油例子，计算1-100之间的偶数和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span> += a<br>    a += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-100之间的偶数和为&#x27;</span>, <span class="hljs-built_in">sum</span>)<br><span class="hljs-comment">#输出结果：1-100之间的偶数和为 2550</span><br></code></pre></td></tr></table></figure><hr><p><code>for-in</code>循环</p><blockquote><ul><li><code>in</code>表达从（字符串、序列等）中依次取值，又称为遍历</li><li><code>for-in</code>遍历的对象必须是可迭代对象</li></ul></blockquote><p><code>for-in</code>的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 自定义的变量 <span class="hljs-keyword">in</span> 可迭代对象:<br>    循环体<br></code></pre></td></tr></table></figure><p><strong>另外，循环体内不需要访问自定义变量，可以将自定义变量替代为下划线</strong></p><p>下面以几个代码例子演示一下<code>for-in</code>的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Python&#x27;</span>:    <span class="hljs-comment"># 第一次取出来的是P，将P赋值给item，将item的值输出</span><br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># 输出结果依次为 P  y  t  h  o  n</span><br><br><span class="hljs-comment"># range()产生一个整数序列 --&gt;也是一个可迭代对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 输出结果依次为 0  1  2  3  4  5  6  7  8  9</span><br><br><span class="hljs-comment"># 如果在循环体中不需要使用到自定义变量，可将自定义变量写成”_“</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;人生苦短，我用Python&#x27;</span>)<br><span class="hljs-comment"># 输出结果为循环五次 人生苦短，我用Python</span><br></code></pre></td></tr></table></figure><h3 id="10-7-流程控制语句"><a href="#10-7-流程控制语句" class="headerlink" title="10.7 流程控制语句"></a>10.7 流程控制语句</h3><blockquote><p><code>break</code>语句：用于结束循环结构，通常与分支结构<code>if</code>一起使用</p></blockquote><blockquote><p><code>continue</code>语句：用于结束当前循环，进入下一次循环，通常与分支结构中的<code>if</code>一起使用</p></blockquote><blockquote><p>通常在多重循环中的<code>break</code>和<code>continue</code>只用于控制本层的循环</p></blockquote><p>此处提到的控制语句<code>break</code>和<code>continue</code>其实与C语言中的作业一样，都是结束循环和结束本次循环的意思</p><h3 id="10-8-else语句"><a href="#10-8-else语句" class="headerlink" title="10.8 else语句"></a>10.8 else语句</h3><p><code>else</code>语句在前面的<code>if...else</code>中有讲到，但是它其实有这三种搭配方式，所以单独提出来再总结一些东西</p><hr><p><code>else</code>可以与<code>if</code>配合使用，但是<code>if</code>条件表达式不成立的时候才能执行<code>else</code></p><p><code>else</code>也可以和<code>while</code>、<code>for</code>配合使用，但是只有当没有碰到<code>break</code>的时候才执行<code>else</code></p><p>下面列举几个例子方便理解使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 此处的else是与上面的if搭配使用的，如果if执行成功，就不会再执行else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br><span class="hljs-keyword">else</span>:           <span class="hljs-comment"># 此处的else是与最上面的for搭配使用的，如果没有遇到break，那么else就一定会被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次密码均输入错误&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">3</span>:<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 此处的else是与上面的if搭配使用的，如果if执行成功，就不会再执行else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br>    a+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:           <span class="hljs-comment"># 此处的else是与最上面的while搭配使用的，如果没有遇到break，那么else就一定会被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次密码均输入错误&#x27;</span>)<br><br></code></pre></td></tr></table></figure><blockquote><p>由此可见，其实<code>else</code>的用法和C语言的其实也不太一样，但是代码其实从上到下按照本身的逻辑走一遍，这里面的<code>else</code>是与谁搭配使用的就很好被理解了</p></blockquote><h3 id="10-9-嵌套循环"><a href="#10-9-嵌套循环" class="headerlink" title="10.9 嵌套循环"></a>10.9 嵌套循环</h3><p>嵌套循环在前面几个知识点的例子中都有涉及到，只是没有指出来细细讲解</p><p><strong>其意义就是：</strong>循环结构中<strong>又嵌套</strong>了另外的完整的循环结构，其中内层循环作为外层循环的循环体执行</p><p>下面就直接举一个打印九九乘法表的代码例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, item+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(it, <span class="hljs-string">&#x27;*&#x27;</span>, item, <span class="hljs-string">&#x27;=&#x27;</span>, item*it, end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1 * 1 = 1</span><br><span class="hljs-string">1 * 2 = 22 * 2 = 4</span><br><span class="hljs-string">1 * 3 = 32 * 3 = 63 * 3 = 9</span><br><span class="hljs-string">1 * 4 = 42 * 4 = 83 * 4 = 124 * 4 = 16</span><br><span class="hljs-string">1 * 5 = 52 * 5 = 103 * 5 = 154 * 5 = 205 * 5 = 25</span><br><span class="hljs-string">1 * 6 = 62 * 6 = 123 * 6 = 184 * 6 = 245 * 6 = 306 * 6 = 36</span><br><span class="hljs-string">1 * 7 = 72 * 7 = 143 * 7 = 214 * 7 = 285 * 7 = 356 * 7 = 427 * 7 = 49</span><br><span class="hljs-string">1 * 8 = 82 * 8 = 163 * 8 = 244 * 8 = 325 * 8 = 406 * 8 = 487 * 8 = 568 * 8 = 64</span><br><span class="hljs-string">1 * 9 = 92 * 9 = 183 * 9 = 274 * 9 = 365 * 9 = 456 * 9 = 547 * 9 = 638 * 9 = 729 * 9 = 81</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>果然啊，用Python写九九乘法表就是很容易，比起C语言和Java的双层for循环，这个似乎简单了不少</p></blockquote><p>由于时间的原因，也没有整理出来特别多的知识点，，所以只整理到了这里，有些知识点的细节部分可能没有讲清楚，后续有时间还会接着整理出中、下部分。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>日常学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bug改错之hexo部署问题</title>
    <link href="/2022/01/12/bug-gai-cuo-zhi-hexo-bu-shu-wen-ti/"/>
    <url>/2022/01/12/bug-gai-cuo-zhi-hexo-bu-shu-wen-ti/</url>
    
    <content type="html"><![CDATA[<p><img src="%E9%97%AE%E9%A2%98%E7%85%A7%E7%89%87.jpg" alt="问题描述"></p><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><blockquote><p>在利用<code>hexo</code>部署过程中可能会出现错误</p><p><code>FATAL &#123;   err: Error: Spawn failed       at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:51:21)       at ChildProcess.emit (node:events:390:28)       at ChildProcess.cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)       at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;     code: 128   &#125; &#125; Something&#39;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</code></p></blockquote><h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h1><h2 id="2-1-解决方式一："><a href="#2-1-解决方式一：" class="headerlink" title="2.1 解决方式一："></a>2.1 解决方式一：</h2><p>1、进入到博客根目录，先把<code>git</code>提交的内容文件夹<code>.deploy_git</code>手动删除，也可利用指令<code>rm -rf .deploy_git</code>对文件夹进行删除</p><p>2、重新执行<code>git config --global core.autocrlf false</code></p><p>3、最后再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="2-2-解决方式二："><a href="#2-2-解决方式二：" class="headerlink" title="2.2 解决方式二："></a>2.2 解决方式二：</h2><blockquote><p>有可能是因为<code>git</code>的<code>repo</code>配置的地址不正确，可以将<code>http</code>方式变更为<code>ssh</code>方式</p></blockquote><p>1、进入到博客根目录，先把<code>git</code>提交的内容文件夹<code>.deploy_git</code>手动删除，也可利用指令<code>rm -rf .deploy_git</code>对文件夹进行删除</p><p>2、找到博客根目录的<code>_config.yml</code>文件，打开后，对下列的<code>repo</code>进行修改</p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/yourname/yourname.github.io.git -&gt; git@github.com:XXXXXXX/XXXXXX.github.io.git</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>3、 最后再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="2-3-解决方式三：（不太建议）"><a href="#2-3-解决方式三：（不太建议）" class="headerlink" title="2.3 解决方式三：（不太建议）"></a>2.3 解决方式三：（不太建议）</h2><p>1、进入博客根目录 <code>cd D:/MyBlog</code></p><p>2、进入deploy文件夹 <code>cd .deploy_git/</code></p><p>3、强制推送 <code>git push -f</code></p>]]></content>
    
    
    <categories>
      
      <category>Bug改错</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bug</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>勉励文章</title>
    <link href="/2022/01/12/mian-li-wen-zhang/"/>
    <url>/2022/01/12/mian-li-wen-zhang/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这是之前比较火的一篇论文致谢，有人说看完热泪盈眶，有人看完陷入沉思，更多的，是对一个穿过黑暗的勇者的敬佩。自己也突然想到了“内卷”两个字眼，下面的是朋友圈的一位朋友发的，感觉说的似乎有那么点道理，便想着发出来记录一下。</p></blockquote><p>越多的人这样做，大家耗费了更多时间和精力却得到了一样的结果。</p><p>内卷指的是，每个人都愿意为五斗米折腰 ，<br>但永远有人折的更低 ，却只是那五斗米。</p><p>内卷并不是说的努力，而是无效内耗。<br>就比如我们这一届老师布置的作业，本身是个实务分析题，写过程就行，有的人加上各种其他的字数，写成了一篇论文的长度，而有的老师鼓励这种，就使得大家都这样做，最后本身课业压力都大，还需要为了某个作业去花费更多的精力才能拿到大家都正常不卷时候的分数，但是本身可以拿这些时间干更多有意义的事情。</p><p>又比如大学的时候，明明要求论文写5000字，有一个同学硬生生写了8000，结果被另一个人知道了，熬夜写了10000，我觉得这才是卷，在负担自己的情况下，卷别人，根本没有正常的努力了，真正的只是正常的努力不是内卷。</p><p>我们不是那些反方向坐地铁却徒劳无功的人我们是渴望步入理想大学的高中生是不甘平庸的大学生。</p><p>我从不认为谁的努力如“内卷”的释义<br>“付出了时间和精力，却得到了和原来一样的结果”。</p><p>这个世界上有人正过着你想要的生活所以我们从不认输。<br>我们总要忍受一段日子才能真正成为自己的光比起那些不努力就能获取的成功我更喜欢<br>先努力优秀，再大方拥有。</p><p>希望少一些无效内耗，也希望不要再滥用“内卷”。</p><p><img src="%E8%87%B4%E8%B0%A2.png" alt="研究生论文致谢"></p>]]></content>
    
    
    <categories>
      
      <category>记录生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
