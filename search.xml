<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日一题之归并排序</title>
      <link href="/2022/02/24/mei-ri-yi-ti-zhi-gui-bing-pai-xu/"/>
      <url>/2022/02/24/mei-ri-yi-ti-zhi-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="1、归并排序原理"><a href="#1、归并排序原理" class="headerlink" title="1、归并排序原理"></a>1、归并排序原理</h2><p><strong>归并排序</strong>（Merge Sort）是建立在归并操作上的一种有效，稳定的排序算法，该算法是采用<strong>分治法</strong>（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p><p>简单来说就是把数组从中间划分为两个子数组，一直递归地把子数组划分成更小的数组，直到子数组里面只有一个元素的时候开始排序。排序的方法就是按照大小顺序合并两个元素。接着依次按照递归的顺序返回，不断合并排好序的数组，直到把整个数组排好序。</p><h2 id="2、归并排序的步骤"><a href="#2、归并排序的步骤" class="headerlink" title="2、归并排序的步骤"></a>2、归并排序的步骤</h2><p><img src="mergeSort.gif" alt="动态步骤演示"></p><h2 id="3、归并排序的代码演示"><a href="#3、归并排序的代码演示" class="headerlink" title="3、归并排序的代码演示"></a>3、归并排序的代码演示</h2><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">100010</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        <span class="hljs-keyword">int</span> n = sc.nextInt();<br>        <span class="hljs-keyword">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            nums[i] = sc.nextInt();<br>        &#125;<br>        mergeSort(nums, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            System.out.printf(<span class="hljs-string">&quot;%d &quot;</span>, nums[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (left &gt;= right) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> mid = (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        mergeSort(nums, left, mid);<br>        mergeSort(nums, mid + <span class="hljs-number">1</span>, right);<br>        <span class="hljs-keyword">int</span> i = left, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &lt;= nums[j]) &#123;<br>                tmp[k++] = nums[i++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmp[k++] = nums[j++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>            tmp[k++] = nums[i++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>            tmp[k++] = nums[j++];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (i = left, j = <span class="hljs-number">0</span>; i &lt;= right; ++i, ++j) &#123;<br>            nums[i] = tmp[j];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printvec</span><span class="hljs-params">( <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;vec, <span class="hljs-keyword">const</span> string &amp;strbegin = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">const</span> string &amp;strend = <span class="hljs-string">&quot;&quot;</span> )</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; strbegin &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">auto</span> val : vec )<br>    &#123;<br>        cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; strend &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mergesort</span><span class="hljs-params">( vector&lt;<span class="hljs-keyword">int</span>&gt; &amp; vec, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> ( left &gt;= right )<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">mergesort</span>( vec, left, mid );<br>    <span class="hljs-built_in">mergesort</span>( vec, mid + <span class="hljs-number">1</span>, right );<br><br>    <span class="hljs-keyword">int</span> i = left;<br>    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;vecTmp;<br>    <span class="hljs-keyword">while</span> ( i &lt;= mid &amp;&amp; j &lt;= right )<br>    &#123;<br>        <span class="hljs-keyword">if</span> ( vec[i] &lt; vec[j] )<br>        &#123;<br>            vecTmp.<span class="hljs-built_in">push_back</span>( vec[i] );<br>            i++;<br>        &#125;<span class="hljs-keyword">else</span>  &#123;<br>            vecTmp.<span class="hljs-built_in">push_back</span>( vec[j] );<br>            j++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> ( i &lt;= mid )<br>    &#123;<br>        vecTmp.<span class="hljs-built_in">push_back</span>( vec[i] );<br>        i++;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> ( j &lt;= right )<br>    &#123;<br>        vecTmp.<span class="hljs-built_in">push_back</span>( vec[j] );<br>        j++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = left; i &lt;= right; i++ )<br>    &#123;<br>        vec[i] = vecTmp[i - left];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-keyword">void</span> )</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; vec = &#123; <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">printvec</span>( vec );<br>    <span class="hljs-built_in">mergesort</span>( vec, <span class="hljs-number">0</span>, vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> );<br>    <span class="hljs-built_in">printvec</span>( vec, <span class="hljs-string">&quot;after insert sort&quot;</span> );<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>作者测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] str=&#123;<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> rigth=str.length-<span class="hljs-number">1</span>;<br>    sort(str);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : str) &#123;<br>        System.out.println(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> []arr)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> []temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length];<span class="hljs-comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span><br>    sort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>,temp);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> []temp)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left&lt;right)&#123;<br>        <span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>;<br>        sort(arr,left,mid,temp);<span class="hljs-comment">//左边归并排序，使得左子序列有序</span><br>        sort(arr,mid+<span class="hljs-number">1</span>,right,temp);<span class="hljs-comment">//右边归并排序，使得右子序列有序</span><br>        mergeSort(arr,left,mid,right,temp);<span class="hljs-comment">//将两个有序子数组合并操作</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i=left,j=mid+<span class="hljs-number">1</span>,k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i&lt;=mid &amp;&amp; j&lt;=right) &#123;<br>        <span class="hljs-keyword">if</span>(nums[j]&gt;=nums[i]) &#123;<br>            temp[k++]=nums[i++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp[k++]=nums[j++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) &#123;<br>        temp[k++] = nums[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= right) &#123;<br>        temp[k++] = nums[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = left, j = <span class="hljs-number">0</span>; i &lt;= right; ++i, ++j) &#123;<br>        nums[i] = temp[j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、归并排序的算法分析"><a href="#4、归并排序的算法分析" class="headerlink" title="4、归并排序的算法分析"></a>4、归并排序的算法分析</h2><p>归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中<code>Arrays.sort()</code>采用了一种名为<code>TimSort</code>的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为<code>O(n)</code>，而完全二叉树的深度为<code>|log2n|</code>。总的平均时间复杂度为<code>O(nlogn)</code>。而且，归并排序的最好，最坏，平均时间复杂度均为<code>O(nlogn)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题之选择排序</title>
      <link href="/2022/02/23/mei-ri-yi-ti-zhi-xuan-ze-pai-xu/"/>
      <url>/2022/02/23/mei-ri-yi-ti-zhi-xuan-ze-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="1、选择排序原理"><a href="#1、选择排序原理" class="headerlink" title="1、选择排序原理"></a>1、选择排序原理</h2><p><strong>选择排序（Selection sort）</strong>是一种简单直观的排序算法。它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p><p>简化一下原理，大概就是把数组中的元素分为已排序队列和待排序队列，每次在待排序队列中选择出最小的元素（或者最大的元素）放入到已排序队列中的尾端，依次重复操作，直至整个数组都是已排序队列。</p><h2 id="2、选择排序的步骤"><a href="#2、选择排序的步骤" class="headerlink" title="2、选择排序的步骤"></a>2、选择排序的步骤</h2><p><img src="v2-c7bbbfaf4e9853595f439e25420197a8_720w.jpg" alt="步骤图解"></p><h2 id="3、选择排序的代码实现"><a href="#3、选择排序的代码实现" class="headerlink" title="3、选择排序的代码实现"></a>3、选择排序的代码实现</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectionSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectionSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = nums.length; i &lt; n - <span class="hljs-number">1</span>; ++i) &#123;<br>            <span class="hljs-keyword">int</span> minIndex = i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &lt; nums[minIndex]) &#123;<br>                    minIndex = j;<br>                &#125;<br>            &#125;<br>            swap(nums, minIndex, i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> t = nums[i];<br>        nums[i] = nums[j];<br>        nums[j] = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>&#125;;<br>        selectionSort(nums);<br>        System.out.println(Arrays.toString(nums));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selectsort</span><span class="hljs-params">( vector&lt;<span class="hljs-keyword">int</span>&gt; &amp; vec )</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++ )<br>    &#123;<br>        <span class="hljs-keyword">int</span> minidx = i;<br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; vec.<span class="hljs-built_in">size</span>(); j++ )<br>        &#123;<br>            <span class="hljs-keyword">if</span> ( vec[minidx] &gt; vec[j] )<br>            &#123;<br>                minidx = j;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">swap</span>( vec[i], vec[minidx] );<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-keyword">void</span> )</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; vec = &#123; <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">selectsort</span>( vec );<br>    <span class="hljs-built_in">printvec</span>( vec, <span class="hljs-string">&quot;after insert sort&quot;</span> );<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>小测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">kuaipai</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] str = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">int</span> length=str.length;<br>    <span class="hljs-keyword">int</span> min;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;length;i++) &#123;<br>        min=i;<br>        <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;length;j++) &#123;<br>            <span class="hljs-keyword">if</span>(str[j]&lt;str[min]) &#123;<br>                min=j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (min!=i) &#123;<br>            <span class="hljs-keyword">int</span> temp;<br>            temp=str[min];<br>            str[min]=str[i];<br>            str[i]=temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;length;i++) &#123;<br>        System.out.println(str[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、选择排序的算法分析"><a href="#4、选择排序的算法分析" class="headerlink" title="4、选择排序的算法分析"></a>4、选择排序的算法分析</h2><p>空间复杂度 O(1)，时间复杂度 O(n²)。</p><p><strong>选择排序是一种不稳定的排序算法</strong>。选择排序每次都要找剩余未排序元素中的最小值，并和前面的元素交换位置，这样破坏了稳定性。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题之插入排序</title>
      <link href="/2022/02/22/mei-ri-yi-ti-zhi-cha-ru-pai-xu/"/>
      <url>/2022/02/22/mei-ri-yi-ti-zhi-cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="1、插入排序原理"><a href="#1、插入排序原理" class="headerlink" title="1、插入排序原理"></a>1、插入排序原理</h2><p>下面是百度百科的一段解释，我认为很容易被接收这种思想，便直接复制过来</p><p><strong>插入排序的工作方式像许多人排序一手扑克牌。开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较。拿在左手上的牌总是排序好的，原来这些牌是桌子上牌堆中顶部的牌。</strong></p><p>插入排序是指在待排序的元素中，假设前面n-1(其中n&gt;=2)个数已经是排好顺序的，现将第n个数插到前面已经排好的序列中，然后找到合适自己的位置，使得插入第n个数的这个序列也是排好顺序的。按照此法对所有元素进行插入，直到整个序列排为有序的过程，称为插入排序。</p><p>大概意思就是说，将数组分为<strong>已排序区间</strong>和<strong>待排序区间</strong>，其中排序是从左边开始进行的，所以左边为已排序区间，右边为待排序区间，最开始的时候，数组中的第一个元素不参与排序，它便是已排序区间的唯一一个元素，插入的思想便是从待排序区间中取出元素进行在左边已排序区间中找到合适的位置进行插入，并且每次从待排序区间取元素，来重复这个过程。</p><h2 id="2、插入排序的步骤"><a href="#2、插入排序的步骤" class="headerlink" title="2、插入排序的步骤"></a>2、插入排序的步骤</h2><p><img src="8d5494eef01f3a294cf1c6979625bc315c607ca9.png" alt="步骤实现"></p><blockquote><p>作者比较懒，所以就直接在网上巴拉了一张步骤图，以供参考</p></blockquote><h2 id="3、插入排序的代码实现"><a href="#3、插入排序的代码实现" class="headerlink" title="3、插入排序的代码实现"></a>3、插入排序的代码实现</h2><ul><li>Java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertionSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertionSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j, n = nums.length; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> num = nums[i];<br>            <span class="hljs-keyword">for</span> (j = i - <span class="hljs-number">1</span>; j &gt;=<span class="hljs-number">0</span> &amp;&amp; nums[j] &gt; num; --j) &#123;<br>                nums[j + <span class="hljs-number">1</span>] = nums[j];<br>            &#125;<br>            nums[j + <span class="hljs-number">1</span>] = num;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>&#125;;<br>        insertionSort(nums);<br>        System.out.println(Arrays.toString(nums));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertsort</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;vec)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; vec.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> num = vec[i];<br>        <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; vec[j] &gt; num; j--)<br>        &#123;<br>            vec[j + <span class="hljs-number">1</span>] = vec[j];<br>        &#125;<br><br>        vec[j + <span class="hljs-number">1</span>] = num;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; vec = &#123;<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">insertsort</span>(vec);<br>    <span class="hljs-built_in">printvec</span>(vec, <span class="hljs-string">&quot;after insert sort&quot;</span>);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、插入排序的算法分析"><a href="#4、插入排序的算法分析" class="headerlink" title="4、插入排序的算法分析"></a>4、插入排序的算法分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>在插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较N- 1次，时间复杂度为<strong>O(N)</strong></p><p>最坏的情况是待排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为<strong>O(N的平方)</strong></p><p>平均来说，A[1..j-1]中的一半元素小于A[j]，一半元素大于A[j]。插入排序在平均情况运行时间与最坏情况运行时间一样，是输入规模的二次函数 </p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>插入排序的空间复杂度为常数阶<strong>O(1)</strong></p><h3 id="稳定性分析"><a href="#稳定性分析" class="headerlink" title="稳定性分析"></a>稳定性分析</h3><p>如果待排序的序列中存在两个或两个以上具有相同关键词的数据，排序后这些数据的相对次序保持不变，即它们的位置保持不变，通俗地讲，就是两个相同的数的相对顺序不会发生改变，则该算法是稳定的；如果排序后，数据的相对次序发生了变化，则该算法是不稳定的。关键词相同的数据元素将保持原有位置不变，<strong>所以该算法是稳定的</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题之冒泡排序</title>
      <link href="/2022/02/21/mei-ri-yi-ti-zhi-mou-pao-pai-xu/"/>
      <url>/2022/02/21/mei-ri-yi-ti-zhi-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="1、冒泡排序原理"><a href="#1、冒泡排序原理" class="headerlink" title="1、冒泡排序原理"></a>1、冒泡排序原理</h2><p><strong>冒泡排序就是一种交换排序，最核心的思想就是冒泡，把数组中最大的那个数字往上冒，但是冒泡的过程中只能和数组中与之相邻的元素进行冒泡。</strong><br>冒泡的过程中，就是两个相邻的元素进行比较，将数字较大（较小）的元素交换到最右边（左边），每次只能进行相邻的两个元素之间的替换，然后依次后移，进行下两个元素之间的替换，<strong>由此从0到n-1次两两元素之间的替换</strong>。重复扫描待排序序列，并比较每一对相邻的元素，当该对元素顺序不正确时进行交换。一直重复这个过程，直到没有任何两个相邻元素可以交换，就表明完成了排序。</p><h2 id="2、冒泡排序的步骤"><a href="#2、冒泡排序的步骤" class="headerlink" title="2、冒泡排序的步骤"></a>2、冒泡排序的步骤</h2><p>临时定义一个数组<code>[4,1,3,7,5]</code>，按照从小到大进行排序，来模拟演示每一次的排序过程  </p><ul><li>第一轮排序，此时整个序列中的元素都位于待排序序列，依次扫描每对相邻的元素，并对顺序不正确的元素对交换位置。</li></ul><ol><li>第一次比较：4和1进行比较，4比1大，则新序列变成<code>[1,4,3,7,5]</code></li><li>第二次比较：4和3进行比较，4比3大，则新序列变成<code>[1,3,4,7,5]</code></li><li>第三次比较：4和7进行比较，此时7比4大，则序列不变，仍为<code>[1,3,4,7,5]</code></li><li>第四次比较：7和5进行比较，7比5大，则新序列变成<code>[1,3,4,5,7]</code><blockquote><p>经过第一轮冒泡排序，从待排序序列中找出了最大数 7，并将其放到了待排序序列的尾部，并入已排序序列中。  </p></blockquote></li></ol><ul><li>第二轮排序，此时待排序序列只包含前 4 个元素，依次扫描每对相邻元素，对顺序不正确的元素对交换位置。</li></ul><ol><li>第一次比较：1和3进行比较，此时3比1大，则序列不变，仍为<code>[1,3,4,5,7]</code></li><li>第二次比较：3和4进行比较，此时4比3大，则序列不变，仍为<code>[1,3,4,5,7]</code></li><li>第三次比较：4和5进行比较，此时5比4大，则序列不变，仍为<code>[1,3,4,5,7]</code><blockquote><p>经过第二次冒泡排序，从待排序序列中找到了最大数 5，并将其放到了待排序序列的尾部，并入已排序序列中。</p></blockquote></li></ol><ul><li>第三轮排序，此时待排序序列只包含前 3 个元素，一次扫描每对相邻元素，对顺序不正确的元素对交换位置。</li></ul><ol><li>第一次比较：1和3进行比较，此时3比1大，则序列不变，仍为<code>[1,3,4,5,7]</code></li><li>第二次比较：3和4进行比较，此时4比3大，则序列不变，仍为<code>[1,3,4,5,7]</code><blockquote><p>进过三第三次冒泡排序，从待排列序列中找到了最大数 4，并将其放到了待排序序列的尾部，并入到已排序虚了中。</p></blockquote></li></ol><ul><li>第四轮排序，此时待排序列中只包含两个元素<code>[1,3]</code></li></ul><ol><li>第一次比较：1和3进行比较，此时3比1大，则序列不变，仍为<code>[1,3,4,5,7]</code>  </li></ol><blockquote><p>当进行第五轮冒泡排序时，由于待排序序列中仅剩 1 个元素，无论再进行相邻元素的比较，因此直接将其并入已排序序列中，此时的序列就认定为已排序好的序列  </p></blockquote><p>所以最终的比较结果为<code>[1,3,4,5,7]</code>  </p><h2 id="2、冒泡排序的代码实现"><a href="#2、冒泡排序的代码实现" class="headerlink" title="2、冒泡排序的代码实现"></a>2、冒泡排序的代码实现</h2><blockquote><p>作者能力有限，考虑到自己的基础问题，只能写出来C、C++、Java版本的算法实现</p></blockquote><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BubbleSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> hasChange = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = nums.length; i &lt; n - <span class="hljs-number">1</span> &amp;&amp; hasChange; ++i) &#123;<br>            hasChange = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n - i - <span class="hljs-number">1</span>; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &gt; nums[j + <span class="hljs-number">1</span>]) &#123;<br>                    swap(nums, j, j + <span class="hljs-number">1</span>);<br>                    hasChange = <span class="hljs-keyword">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> t = nums[i];<br>        nums[i] = nums[j];<br>        nums[j] = t;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>&#125;;<br>        bubbleSort(nums);<br>        System.out.println(Arrays.toString(nums));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/* 简单版本 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubblesort</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;vec)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vec.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (vec[j] &gt; vec[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(vec[j], vec[j + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 改进版本 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubblesort1</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;vec)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; vec.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">bool</span> exchange = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vec.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (vec[j] &gt; vec[j + <span class="hljs-number">1</span>])<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(vec[j], vec[j + <span class="hljs-number">1</span>]);<br>                exchange = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!exchange)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printvec</span><span class="hljs-params">(<span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;vec, <span class="hljs-keyword">const</span> string &amp;strbegin = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">const</span> string &amp;strend = <span class="hljs-string">&quot;&quot;</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; strbegin &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> val : vec)<br>    &#123;<br>        cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br><br>    cout &lt;&lt; endl;<br>    cout &lt;&lt; strend &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt; vec = &#123;<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">printvec</span>(vec);<br><br>    <span class="hljs-built_in">bubblesort1</span>(vec);<br><br>    <span class="hljs-built_in">printvec</span>(vec, <span class="hljs-string">&quot;after sort&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、冒泡排序的算法分析"><a href="#4、冒泡排序的算法分析" class="headerlink" title="4、冒泡排序的算法分析"></a>4、冒泡排序的算法分析</h2><p>通过分析冒泡排序的实现代码可以得知，该算法的最差时间复杂度为<code>O(n2)</code>，最优时间复杂度为<code>O(n)</code>，平均时间复杂度为 <code>O(n2)</code>。</p><p><strong>冒泡排序是一种简单的排序算法，它也是一种稳定排序算法。</strong></p><blockquote><p>一般情况下，称某个排序算法稳定，指的是当待排序序列中有相同的元素时，它们的相对位置在排序前后不会发生改变。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 每日一题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记</title>
      <link href="/2022/02/13/mybatis-xue-xi-bi-ji/"/>
      <url>/2022/02/13/mybatis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>回顾之前学习过的一些知识：</p><ul><li>JDBC</li><li>MySQL</li><li>Java基础</li><li>maven</li><li>junit</li></ul><p>SSM框架：配置文件的。最好的方式是看官方文档</p><h2 id="1、-简介"><a href="#1、-简介" class="headerlink" title="1、 简介"></a>1、 简介</h2><h3 id="1-1-什么是？"><a href="#1-1-什么是？" class="headerlink" title="1.1 什么是？"></a>1.1 什么是？</h3><p><img src="mybatis.png" alt="MyBatis图标"></p><ul><li><p> 是一款优秀的<strong>持久层框架</strong></p></li><li><p>它支持自定义 SQL、存储过程以及高级映射。</p></li><li><p> 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p></li><li><p> 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></li><li><p> 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为 。</p></li><li><p>2013年11月迁移到Github。</p></li></ul><p>如何获得？</p><ul><li><p>maven仓库：<a href="https://mvnrepository.com/artifact/org.//3.5.7">https://mvnrepository.com/artifact/org.//3.5.7</a></p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>GitHub：<a href="https://github.com//-3/releases">https://github.com//-3/releases</a></p></li><li><p>中文文档地址：https://.org/-3/zh/index.html</p></li></ul><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2  持久化"></a>1.2  持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在<strong>持久状态</strong>和<strong>瞬时状态</strong>转化的过程</li><li>内存：<strong>断电即失</strong></li><li>数据库（JDBC），io文件持久化</li><li>生活中：冷藏、罐头</li></ul><p><strong>为什么需要持久化？</strong></p><ul><li>有一些对象，不能把它丢掉</li><li>内存太贵了</li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><p>Dao层、Service层、Controller层….</p><ul><li>完成持久化的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4-为什么用？"><a href="#1-4-为什么用？" class="headerlink" title="1.4 为什么用？"></a>1.4 为什么用？</h3><ul><li>方便</li><li>帮助程序员将数据存入到数据库中</li><li>传统的JDBC太复杂了。简化、框架、自动化</li><li>不用也可以，更容易上手，<strong>技术没有高低之分</strong></li><li>优点<ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ul><p><strong>最重要的一点：使用的人多！！！</strong></p><p>Spring SpringMVC SpringBoot</p><h2 id="2、-第一个程序"><a href="#2、-第一个程序" class="headerlink" title="2、 第一个程序"></a>2、 第一个程序</h2><p>思路：搭建环境–&gt;导入–&gt;编写代码–&gt;测试！</p><h3 id="抑制警告的方法"><a href="#抑制警告的方法" class="headerlink" title="抑制警告的方法"></a>抑制警告的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>    <span class="hljs-comment">//抑制警告</span><br></code></pre></td></tr></table></figure><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h3><p>搭建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `mybatis`;<br><br>USE `mybatis`;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`(<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `pwd` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span><br>)ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `<span class="hljs-keyword">user</span>`(`id`,`name`,`pwd`) <span class="hljs-keyword">VALUES</span> <br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;狂神&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>),<br>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;123890&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>新建项目</p><ol><li><p>新建一个普通的maven项目</p></li><li><p>删除src目录</p></li><li><p>导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-comment">&lt;!--    父工程     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.nyist.edu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MybatisStudy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    导入依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mysql驱动--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--        junit--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><ul><li><p>编写的核心配置文件</p><p>创建文件-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--    环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8<span class="hljs-symbol">&amp;amp;</span>useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nyist.edu.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.PortUnreachableException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 张志鹏</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/11/26 21:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span> p2hemia@nyist.edu.cn</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-comment">//sqlSessionFactory --&gt;sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>             sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span><br>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getsqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><span class="hljs-comment">//        return sqlSessionFactory.openSession();       优化写法</span><br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h3><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nyist.edu.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 张志鹏</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/11/27 8:07</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span> p2hemia@nyist.edu.cn</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pwd;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pwd = pwd;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.nyist.edu.dao;<br><br><span class="hljs-keyword">import</span> cn.nyist.edu.pojo.User;<br><br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Description:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 张志鹏</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/11/27 8:12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span> p2hemia@nyist.edu.cn</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>接口实现类，由原来的UserDaoImpl转变成一个Mapper配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;!--namespace- - -绑定一个Dao/Mapper接口--&gt;<br>&lt;!--&lt;mapper namespace=<span class="hljs-string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;--&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;cn.nyist.edu.dao.UserDao&quot;</span>&gt;<br>&lt;!--    select查询语句  id就是绑定方法的名字--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;getUserList&quot;</span> resultType=<span class="hljs-string">&quot;cn.nyist.edu.pojo.User&quot;</span>&gt;<br>        select * from mybatis.user<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><p>注意点：</p><p>org.apache.ibatis.binding.BindingException: Type interface cn.nyist.edu.dao.UserDao is not known to the MapperRegistry.</p><p><strong>MapperRegistry是什么？</strong></p><p>核心配置文件中注册mappers</p><ul><li><p>junit测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//第一步：获取sqlsession对象</span><br>        SqlSession sqlSession = MybatisUtils.getsqlSession();<br>        <span class="hljs-comment">//方式1：getMapper     执行SQL</span><br>        UserDao userdao = sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = userdao.getUserList();<br><br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭sqlsession</span><br>        sqlSession.close();<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p><strong>可能会遇到的问题</strong></p><ol><li><p>配置文件没有注册</p></li><li><p>绑定接口错误</p></li><li><p>方法名不对</p></li><li><p>返回类型不对</p></li><li><p>maven到处资源问题（约定大于配置）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h4><p>1、导入maven依赖：MySQL驱动、依赖、junit依赖</p><p>2、配置核心配置文件：-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--    环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8<span class="hljs-symbol">&amp;amp;</span>useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、编写工具类Utils获取sqlSessionFactory，来返回sqlsession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//sqlSessionFactory --&gt;sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory=<span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//使用Mybatis第一步：获取sqlSessionFactory对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span><br>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getsqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><span class="hljs-comment">//        return sqlSessionFactory.openSession();       优化写法</span><br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>4、编写实体类User：一定要写tostring方法</p><p>5、编写一个Dao（Mapper）接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>6、编写Dao（Mapper）的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;!--namespace：绑定一个对应的Dao/Mapper接口--&gt;<br>&lt;!--&lt;mapper namespace=<span class="hljs-string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;--&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;cn.nyist.edu.dao.UserDao&quot;</span>&gt;<br>&lt;!--select查询语句，id为方法名字，resultType为方法所在目录--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;getUserList&quot;</span> resultType=<span class="hljs-string">&quot;cn.nyist.edu.pojo.User&quot;</span>&gt;<br>        select * from mybatis.user<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><blockquote><p>其中，namespace中为对应的接口所在类</p><p>其中，select中的id为接口类的方法名字</p><p>其中，resultType为SQL语句执行的返回值</p><p>其中，select中写的是SQL语句</p></blockquote><p>7、编写测试类，对代码进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-comment">//第一步：获取sqlsession对象</span><br>       SqlSession sqlSession = MybatisUtils.getsqlSession();<br>       <span class="hljs-comment">//方式1：getMapper     执行SQL</span><br>       UserDao userdao = sqlSession.getMapper(UserDao.class);<br>       List&lt;User&gt; userList = userdao.getUserList();<br><br>       <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>           System.out.println(user);<br>       &#125;<br><br>       <span class="hljs-comment">//关闭sqlsession</span><br>       sqlSession.close();<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>其中，第一步为获取Utils工具类中的sqlsession</p><p>其中，第二步为执行SQL语句，通过调用sqlsession中的getmapper方法，并且将Dao类的userDao传进去获取</p><p>其中，第三步为userdao调用getUserList方法，来获得执行SQL语句</p><p>其中，第四步为通过迭代循环将SQL语句中的select执行完毕</p><p>其中，第五步为关闭资源</p></blockquote><h2 id="3、-CRUD"><a href="#3、-CRUD" class="headerlink" title="3、 CRUD"></a>3、 CRUD</h2><h3 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1 namespace"></a>3.1 namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致</p><h3 id="3-2-select"><a href="#3-2-select" class="headerlink" title="3.2 select"></a>3.2 select</h3><p>选择，查询语句</p><ul><li>id：就是对应的namespace中的方法名</li><li>resultType：SQL语句执行的返回值！</li><li>parameterType：参数类型！</li></ul><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户</span><br><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按照id查找某个用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.nyist.edu.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//第一步：获取sqlsession对象</span><br>    SqlSession sqlSession = MybatisUtils.getsqlSession();<br>   <br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>   <br>    User user = mapper.getUserById(<span class="hljs-number">1</span>);<br>   <br>    System.out.println(user);<br>   <br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-3-Insert"><a href="#3-3-Insert" class="headerlink" title="3.3 Insert"></a>3.3 Insert</h3><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//insert一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    对象中的属性，可以直接取出来--&gt;</span><br><span class="hljs-comment">&lt;!--    添加一个用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.nyist.edu.pojo.User&quot;</span>&gt;</span><br>        insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  增删改需要提交事务</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getsqlSession();<br><br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>        <span class="hljs-keyword">int</span> user = mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;鲁班七号&quot;</span>, <span class="hljs-string">&quot;123123&quot;</span>));<br><br>        <span class="hljs-keyword">if</span>(user&gt;<span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;插入成功！&quot;</span>);<br>        &#125;<br><br><span class="hljs-comment">//        提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-4-Update"><a href="#3-4-Update" class="headerlink" title="3.4 Update"></a>3.4 Update</h3><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//修改用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    修改一个用户的所有信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.nyist.edu.pojo.User&quot;</span>&gt;</span><br>        update mybatis.user set  name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id =#&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getsqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>   <br>    mapper.updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;小卤蛋&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>));<br>   <br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-5-Delete"><a href="#3-5-Delete" class="headerlink" title="3.5 Delete"></a>3.5 Delete</h3><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的SQL语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    删除一个用户信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from mybatis.user where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getsqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    mapper.deleteUser(<span class="hljs-number">4</span>);<br>   <br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-6-增删改需要提交事务sqlSession-commit"><a href="#3-6-增删改需要提交事务sqlSession-commit" class="headerlink" title="3.6 增删改需要提交事务sqlSession.commit();"></a>3.6 增删改需要提交事务<code>sqlSession.commit();</code></h3><h3 id="3-7-分析错误"><a href="#3-7-分析错误" class="headerlink" title="3.7 分析错误"></a>3.7 分析错误</h3><ul><li>标签不要匹配错</li><li>resource绑定mapper，需要使用路径！</li><li>程序配置文件必须符合规范</li><li>NullPointerException，没有注册到资源</li><li>输出的xml文件中存在中文乱码问题</li><li>maven资源没有导出问题</li></ul><h3 id="3-8-万能的Map"><a href="#3-8-万能的Map" class="headerlink" title="3.8 万能的Map"></a>3.8 万能的Map</h3><blockquote><p> 假如，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map</p></blockquote><p><strong>mapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//万能的Map</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>mapper实现类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    添加一个用户2     传递map中的key--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    insert into mybatis.user (id,name,pwd) values (#&#123;userid&#125;,#&#123;userName&#125;,#&#123;userWord&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser2</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getsqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">5</span>);<br>    map.put(<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;小二&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;userWord&quot;</span>,<span class="hljs-string">&quot;54321&quot;</span>);<br><br><br>    mapper.addUser2(map);<br><br>    sqlSession.commit();<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Map传递参数，直接再sql中取出Map的Key即可！                    【parameterType=”map”】</p><p>对象传递参数，直接在sql中去对象的属性即可！                    【parameterType=”Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到！    </p><p>利用int一个参数的时候，就算不写也不会报错               <strong><del>parameterType=”int”</del></strong></p><p>多个参数用Map，<strong>或者用注解</strong></p><p>利用Map传递参数相对于创建一个实体类节省资源</p></blockquote><p><strong>Mapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//根据id查询用户2</span><br><span class="hljs-function">User <span class="hljs-title">getUserById2</span><span class="hljs-params">(HashMap&lt;String, Object&gt; id)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>Mapper实现类</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    按照id查找某个用户2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById2&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.nyist.edu.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user where id=#&#123;id&#125; and name=#&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById2</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//第一步：获取sqlsession对象</span><br>    SqlSession sqlSession = MybatisUtils.getsqlSession();<br><br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    map.put(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;狂神&quot;</span>);<br><br>    User user = mapper.getUserById2(map);<br>    System.out.println(user);<br><br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9-模糊查询"><a href="#3-9-模糊查询" class="headerlink" title="3.9 模糊查询"></a>3.9 模糊查询</h3><ol><li><p>Java代码执行的时候，传递通配符% %</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserLike</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MybatisUtils.getsqlSession();<br>    UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>    List&lt;User&gt; userList = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>        System.out.println(user);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在sql拼接过程中使用通配符！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mybatis.user <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> &quot;%&quot;#&#123;<span class="hljs-keyword">value</span>&#125;&quot;%&quot;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>以上就有两种方式，一种是在SQL拼接的时候加上%，将模糊查询直接写死，第二种是在执行的时候，通过传递通配符</p></blockquote><h2 id="4、-配置解析"><a href="#4、-配置解析" class="headerlink" title="4、 配置解析"></a>4、 配置解析</h2><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h3><ul><li>-config.xml</li><li> 的配置文件包含了会深深影响  行为的设置和属性信息。</li><li>configuration（配置）<ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><h3 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2 环境配置（environments）"></a>4.2 环境配置（environments）</h3><p> 可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>要学会配置多套运行环境</p><p>默认的事务管理器是JDBC、默认的连接池是POOLED</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--    环境--&gt;</span><br>    //在切换环境的时候，只需要将default中的属性换成环境的Id就行了<br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        // 第一套环境，id为development<br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>        <br>        // 第二套环境 id为test<br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8<span class="hljs-symbol">&amp;amp;</span>useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--    每一个mapper.xml都需要再mybatis核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;edu/dao/UserMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-属性（properties）"><a href="#4-3-属性（properties）" class="headerlink" title="4.3 属性（properties）"></a>4.3 属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件</p><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】</p><p><img src="20210415160621193.png" alt="XML中的标签顺序"></p><p>编写一个配置文件</p><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=GMT%2B8&amp;useSSL=false&amp;useUnicode=true</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>在核心配置文件中映入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11111&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p>核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!--    引用外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--    环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--    每一个mapper.xml都需要再mybatis核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;edu/dao/UserMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的！</li></ul><h3 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4.4 类型别名（typeAliases）"></a>4.4 类型别名（typeAliases）</h3><ul><li>类型别名可为 Java 类型设置一个缩写名字。 </li><li>它仅用于 XML 配置，意在降低冗余的全限定类名书写。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    可以给实体类起别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;edu.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以指定一个包名， 会在包名下面搜索需要的 Java Bean，比如：</p><p>扫描实体类的包，它的默认别名就为这个类的 类名，首字母小写！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--可以给实体类起别名--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在实体类比较少的时候，使用第一种方式。</p><p>如果实体类十分多，建议使用第二种。</p><p>第一种可以DIY别名，第二种则·不行·，如果非要改，需要在实体上增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-设置（settings）"><a href="#4-5-设置（settings）" class="headerlink" title="4.5 设置（settings）"></a>4.5 设置（settings）</h3><p><img src="20210415160644535.png" alt="logImpl的属性"></p><h3 id="4-6-其他配置"><a href="#4-6-其他配置" class="headerlink" title="4.6 其他配置"></a>4.6 其他配置</h3><ul><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins插件<ul><li>-generator-core</li><li>-plus</li><li>通用mapper</li></ul></li></ul><h3 id="4-7-映射器（mappers）"><a href="#4-7-映射器（mappers）" class="headerlink" title="4.7 映射器（mappers）"></a>4.7 映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><blockquote><p>方式一： 【推荐使用】</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/kuang/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>方式二：使用class文件绑定注册</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><hr><blockquote><p>方式三：使用扫描包进行注入绑定</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.kuang.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和他的Mapper配置文件必须同名！</li><li>接口和他的Mapper配置文件必须在同一个包下！</li></ul><hr><p>练习时间：</p><ul><li>将数据库配置文件外部引入</li><li>实体类别名</li><li>保证UserMapper 接口 和 UserMapper .xml 改为一致！并且放在同一个包下！</li></ul><h3 id="4-8-生命周期和作用域"><a href="#4-8-生命周期和作用域" class="headerlink" title="4.8 生命周期和作用域"></a>4.8 生命周期和作用域</h3><p><img src="20210415160823915.png" alt="生命周期流程图"></p><p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>说白了就是可以想象为 ：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession：</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><p><img src="20210415160907349.png" alt="SqlSession的作用域"></p><p>这里面的每一个Mapper，就代表一个具体的业务！</p><h2 id="5、-解决属性名和字段名不一致的问题"><a href="#5、-解决属性名和字段名不一致的问题" class="headerlink" title="5、 解决属性名和字段名不一致的问题"></a>5、 解决属性名和字段名不一致的问题</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>数据库中的字段</p><p><img src="20210415160923650.png" alt="数据表的各个字段"></p><p>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试出现问题</p><p><img src="2021041516093943.png" alt="测试结果"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">//    select * from mybatis.user where id = #&#123;id&#125;<br>//类型处理器<br>//    select id,name,pwd from mybatis.user where id = #&#123;id&#125;<br></code></pre></td></tr></table></figure><p>解决方法：</p><ul><li><p>起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span><br>    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3><p>结果集映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">id   name   pwd<br>id   name   password<br>&lt;!--结果集映射--&gt;<br>&lt;resultMap id=<span class="hljs-string">&quot;UserMap&quot;</span> type=<span class="hljs-string">&quot;User&quot;</span>&gt;<br>    &lt;!--column数据库中的字段，property实体类中的属性--&gt;<br>    &lt;result column=<span class="hljs-string">&quot;id&quot;</span> property=<span class="hljs-string">&quot;id&quot;</span>/&gt;<br>    &lt;result column=<span class="hljs-string">&quot;name&quot;</span> property=<span class="hljs-string">&quot;name&quot;</span>/&gt;<br>    &lt;result column=<span class="hljs-string">&quot;pwd&quot;</span> property=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>&lt;/resultMap&gt;<br><br>&lt;select id=<span class="hljs-string">&quot;getUserById&quot;</span> resultMap=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;<br>    select * from mybatis.user where id = #&#123;id&#125;<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><ul><li><code>resultMap</code> 元素是  中最重要最强大的元素</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li><li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li><li>如果世界总是这么简单就好了。</li></ul><h2 id="6、-日志"><a href="#6、-日志" class="headerlink" title="6、 日志"></a>6、 日志</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p><p>曾经：sout 、debug</p><p>现在：日志工厂！</p><p><img src="20210415161028865.png" alt="logImpl的设置属性"></p><ul><li>SLF4J</li><li>LOG4J 【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING 【掌握】</li><li>NO_LOGGING</li></ul><p>在中具体使用那个一日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING标准日志输出</strong></p><p>在核心配置文件中，配置我们的日志！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>控制台输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Logging initialized using <span class="hljs-string">&#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27;</span> adapter.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>Opening JDBC Connection<br>Created connection <span class="hljs-number">1225038340.</span><br>Setting autocommit to <span class="hljs-keyword">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@49049a04]<br>==&gt;  Preparing: select * from mybatis.user where id=? <br>==&gt; Parameters: <span class="hljs-number">1</span>(Integer)<br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: <span class="hljs-number">1</span>, 狂神, <span class="hljs-number">123456</span><br>&lt;==      Total: <span class="hljs-number">1</span><br>User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;狂神&#x27;</span>, password=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>Resetting autocommit to <span class="hljs-keyword">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@49049a04]<br>Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@49049a04]<br>Returned connection <span class="hljs-number">1225038340</span> to pool.<br><br>Process finished with exit code <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><h3 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h3><p>什么是Log4j？</p><ul><li>Log4j是Apache的一个开源项目，通过使用<strong>Log4j</strong>，我们可以控制日志信息输送的目的地是<strong>控制台</strong>、<strong>文件</strong>、<strong>GUI</strong>组件</li><li>我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>通过一个<strong>配置文件</strong>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li><p>先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure></li><li><p>配置log4j为日志的实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Log4j&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>Log4j的使用！，直接测试运行刚才的查询</p></li></ol><p><img src="20210415161258989.png" alt="Log4j的结果输出分析"></p><p><strong>简单使用</strong></p><ol><li><p>在要使用Log4j 的类中，导入包 import org.apache.log4j.Logger;</p></li><li><p>日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);<br></code></pre></td></tr></table></figure></li><li><p>日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.info(<span class="hljs-string">&quot;info:进入了testLog4j&quot;</span>);<br>logger.debug(<span class="hljs-string">&quot;debug:进入了testLog4j&quot;</span>);<br>logger.error(<span class="hljs-string">&quot;error:进入了testLog4j&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><h3 id="7-1-使用Limit分页"><a href="#7-1-使用Limit分页" class="headerlink" title="7.1 使用Limit分页"></a>7.1 使用Limit分页</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法：<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit startIndex,pageSize;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit <span class="hljs-number">3</span>;  #[<span class="hljs-number">0</span>,n]<br></code></pre></td></tr></table></figure><p>使用实现分页，核心SQL</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--//分页--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLimit&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from  mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span></span>&#123;<br>SqlSession sqlSession = MybatisUtils.getSqlSession();<br>UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>HashMap&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br>    map.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">1</span>);<br>    map.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);<br><br>    List&lt;User&gt; userList =  mapper.getUserByLimit(map);<br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br>    &#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不再使用SQL实现分页</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分页2</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--分页2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByRowBounds&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>    select * from  mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByRowBounds</span><span class="hljs-params">()</span></span>&#123;<br>SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br><span class="hljs-comment">//RowBounds实现</span><br>RowBounds rowBounds = <span class="hljs-keyword">new</span> RowBounds(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//通过Java代码层面实现分页</span><br>List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="hljs-keyword">null</span>,rowBounds);<br><br>    <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>    System.out.println(user);<br>    &#125;<br><br>    sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><img src="20210415161319990.png" alt="MyBatis分页插件"></p><p>了解即可，万一 以后公司的架构师，说要使用，需要知道它是什么东西！</p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><ul><li>大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程</li><li><strong>根本原因 : 解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好</strong></li><li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了；</li><li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</li></ul><p><strong>关于接口的理解</strong></p><ul><li>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</li><li>接口的本身反映了系统设计人员对系统的抽象理解。</li><li>接口应有两类：<ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；</li><li>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；</li></ul></li><li>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</li></ul><p><strong>三个面向区别</strong></p><ul><li>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .</li><li>面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .</li><li>接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构</li></ul><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol><li><p>注解在接口上实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure></li><li><p>需要再核心配置文件中绑定接口！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--绑定接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><p>本质：反射机制实现</p><p>底层：动态代理！</p><p><img src="20210415161339247-1644222730488.png" alt="底层分析"></p><p><strong>详细的执行流程！</strong></p><p><img src="20210415161520814-1644222730416.png" alt="超级详细的执行流程分析"></p><h3 id="8-3-CRUD"><a href="#8-3-CRUD" class="headerlink" title="8.3 CRUD"></a>8.3 CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession  <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>编写接口，增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 方法存在多个参数，所有的参数前面必须加上 @Param(&quot;id&quot;)注解</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserByID</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br><br>    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <br>    <span class="hljs-meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;uid&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;uid&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><p>【注意：我们必须要讲接口注册绑定到我们的核心配置文件中！】</p><p><strong>关于<code>@Param() </code>注解</strong></p><ul><li>基本类型的参数或者<code>String</code>类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在<code>SQL</code>中引用的就是我们这里的 <code>@Param() </code>中设定的属性名！</li></ul><p><strong><code>#&#123;&#125; </code>和<code>$&#123;&#125;</code> 区别</strong></p><h2 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.<br>Never write another getter or equals method again, with one annotation your <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">has</span> <span class="hljs-title">a</span> <span class="hljs-title">fully</span> <span class="hljs-title">featured</span> <span class="hljs-title">builder</span>, <span class="hljs-title">Automate</span> <span class="hljs-title">your</span> <span class="hljs-title">logging</span> <span class="hljs-title">variables</span>, <span class="hljs-title">and</span> <span class="hljs-title">much</span> <span class="hljs-title">more</span>.</span><br></code></pre></td></tr></table></figure><ul><li>java library</li><li>plugs</li><li>build tools</li><li>with one annotation your class</li></ul><p>使用步骤：</p><ol><li><p>在IDEA中安装Lombok插件！</p></li><li><p>在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在实体类上加注解即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Data</span><br><span class="hljs-comment">//@AllArgsConstructor</span><br><span class="hljs-comment">//@NoArgsConstructor</span><br></code></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span> and <span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@FieldNameConstants</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@EqualsAndHashCode</span><br><span class="hljs-meta">@AllArgsConstructor</span>, <span class="hljs-meta">@RequiredArgsConstructor</span> and <span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@Log</span>, <span class="hljs-meta">@Log4j</span>, <span class="hljs-meta">@Log4j2</span>, <span class="hljs-meta">@Slf4j</span>, <span class="hljs-meta">@XSlf4j</span>, <span class="hljs-meta">@CommonsLog</span>, <span class="hljs-meta">@JBossLog</span>, <span class="hljs-meta">@Flogger</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@Singular</span><br><span class="hljs-meta">@Delegate</span><br><span class="hljs-meta">@Value</span><br><span class="hljs-meta">@Accessors</span><br><span class="hljs-meta">@Wither</span><br><span class="hljs-meta">@SneakyThrows</span><br></code></pre></td></tr></table></figure><p>说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Data：无参构造，get、set、tostring、hashcode、equals</span><br><span class="hljs-comment">//@AllArgsConstructor：有参构造</span><br><span class="hljs-comment">//@NoArgsConstructor：无参构造</span><br><span class="hljs-comment">//@EqualsAndHashCode</span><br><span class="hljs-comment">//@ToString</span><br><span class="hljs-comment">//@Getter</span><br></code></pre></td></tr></table></figure><p><strong>Lombok的优缺点</strong></p><p>优点</p><ul><li>能通过注解的形式自动生成构造器、<code>getter/setter</code>、<code>equals</code>、<code>hashcode</code>、<code>toString</code>等方法，提高了一定的开发效率</li><li>让代码变得简洁，不用过多的去关注相应的方法</li><li>属性做修改时，也简化了维护为这些属性所生成的<code>getter/setter</code>方法等</li></ul><p>缺点</p><ul><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建<code>getter/setter</code>方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li></ul><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p><p><img src="20210415161604468.png" alt="多对一的图片说明"></p><ul><li>多个学生，对应一个老师</li><li>对于学生这边而言， <strong>关联</strong> … 多个学生，关联一个老师 【多对一】</li><li>对于老师而言， <strong>集合</strong> ， 一个老师，有很多学生 【一对多】</li></ul><p><img src="20210415161628705.png" alt="数据库的字段"></p><p>SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `teacher` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> teacher(`id`, `name`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;秦老师&#x27;</span>); <br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br>  `id` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `tid` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`),<br>  KEY `fktid` (`tid`),<br>  <span class="hljs-keyword">CONSTRAINT</span> `fktid` <span class="hljs-keyword">FOREIGN</span> KEY (`tid`) <span class="hljs-keyword">REFERENCES</span> `teacher` (`id`)<br>) ENGINE<span class="hljs-operator">=</span>INNODB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小张&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;小李&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>); <br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`id`, `name`, `tid`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;小王&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol><li>导入lombok</li><li>新建实体类 Teacher，Student</li><li>建立Mapper接口</li><li>建立Mapper.XML文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</li><li>测试查询是否能够成功！</li></ol><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    思路:</span><br><span class="hljs-comment">        1. 查询所有的学生信息</span><br><span class="hljs-comment">        2. 根据查询出来的学生的tid，寻找对应的老师！  子查询</span><br><span class="hljs-comment">    --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;</span><br>    select * from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    select * from teacher where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按照结果嵌套处理--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span>&gt;</span><br>    select s.id sid,s.name sname,t.name tname<br>    from student s,teacher t<br>    where s.tid = t.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;StudentTeacher2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>回顾Mysql 多对一查询方式：</p><ul><li>子查询</li><li>联表查询</li></ul><h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如：一个老师拥有多个学生！</p><p>对于老师而言，就是一对多的关系!</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>环境搭建，和刚才一样</li></ol><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> tid;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//一个老师拥有多个学生</span><br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--按结果嵌套查询--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;</span><br>    select s.id sid, s.name sname, t.name tname,t.id tid<br>    from student s,teacher t<br>    where s.tid = t.id and t.id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--复杂的属性，我们需要单独处理 对象： association 集合： collection</span><br><span class="hljs-comment">    javaType=&quot;&quot; 指定属性的类型！</span><br><span class="hljs-comment">    集合中的泛型信息，我们使用ofType获取</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher2&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span>&gt;</span><br>    select * from mybatis.teacher where id = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TeacherStudent2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;ArrayList&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudentByTeacherId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from mybatis.student where tid = #&#123;tid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>关联 - association 【多对一】</li><li>集合 - collection 【一对多】</li><li>javaType &amp; ofType<ol><li>JavaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的 pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志 ， 建议使用 Log4j</li></ul><p><strong>慢SQL 1s 1000s</strong></p><p>面试高频</p><ul><li>Mysql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化！</li></ul><h2 id="12、动态-SQL"><a href="#12、动态-SQL" class="headerlink" title="12、动态 SQL"></a>12、动态 SQL</h2><blockquote><p><strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong></p></blockquote><p>利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。<br><br>if<br>choose (when, otherwise)<br>trim (where, set)<br>foreach<br></code></pre></td></tr></table></figure><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `blog` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,<br>  `author` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `views` <span class="hljs-type">int</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br></code></pre></td></tr></table></figure><p>创建一个基础工程</p><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写实体类对应Mapper接口 和 Mapper.XML文件</p></li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog where 1=1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        and title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>                title = #&#123;title&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>                and author = #&#123;author&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                and views = #&#123;views&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where,set)"></a>trim (where,set)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">select * from mybatis.blog<br><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateBlog&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>    update mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>            title = #&#123;title&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>            author = #&#123;author&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br></code></pre></td></tr></table></figure><blockquote><p><strong>所谓的动态SQL，本质还是SQL语句 ， 只是我们可以在SQL层面，去执行一个逻辑代码</strong></p></blockquote><p>if</p><p>where ， set ， choose ，when</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p><ol><li><p>使用SQL标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在需要使用的地方使用Include标签引用即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>注意事项：</p><ul><li>最好基于单表来定义SQL片段！</li><li>不要存在where标签</li></ul><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <br><br>  <span class="hljs-operator">&lt;</span>foreach item<span class="hljs-operator">=</span>&quot;id&quot; collection<span class="hljs-operator">=</span>&quot;ids&quot;<br>      <span class="hljs-keyword">open</span><span class="hljs-operator">=</span>&quot;(&quot; separator<span class="hljs-operator">=</span>&quot;or&quot; <span class="hljs-keyword">close</span><span class="hljs-operator">=</span>&quot;)&quot;<span class="hljs-operator">&gt;</span><br>        #&#123;id&#125;<br>  <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><br>(id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">or</span> id<span class="hljs-operator">=</span><span class="hljs-number">3</span>)<br><br></code></pre></td></tr></table></figure><p><img src="20210415161714785.png" alt="foreach官方文档分析"></p><p><img src="20210415161731769.png" alt="数据库截图"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        select * from mybatis.blog where 1=1 and (id=1 or id = 2 or id=3)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        我们现在传递一个万能的map ， 这map中可以存在一个集合！</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogForeach&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span><br>    select * from mybatis.blog<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;and (&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span><br>            id = #&#123;id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</p><p>建议：</p><ul><li>现在Mysql中写出完整的SQL,再对应的去修改成为我们的动态SQL实现通用即可！</li></ul><h2 id="13、缓存-（了解）"><a href="#13、缓存-（了解）" class="headerlink" title="13、缓存 （了解）"></a>13、缓存 （了解）</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">查询  ：  连接数据库 ，耗资源！<br>一次查询的结果，给他暂存在一个可以直接取到的地方！<span class="hljs-comment">--&gt; 内存 ： 缓存</span><br><br>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了<br></code></pre></td></tr></table></figure><ol><li>什么是缓存 [ Cache ]？<ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul></li><li>为什么使用缓存？<ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li>什么样的数据能使用缓存？<ul><li>经常查询并且不经常改变的数据。【可以使用缓存】</li></ul></li></ol><h3 id="13-2-缓存"><a href="#13-2-缓存" class="headerlink" title="13.2 缓存"></a>13.2 缓存</h3><ul><li>包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li><li>系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性，定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><ul><li>一级缓存也叫本地缓存： SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul></li></ul><p>测试步骤：</p><ol><li>开启日志！</li><li>测试在一个Sesion中查询两次相同记录</li><li>查看日志输出</li></ol><p><img src="20210415161806836.png" alt="输出结果分析"></p><p>缓存失效的情况：</p><ol><li>查询不同的东西</li><li>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</li></ol><p><img src="20210415161830217.png" alt="输出结果分析"></p><ol><li>查询不同的Mapper.xml</li><li>手动清理缓存！</li></ol><p><img src="20210415161850414.png" alt="缓存清理分析"></p><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p><p>一级缓存就是一个Map。</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--显示的开启全局缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span>  <span class="hljs-attr">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;512&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">readOnly</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><ol><li><p>问题:我们需要将实体类序列化！否则就会报错！</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Caused by: java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.NotSerializableException</span>: com<span class="hljs-selector-class">.kuang</span><span class="hljs-selector-class">.pojo</span>.User<br></code></pre></td></tr></table></figure></li></ol></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</li></ul><h3 id="13-5-缓存原理"><a href="#13-5-缓存原理" class="headerlink" title="13.5 缓存原理"></a>13.5 缓存原理</h3><p><img src="20210415161912668.png" alt="缓存原理分析"></p><h3 id="13-6-自定义缓存-ehcache"><a href="#13-6-自定义缓存-ehcache" class="headerlink" title="13.6 自定义缓存-ehcache"></a>13.6 自定义缓存-ehcache</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存<br></code></pre></td></tr></table></figure><p>要在程序中使用ehcache，先要导包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在mapper中指定使用我们的ehcache缓存实现！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="hljs-comment">       user.home – 用户主目录</span><br><span class="hljs-comment">       user.dir  – 用户当前工作目录</span><br><span class="hljs-comment">       java.io.tmpdir – 默认临时文件路径</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;259200&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">            <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cloud_user&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;5000&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;1800&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      name:缓存名称。</span><br><span class="hljs-comment">      maxElementsInMemory:缓存最大数目</span><br><span class="hljs-comment">      maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="hljs-comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="hljs-comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="hljs-comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span><br><span class="hljs-comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span><br><span class="hljs-comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span><br><span class="hljs-comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="hljs-comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="hljs-comment">      clearOnFlush：内存数量最大时是否清除。</span><br><span class="hljs-comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="hljs-comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="hljs-comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="hljs-comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="hljs-comment">   --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础（下）</title>
      <link href="/2022/01/28/python-ji-chu-xia/"/>
      <url>/2022/01/28/python-ji-chu-xia/</url>
      
        <content type="html"><![CDATA[<p>这次总结了Python基础的最后半部分，有些内容总结的不是很到位，后续发现问题也会再改正。</p><h2 id="16-字符串"><a href="#16-字符串" class="headerlink" title="16. 字符串"></a>16. 字符串</h2><h3 id="16-1-字符串的驻留机制"><a href="#16-1-字符串的驻留机制" class="headerlink" title="16.1 字符串的驻留机制"></a>16.1 字符串的驻留机制</h3><ul><li>字符串<ul><li>在Python中字符串是基本数据类型，是一个<strong>不可变的字符序列</strong></li></ul></li><li>什么叫字符串驻留机制呢？<ul><li>仅保存一份相同且不可变字符串的方法，不同的值被存放在字符串的驻留池中，Python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同字符串时候，不会开辟新空间，而是把该字符串的地址赋给新创建的变量</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串的驻留机制</span><br>a = <span class="hljs-string">&#x27;Python&#x27;</span><br>b = <span class="hljs-string">&quot;Python&quot;</span><br>c = <span class="hljs-string">&#x27;&#x27;&#x27;Python&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">id</span>(a))     <span class="hljs-comment"># Python 1827795263216</span><br><span class="hljs-built_in">print</span>(b, <span class="hljs-built_in">id</span>(b))     <span class="hljs-comment"># Python 1827795263216</span><br><span class="hljs-built_in">print</span>(c, <span class="hljs-built_in">id</span>(c))     <span class="hljs-comment"># Python 1827795263216</span><br></code></pre></td></tr></table></figure><blockquote><p>由此可见，无论是<code>a</code>还是<code>b</code>还是<code>c</code>，他们指向的空间都是同一块地址</p></blockquote><ul><li>驻留机制的几种情况（交互模式）<ul><li>字符串的长度为0或者1时</li><li>符合标识符的字符串</li><li>字符串直在编译时进行驻留，而非运行时</li><li>[-5, 256]之间的整数数字</li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\11793&gt;<span class="hljs-title">python</span></span><br><span class="hljs-function"><span class="hljs-title">Python</span> 3.9.2 (<span class="hljs-title">tags</span>/<span class="hljs-title">v3</span>.9.2:1<span class="hljs-title">a79785</span>, <span class="hljs-title">Feb</span> 19 2021, 13:44:55) [<span class="hljs-title">MSC</span> <span class="hljs-title">v</span>.1928 64 <span class="hljs-title">bit</span> (<span class="hljs-title">AMD64</span>)] <span class="hljs-title">on</span> <span class="hljs-title">win32</span></span><br><span class="hljs-function"><span class="hljs-title">Type</span> &quot;<span class="hljs-title">help</span>&quot;, &quot;<span class="hljs-title">copyright</span>&quot;, &quot;<span class="hljs-title">credits</span>&quot; <span class="hljs-title">or</span> &quot;<span class="hljs-title">license</span>&quot; <span class="hljs-title">for</span> <span class="hljs-title">more</span> <span class="hljs-title">information</span>.</span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span>=&#x27;&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s2</span>=&#x27;&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span> <span class="hljs-title">is</span> <span class="hljs-title">s2</span>创建两个字符串，正好他们的长度为0，都是空字符串，那么得到的就是 同一块地址。</span><br><span class="hljs-function"><span class="hljs-title">True</span>得到的答案还是<span class="hljs-title">True</span>，对应着驻留机制的第一种情况</span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span>=&#x27;%&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s2</span>=&#x27;%&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span> <span class="hljs-title">is</span> <span class="hljs-title">s2</span>创建两个字符串，正好他们的长度为1，都是只有1个长度的字符串，那么得到的就是 同一块地址。</span><br><span class="hljs-function"><span class="hljs-title">True</span>得到的答案还是<span class="hljs-title">True</span>，对应着驻留机制的第一种情况</span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span>=&#x27;<span class="hljs-title">abc</span>%&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s2</span>=&#x27;<span class="hljs-title">abc</span>%&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span>==<span class="hljs-title">s2</span></span><br><span class="hljs-function"><span class="hljs-title">True</span></span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span> <span class="hljs-title">is</span> <span class="hljs-title">s2</span>两个字符串不是具有符合标识符的字符串，所以得到的结果是<span class="hljs-title">false</span>，指向的不是同一块空间</span><br><span class="hljs-function"><span class="hljs-title">False</span></span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">id</span>(<span class="hljs-title">s1</span>)</span><br><span class="hljs-function">2149930897456</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">id</span>(<span class="hljs-title">s2</span>)</span><br><span class="hljs-function">2149930897520</span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span>=&#x27;<span class="hljs-title">abcx</span>&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s2</span>=&#x27;<span class="hljs-title">abcx</span>&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">s1</span> <span class="hljs-title">is</span> <span class="hljs-title">s2</span>两个字符串是符合标识符的字符串，那么他们指向的就是同一块空间</span><br><span class="hljs-function"><span class="hljs-title">True</span>得到的答案就是<span class="hljs-title">True</span>，所以他们对应着驻留机制的第二种情况</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">id</span>(<span class="hljs-title">s1</span>)</span><br><span class="hljs-function">2149930897584</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">id</span>(<span class="hljs-title">s2</span>)</span><br><span class="hljs-function">2149930897584</span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span>=&#x27;<span class="hljs-title">abc</span>&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">b</span>=&#x27;<span class="hljs-title">ab</span>&#x27;+&#x27;<span class="hljs-title">c</span>&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">c</span>=&#x27;&#x27;.<span class="hljs-title">join</span>([&#x27;<span class="hljs-title">ab</span>&#x27;,&#x27;<span class="hljs-title">c</span>&#x27;])</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span> <span class="hljs-title">is</span> <span class="hljs-title">b</span><span class="hljs-title">a</span>和<span class="hljs-title">b</span>是在编译的时候，都成为了<span class="hljs-title">abc</span>，所以在编译的时候就已经具有驻留机制</span><br><span class="hljs-function"><span class="hljs-title">True</span>他们得到的结果也是<span class="hljs-title">True</span>，指向同一块空间地址，对应驻留机制的第三中情况</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span> <span class="hljs-title">is</span> <span class="hljs-title">c</span></span><br><span class="hljs-function"><span class="hljs-title">False</span>但是<span class="hljs-title">c</span>用的是<span class="hljs-title">join</span>方法，他是在运行的时候才生成<span class="hljs-title">abc</span>，所以不具有驻留机制</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">c</span></span><br><span class="hljs-function">&#x27;<span class="hljs-title">abc</span>&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">type</span>(<span class="hljs-title">c</span>)</span><br><span class="hljs-function">&lt;<span class="hljs-title">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;</span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span>=-5</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">b</span>=-5</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span> <span class="hljs-title">is</span> <span class="hljs-title">b</span>这是对应驻留机制的最后一条，数字是有范围的，在[-5， 256]之间的数字就具有驻留机制</span><br><span class="hljs-function"><span class="hljs-title">True</span></span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span>=-6</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">b</span>=-6</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span> <span class="hljs-title">is</span> <span class="hljs-title">b</span></span><br><span class="hljs-function"><span class="hljs-title">False</span></span><br><span class="hljs-function">------------------------------------</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">import</span> <span class="hljs-title">sys</span></span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span>=&#x27;<span class="hljs-title">abc</span>%&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">b</span>=&#x27;<span class="hljs-title">abc</span>%&#x27;</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span> <span class="hljs-title">is</span> <span class="hljs-title">b</span></span><br><span class="hljs-function"><span class="hljs-title">False</span></span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span>=<span class="hljs-title">sys.intern</span>(<span class="hljs-title">b</span>)</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">a</span> <span class="hljs-title">is</span> <span class="hljs-title">b</span>这是利用<span class="hljs-title">sys</span>中的<span class="hljs-title">intern</span>方法，可以强制将两个字符串指向同一个对象，从而具有驻留机制</span><br><span class="hljs-function"><span class="hljs-title">True</span></span><br></code></pre></td></tr></table></figure><ul><li><code>sys</code>中的<code>intern()</code>方法强制两个字符串指向同一个对象</li><li><code>PyCharm</code>对字符串进行了优化处理</li></ul><blockquote><p>字符串驻留机制的优缺点</p></blockquote><ul><li>当需要值相同的字符串时，可以直接从字符串池里拿出来使用，避免频繁的创建和销毁，提升效率和节约内存，因此拼接字符串和修改字符串是会比较影响性能的</li><li>在需要进行支付穿拼接的时候建议使用<code>str</code>类型的<code>join</code>方法，而非<code>+</code>，因为<code>join()</code>方法是闲计算出所有字符串中的长度，然后再拷贝，只<code>new</code>一次对象，效率比“<code>+</code>”效率高</li></ul><h3 id="16-2-字符串的常用操作"><a href="#16-2-字符串的常用操作" class="headerlink" title="16.2 字符串的常用操作"></a>16.2 字符串的常用操作</h3><h4 id="1-字符串的查询操作的方法"><a href="#1-字符串的查询操作的方法" class="headerlink" title="1. 字符串的查询操作的方法"></a>1. 字符串的查询操作的方法</h4><table><thead><tr><th align="center">方法名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>index()</code></td><td align="center">查找子串<code>substr</code>第一次出现的位置，如果查找的子串不存在时，则抛出<code>ValueError</code></td></tr><tr><td align="center"><code>rindex()</code></td><td align="center">查找子串<code>substr</code>最后一次出现的位置，如果查找的子串不存在时，则抛出<code>ValueError</code></td></tr><tr><td align="center"><code>find()</code></td><td align="center">查找子串<code>substr</code>第一次出现的位置，如果查找的子串不存在时，则返回<code>-1</code></td></tr><tr><td align="center"><code>rfind()</code></td><td align="center">查找子串<code>substr</code>最后一次出现的位置，如果查找的子串不存在时，则返回<code>-1</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串的查询操作</span><br>s = <span class="hljs-string">&#x27;hello,hello&#x27;</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&#x27;lo&#x27;</span>))    <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;lo&#x27;</span>))     <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(s.rindex(<span class="hljs-string">&#x27;lo&#x27;</span>))   <span class="hljs-comment"># 9</span><br><span class="hljs-built_in">print</span>(s.rfind(<span class="hljs-string">&#x27;lo&#x27;</span>))    <span class="hljs-comment"># 9</span><br><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&#x27;k&#x27;</span>))     <span class="hljs-comment"># ValueError: substring not found</span><br><span class="hljs-built_in">print</span>(s.find(<span class="hljs-string">&#x27;k&#x27;</span>))      <span class="hljs-comment"># -1</span><br></code></pre></td></tr></table></figure><blockquote><p>由上述代码空可见，<code>index</code>和<code>find</code>都能查找子串出现的位置，但是<code>index</code>会抛出异常，所以一般建议使用<code>find</code>方法</p></blockquote><hr><h4 id="2-字符串的大小写转换操作的方法"><a href="#2-字符串的大小写转换操作的方法" class="headerlink" title="2. 字符串的大小写转换操作的方法"></a>2. 字符串的大小写转换操作的方法</h4><table><thead><tr><th align="center">方法名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>upper()</code></td><td align="center">把字符串中所有字符都转换成<strong>大写字母</strong></td></tr><tr><td align="center"><code>lower()</code></td><td align="center">把字符串中所有字符都转换成<strong>小写字母</strong></td></tr><tr><td align="center"><code>swapcse()</code></td><td align="center">把字符串中所有大写字母转换成<strong>小写字母</strong>，把所有小写字母转换成<strong>大写字母</strong></td></tr><tr><td align="center"><code>capitalize()</code></td><td align="center">把第一个字符转换成<strong>大写</strong>，把其余字符转换成<strong>小写</strong></td></tr><tr><td align="center"><code>title()</code></td><td align="center">把<strong>每一个单词</strong>的第一个字符转换成<strong>大写</strong>，把<strong>每个单词</strong>剩余字符转换成<strong>小写</strong></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串中的大小写转换的方法</span><br>s = <span class="hljs-string">&#x27;hello,python&#x27;</span><br><span class="hljs-built_in">print</span>(s, <span class="hljs-built_in">id</span>(s))    <span class="hljs-comment"># hello,python 2514180985840</span><br>a = s.upper()   <span class="hljs-comment"># 转成大写会产生一个新的字符串对象</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">id</span>(a))    <span class="hljs-comment"># HELLO,PYTHON 2380455957488</span><br>b = s.lower()   <span class="hljs-comment"># 转换小写之后，仍然会产生一个新的字符串对象</span><br><span class="hljs-built_in">print</span>(b, <span class="hljs-built_in">id</span>(b))     <span class="hljs-comment"># hello,python 2329172722096</span><br><span class="hljs-built_in">print</span>(s <span class="hljs-keyword">is</span> b)   <span class="hljs-comment"># False</span><br><br>s2 = <span class="hljs-string">&#x27;hello,Python&#x27;</span><br><span class="hljs-built_in">print</span>(s2.swapcase())    <span class="hljs-comment"># HELLO,pYTHON      小写变大写，大写变小写</span><br><span class="hljs-built_in">print</span>(s2.capitalize())  <span class="hljs-comment"># Hello,python      首字母大写，其他字母小写</span><br><span class="hljs-built_in">print</span>(s2.title())       <span class="hljs-comment"># Hello,Python      每一个单词的首字母大写，其余字母小写</span><br></code></pre></td></tr></table></figure><hr><h4 id="3-字符串内容对齐操作的方法"><a href="#3-字符串内容对齐操作的方法" class="headerlink" title="3. 字符串内容对齐操作的方法"></a>3. 字符串内容对齐操作的方法</h4><table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td><code>center()</code></td><td>居中对齐，第1个参数指定宽度，第2个参数指定填充符，第2个参数的可选的，默认是空格，如果设置宽度小于实际宽度则返回原字符串</td></tr><tr><td><code>ljust()</code></td><td>左对齐，第1个参数指定宽度，第2个参数指定填充符，第2个参数的可选的，默认是空格，如果设置宽度小于实际宽度则返回原字符串</td></tr><tr><td><code>rjust()</code></td><td>右对齐，第1个参数指定宽度，第2个参数指定填充符，第2个参数的可选的，默认是空格，如果设置宽度小于实际宽度则返回原字符串</td></tr><tr><td><code>zfill()</code></td><td>右对齐，左边用0填充，该方法只接收一个参数，用于指定字符串的宽度，如果指定的宽度小于等于字符串的长度，返回字符串本身</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串的对齐方式</span><br>s = <span class="hljs-string">&#x27;hello,Python&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;居中对齐&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s.center(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;*&#x27;</span>))    <span class="hljs-comment"># ****hello,Python****</span><br><span class="hljs-built_in">print</span>(s.center(<span class="hljs-number">20</span>))         <span class="hljs-comment">#     hello,Python      ,如果第二个参数不写，填充符默认为空格</span><br><span class="hljs-string">&quot;&quot;&quot;左对齐&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s.ljust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;*&#x27;</span>))     <span class="hljs-comment"># hello,Python********</span><br><span class="hljs-built_in">print</span>(s.ljust(<span class="hljs-number">10</span>))          <span class="hljs-comment"># hello,Python</span><br><span class="hljs-string">&quot;&quot;&quot;右对齐&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s.rjust(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;*&#x27;</span>))     <span class="hljs-comment"># ********hello,Python</span><br><span class="hljs-built_in">print</span>(s.rjust(<span class="hljs-number">20</span>))          <span class="hljs-comment">#         hello,Python</span><br><span class="hljs-built_in">print</span>(s.rjust(<span class="hljs-number">10</span>))          <span class="hljs-comment"># hello,Python      第一个从参数的长度小于字符串实际长度，所以还是原样显示</span><br><span class="hljs-string">&quot;&quot;&quot;右对齐，使用0进行填充&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s.zfill(<span class="hljs-number">20</span>))          <span class="hljs-comment"># 00000000hello,Python</span><br><span class="hljs-built_in">print</span>(s.zfill(<span class="hljs-number">10</span>))          <span class="hljs-comment"># hello,Python</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-8910&#x27;</span>.zfill(<span class="hljs-number">8</span>))     <span class="hljs-comment"># -0008910  0添加到了负号的后面</span><br></code></pre></td></tr></table></figure><hr><h4 id="4-字符串劈分操作的方法"><a href="#4-字符串劈分操作的方法" class="headerlink" title="4. 字符串劈分操作的方法"></a>4. 字符串劈分操作的方法</h4><table><thead><tr><th align="center">方法名称</th><th>作用</th></tr></thead><tbody><tr><td align="center"><code>split()</code></td><td>1. 从字符串的左边开始劈分，默认的劈分字符是空格字符串，返回的值都是一个列表<br />2. 以通过参数sep指定劈分字符串是的劈分符<br />3. 通过参数maxsplit指定劈分字符串时的最大劈分次数，在经过最大次劈分之后，剩余的子串会单独作为一部分</td></tr><tr><td align="center"><code>rsplit()</code></td><td>1. 从字符串的右边开始劈分，默认的劈分字符是空格字符串，返回的值都是一个列表<br />2. 以通过参数sep指定劈分字符串是的劈分符<br />3. 通过参数maxsplit指定劈分字符串时的最大劈分次数，在经过最大次劈分之后，剩余的子串会单独作为一部分</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串的劈分操作</span><br>s = <span class="hljs-string">&#x27;hello world python&#x27;</span><br><br><span class="hljs-string">&quot;&quot;&quot;split()，从左侧开始劈分&quot;&quot;&quot;</span><br>lst = s.split()<br><span class="hljs-built_in">print</span>(lst)      <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span><br>s1 = <span class="hljs-string">&#x27;hello|world|python&#x27;</span><br><span class="hljs-built_in">print</span>(s1.split())   <span class="hljs-comment"># [&#x27;hello|world|python&#x27;]    由于字符串中没有空格，所以没能劈分，还是1个字符串</span><br><span class="hljs-built_in">print</span>(s1.split(sep=<span class="hljs-string">&#x27;|&#x27;</span>))    <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;] ,当我们指定了sep的切割符号之后，就会按照符号来切割</span><br><span class="hljs-built_in">print</span>(s1.split(sep=<span class="hljs-string">&#x27;|&#x27;</span>, maxsplit=<span class="hljs-number">1</span>))    <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world|python&#x27;]</span><br><br><span class="hljs-string">&quot;&quot;&quot;rsplit()，从右侧开始劈分&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s.rsplit())   <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span><br><span class="hljs-built_in">print</span>(s1.rsplit(sep=<span class="hljs-string">&#x27;|&#x27;</span>))   <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;python&#x27;]</span><br><span class="hljs-built_in">print</span>(s1.rsplit(sep=<span class="hljs-string">&#x27;|&#x27;</span>, maxsplit=<span class="hljs-number">1</span>))   <span class="hljs-comment"># [&#x27;hello|world&#x27;, &#x27;python&#x27;]</span><br></code></pre></td></tr></table></figure><blockquote><p>如果字符串劈分没有设定<code>maxsplit</code>，其实<code>split</code>和<code>rsplit</code>的效果是一样的</p></blockquote><hr><h4 id="5-判断字符串操作的方法"><a href="#5-判断字符串操作的方法" class="headerlink" title="5. 判断字符串操作的方法"></a>5. 判断字符串操作的方法</h4><table><thead><tr><th>方法名称</th><th>作用</th></tr></thead><tbody><tr><td><code>isidentifier()</code></td><td>判断指定的字符串是不是合法的标识符（字母、数字、下划线）</td></tr><tr><td><code>isspace()</code></td><td>判断指定的字符串是否全部由空白字符组成（回车、换行，水平制表符）</td></tr><tr><td><code>isalpha()</code></td><td>判断指定的字符串是否全部由字母组成</td></tr><tr><td><code>isdecimal()</code></td><td>判断指定的字符串是否全部由十进制的数字组成</td></tr><tr><td><code>isnumeric()</code></td><td>判断指定的字符串是否全部由数字组成</td></tr><tr><td><code>isalnum()</code></td><td>判断指定的字符串是否全部由字母和数字组成</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断字符串操作的方法</span><br>s = <span class="hljs-string">&#x27;hello,python&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1、是否为合法标识符&#x27;</span>, s.isidentifier())   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;张三&#x27;</span>.isidentifier())      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2、是否为空白字符&#x27;</span>, s.isspace())     <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t&#x27;</span>.isspace())   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;3、是否全部为字母组成&#x27;</span>, s.isalpha())       <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;abc&#x27;</span>.isalpha())      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;4、是否全部由十进制数字组成&#x27;</span>, s.isdecimal())      <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;123&#x27;</span>.isdecimal())        <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;5、是否全部由数字组成&#x27;</span>, s.isnumeric())     <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;123123000&#x27;</span>.isnumeric())      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;四五&#x27;</span>.isnumeric())     <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Ⅱ&#x27;</span>.isnumeric())      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;6、是否全部由字母和数字组成&quot;</span>, s.isalnum())    <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;123abc&#x27;</span>.isalnum())   <span class="hljs-comment"># True</span><br><br></code></pre></td></tr></table></figure><blockquote><p>在上面的代码例子中，有几个比较特殊的地方，一个是罗马数字和汉语数字一二三并不是十进制数字，但是在判断是否由数字组成的时候，他们的返回值是<code>True</code>，就说明，他们虽然不是十进制数字，但是也是数字，系统判断为<code>True</code></p></blockquote><hr><h4 id="6-字符串操作的其它方法"><a href="#6-字符串操作的其它方法" class="headerlink" title="6. 字符串操作的其它方法"></a>6. 字符串操作的其它方法</h4><table><thead><tr><th align="center">功能</th><th align="center">方法名称</th><th>作用</th></tr></thead><tbody><tr><td align="center">字符串替换</td><td align="center"><code>replace()</code></td><td>第1个参数指定被替换的子串，第2个参数指定替换子串的字符串，该方法返回替换得到的字符串，替换前的字符串不会发生改变，调用该方法时可以通过第3个参数指定最大替换次数</td></tr><tr><td align="center">字符串合并</td><td align="center"><code>join()</code></td><td>将列表或者元组中的字符串合并为一个字符串</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串操作的其他方法</span><br><span class="hljs-string">&quot;&quot;&quot;字符串替换&quot;&quot;&quot;</span><br>s = <span class="hljs-string">&#x27;hello,python&#x27;</span><br><span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>))      <span class="hljs-comment"># hello,java</span><br>s1 = <span class="hljs-string">&#x27;hello,python,python,python,python&#x27;</span><br><span class="hljs-built_in">print</span>(s1.replace(<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># hello,java,java,python,python</span><br><br><span class="hljs-string">&quot;&quot;&quot;字符串合并&quot;&quot;&quot;</span><br>lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>]   <span class="hljs-comment"># 列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;|&#x27;</span>.join(lst))    <span class="hljs-comment"># hello|java|python</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(lst))    <span class="hljs-comment"># hellojavapython</span><br><br>t = (<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>)     <span class="hljs-comment"># 元组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(t))   <span class="hljs-comment"># hellojavapython</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>.join(<span class="hljs-string">&#x27;python&#x27;</span>))   <span class="hljs-comment"># 字符串   p*y*t*h*o*n</span><br></code></pre></td></tr></table></figure><h3 id="16-3-字符串的比较"><a href="#16-3-字符串的比较" class="headerlink" title="16.3 字符串的比较"></a>16.3 字符串的比较</h3><blockquote><p>字符串的比较操作</p></blockquote><ul><li><strong>运算符：</strong>&gt;、&gt;=、&lt;、&lt;=、==、!=</li><li><strong>比较规则：</strong>首先比较两个字符串的第一个字符，如果相等则继续比较下一个字符，依次比较下去，直到两个字符串中的字符不相等时，其比较结果就是两个字符串的比较结果，两个字符串中的所有后续字符将不再被比较</li><li><strong>比较原理：</strong>两个字符进行比较时，比较的是其<code>ordinal value</code>（原始值），调用内置函数<code>ord</code>可以得到指定字符的<code>ordinal value</code>。与内置函数<code>ord</code>对应的是内置函数<code>chr</code>，调用内置函数chr时指定<code>ordinal value</code>可以得到其对应的字符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串比较</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;apple&#x27;</span> &gt; <span class="hljs-string">&#x27;app&#x27;</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;apple&#x27;</span> &gt; <span class="hljs-string">&#x27;banana&#x27;</span>)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>), <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;b&#x27;</span>))   <span class="hljs-comment"># 97 98</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>), <span class="hljs-built_in">chr</span>(<span class="hljs-number">98</span>))     <span class="hljs-comment"># a b</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    == 与 is的区别</span><br><span class="hljs-string">    1、==比较的是value值</span><br><span class="hljs-string">    2、is比较的是id是否相等</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="16-4-字符串的切片操作"><a href="#16-4-字符串的切片操作" class="headerlink" title="16.4 字符串的切片操作"></a>16.4 字符串的切片操作</h3><blockquote><p>字符串是不可变类型</p></blockquote><ul><li>不具备增、删、改等操作</li><li>切片操作将产生新的对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串的切片</span><br>s = <span class="hljs-string">&#x27;hello,Python&#x27;</span><br>s1 = s[:<span class="hljs-number">5</span>]  <span class="hljs-comment"># 没有写起始位置，只有结束位置，默认从第一个字符0开始切</span><br>s2 = s[<span class="hljs-number">6</span>:]  <span class="hljs-comment"># 没有写结束位置，只有起始位置，默认切到最后一个字符</span><br>s3 = <span class="hljs-string">&#x27;!&#x27;</span><br>newstr = s1+s3+s2<br><span class="hljs-built_in">print</span>(s1)   <span class="hljs-comment"># hello</span><br><span class="hljs-built_in">print</span>(s2)   <span class="hljs-comment"># Python</span><br><span class="hljs-built_in">print</span>(newstr)   <span class="hljs-comment"># hello!Python</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(s))    <span class="hljs-comment"># 2243942765552</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(s1))   <span class="hljs-comment"># 2243945323888</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(s2))   <span class="hljs-comment"># 2243943173552</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(newstr))   <span class="hljs-comment"># 2324519028080</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    完整格式     </span><br><span class="hljs-string">    切片[start:end:step]</span><br><span class="hljs-string">    没有指定步长，默认步长就为1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">1</span>])     <span class="hljs-comment"># ello  从1开始截取到5（不包含5），步长为1</span><br><span class="hljs-built_in">print</span>(s[::<span class="hljs-number">2</span>])   <span class="hljs-comment"># hloPto    没有写起始，默认从0开始，没有写结束，默认到最后一个元素，步长为2</span><br><span class="hljs-built_in">print</span>(s[::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># nohtyP,olleh  默认从字符串的最后一个元素开始，到字符串第一个元素结束，以为步长为负数</span><br><span class="hljs-built_in">print</span>(s[-<span class="hljs-number">6</span>::<span class="hljs-number">1</span>]) <span class="hljs-comment"># Python    从索引为-6开始，到字符串的最后一个元素结束，步长为1</span><br></code></pre></td></tr></table></figure><h3 id="16-5-格式化字符串"><a href="#16-5-格式化字符串" class="headerlink" title="16.5 格式化字符串"></a>16.5 格式化字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 格式化字符串</span><br><span class="hljs-string">&quot;&quot;&quot;(1) % 占位符&quot;&quot;&quot;</span><br>name = <span class="hljs-string">&#x27;张三&#x27;</span><br>age = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我叫%s,今年%d岁&#x27;</span> % (name, age))   <span class="hljs-comment"># 我叫张三,今年20岁</span><br><br><span class="hljs-string">&quot;&quot;&quot;(2) &#123;&#125; 占位符&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我叫&#123;0&#125;,今年&#123;1&#125;岁&#x27;</span>.<span class="hljs-built_in">format</span>(name, age))     <span class="hljs-comment"># 我叫张三,今年20岁</span><br><br><span class="hljs-string">&quot;&quot;&quot;(3) f-string&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我叫<span class="hljs-subst">&#123;name&#125;</span>,今年<span class="hljs-subst">&#123;age&#125;</span>岁&#x27;</span>)     <span class="hljs-comment"># 我叫张三,今年20岁</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码是常见的三种格式化字符串的表示方式，第一中是利用<code>%</code>占位符，其中<code>%s</code>代表字符串，<code>%i</code>和<code>%d</code>代表整数，<code>%f</code>代表浮点数。第三中方法的使用，需要在输出语句的前面加上一个<code>f</code>，来格式化字符串</p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;第一种方法，利用%来确定宽度&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%10d&#x27;</span> % <span class="hljs-number">99</span>)  <span class="hljs-comment">#         99，这个10表示的是宽度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%.3f&#x27;</span> % <span class="hljs-number">3.1415926</span>)   <span class="hljs-comment"># 3.142，这个.3表示小数点后三位</span><br><span class="hljs-comment"># 同时表示宽度和精度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%10.3f&#x27;</span> % <span class="hljs-number">3.1415926</span>) <span class="hljs-comment">#      3.142，一共总宽度为10，小数点后三位</span><br><br><span class="hljs-string">&quot;&quot;&quot;第二种方法，利用&#123;&#125;来确定宽度&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926</span>))  <span class="hljs-comment"># 3.1415926</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:.3&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926</span>))  <span class="hljs-comment"># 3.14，:.3表示一共保留三位数字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926</span>))  <span class="hljs-comment"># 3.142，:.3f表示三位小数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#123;0:10.3f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">3.1415926</span>))    <span class="hljs-comment">#      3.142，同时表示宽度和精度</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码是来格式化数字的一些宽度和精度的，一共展示了两种比较常见的方法</p></blockquote><h3 id="16-6-字符串的编码与转码"><a href="#16-6-字符串的编码与转码" class="headerlink" title="16.6 字符串的编码与转码"></a>16.6 字符串的编码与转码</h3><blockquote><p>为什么需要字符串的编码转换</p></blockquote><p>A计算机（<code>str</code>在内存种以<code>Unicode</code>表示）——编码——&gt;   ——byte字节传输——&gt;   ——解码——&gt;  B计算机（显示）</p><blockquote><p>编码与解码的方式</p></blockquote><ul><li><strong>编码：</strong>将字符串转换成二进制数据（<code>bytes</code>）</li><li><strong>解码：</strong>将<code>bytes</code>类型的数据转换成字符串类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串的编码和解码</span><br><span class="hljs-string">&quot;&quot;&quot;编码操作&quot;&quot;&quot;</span><br>s = <span class="hljs-string">&#x27;天涯共此时&#x27;</span><br><span class="hljs-built_in">print</span>(s.encode(encoding=<span class="hljs-string">&#x27;GBK&#x27;</span>))     <span class="hljs-comment"># b&#x27;\xcc\xec\xd1\xc4\xb9\xb2\xb4\xcb\xca\xb1&#x27;</span><br><span class="hljs-comment"># 在GBK这种编码格式种，一个中文占两个字节</span><br><span class="hljs-built_in">print</span>(s.encode(encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>))   <span class="hljs-comment"># b&#x27;\xe5\xa4\xa9\xe6\xb6\xaf\xe5\x85\xb1\xe6\xad\xa4\xe6\x97\xb6&#x27;</span><br><span class="hljs-comment"># 在UTF-8这种编码格式种，一个中文占三个字节</span><br><br><span class="hljs-string">&quot;&quot;&quot;解码操作&quot;&quot;&quot;</span><br>byte = s.encode(encoding=<span class="hljs-string">&#x27;GBK&#x27;</span>)<br><span class="hljs-built_in">print</span>(byte.decode(encoding=<span class="hljs-string">&#x27;GBK&#x27;</span>))  <span class="hljs-comment"># 天涯共此时</span><br><br>byte = s.encode(encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(byte.decode(encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>))  <span class="hljs-comment"># 天涯共此时</span><br></code></pre></td></tr></table></figure><blockquote><p>上面的代码，就是字符串的编码和解码的操作，<code>encode</code>为编码，<code>decode</code>为解码，需要注意的是编码和解码的格式必须一一对应</p></blockquote><h2 id="17-函数"><a href="#17-函数" class="headerlink" title="17. 函数"></a>17. 函数</h2><h3 id="17-1-函数的创建和调用"><a href="#17-1-函数的创建和调用" class="headerlink" title="17.1 函数的创建和调用"></a>17.1 函数的创建和调用</h3><blockquote><p>什么是函数</p></blockquote><ul><li>函数就是执行特定任何以完成特定功能的一段代码</li></ul><blockquote><p>为什么需要函数</p></blockquote><ul><li>复用代码</li><li>隐藏实现细节</li><li>提高可维护性</li><li>提高可读性便于调试</li></ul><blockquote><p>函数的创建</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> 函数名(<span class="hljs-params">[输入参数]</span>) ：</span><br><span class="hljs-function">函数体</span><br><span class="hljs-function">[<span class="hljs-title">return</span> <span class="hljs-title">xxx</span>]</span><br></code></pre></td></tr></table></figure><ul><li>函数的创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数的创建</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>(<span class="hljs-params">a, b</span>):</span><br>    c = a + b<br>    <span class="hljs-keyword">return</span> c<br></code></pre></td></tr></table></figure><ul><li>函数的调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数的调用</span><br>result = calc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><ol><li>跳到定义函数的函数体内</li><li>执行函数体</li><li>跳到函数的调用处</li><li>继续执行下一条语句</li></ol><h3 id="17-2-函数的参数传递"><a href="#17-2-函数的参数传递" class="headerlink" title="17.2 函数的参数传递"></a>17.2 函数的参数传递</h3><ul><li>位置实参<ul><li>根据形参对应的位置进行实参传递</li></ul></li><li>关键字实参<ul><li>根据形参名称进行实参传递</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数的创建</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">calc</span>(<span class="hljs-params">a, b</span>):</span>     <span class="hljs-comment"># a,b称为形式参数，简称形参，形参的位置在函数的定义处</span><br>    c = a + b<br>    <span class="hljs-keyword">return</span> c<br><br><span class="hljs-comment"># 函数的调用</span><br>result = calc(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)   <span class="hljs-comment"># 10，20称为实际参数，简称实参，实参的位置是函数的调用处</span><br><span class="hljs-built_in">print</span>(result)<br><br>res = calc(b=<span class="hljs-number">10</span>, a=<span class="hljs-number">20</span>)  <span class="hljs-comment">#  =左侧的变量的名称为关键字，采用关键字传参</span><br><span class="hljs-built_in">print</span>(res)  <span class="hljs-comment"># 30,虽然结果都一样，但是传递参数的值是不一样的，这里的b的10就是传给形参b了，a的20就是传给形参a了</span><br></code></pre></td></tr></table></figure><blockquote><p>函数调用的参数传递内存分析</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">arg1, arg2</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arg1&#x27;</span>, arg1)     <span class="hljs-comment"># arg1 11</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arg2&#x27;</span>, arg2)     <span class="hljs-comment"># arg2 [22, 33, 44]</span><br>    arg1 = <span class="hljs-number">100</span><br>    arg2.append(<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arg1&#x27;</span>, arg1)     <span class="hljs-comment"># arg1 100</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;arg2&#x27;</span>, arg2)     <span class="hljs-comment"># arg2 [22, 33, 44, 10]</span><br><br><br>n1 = <span class="hljs-number">11</span><br>n2 = [<span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n1&#x27;</span>, n1)     <span class="hljs-comment"># n1 11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n2&#x27;</span>, n2)     <span class="hljs-comment"># n2 [22, 33, 44]</span><br>fun(n1, n2)  <span class="hljs-comment"># 位置传参</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n1&#x27;</span>, n1)     <span class="hljs-comment"># n1 11</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n2&#x27;</span>, n2)     <span class="hljs-comment"># n2 [22, 33, 44, 10]</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">在函数的调用过程中，进行参数的传递</span><br><span class="hljs-string">如果是不可变对象，在函数体的修改不会影响实参的值    arg1的修改为100，不会影响n1的值</span><br><span class="hljs-string">如果是可变对象，在函数体内的修改会影响实参的值     arg2的修改，append(10),会影响n2的值</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="17-3-函数的返回值"><a href="#17-3-函数的返回值" class="headerlink" title="17.3 函数的返回值"></a>17.3 函数的返回值</h3><ul><li>函数返回多个值时，结果为元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数的返回值</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">num</span>):</span><br>    odd = []  <span class="hljs-comment"># 存奇数</span><br>    even = []  <span class="hljs-comment"># 存偶数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> num:<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span>:<br>            odd.append(i)<br>        <span class="hljs-keyword">else</span>:<br>            even.append(i)<br>    <span class="hljs-keyword">return</span> odd, even<br><br><br><span class="hljs-comment"># 函数的调用</span><br>lst = [<span class="hljs-number">10</span>, <span class="hljs-number">29</span>, <span class="hljs-number">34</span>, <span class="hljs-number">23</span>, <span class="hljs-number">44</span>, <span class="hljs-number">53</span>, <span class="hljs-number">55</span>]<br><span class="hljs-built_in">print</span>(fun(lst))  <span class="hljs-comment"># ([29, 23, 53, 55], [10, 34, 44])</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">函数的返回值</span><br><span class="hljs-string">    （1）如果函数没有返回值【函数执行完毕之后，不需要给调用处提供数据】 return可以省略不写</span><br><span class="hljs-string">    （2）函数的返回值，如果是1个，直接返回类型</span><br><span class="hljs-string">    （3）函数的返回值，如果是多个，返回的结果为元组</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun1</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-comment"># return</span><br><br><br>fun1()      <span class="hljs-comment"># hello</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun2</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span><br><br><br>res = fun2()<br><span class="hljs-built_in">print</span>(res)      <span class="hljs-comment"># hello</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun3</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span><br><br><br><span class="hljs-built_in">print</span>(fun3())   <span class="hljs-comment"># (&#x27;hello&#x27;, &#x27;world&#x27;)</span><br><br><span class="hljs-string">&quot;&quot;&quot;函数在定义时，是否需要返回值，视情况而定&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>函数在定义时，是否需要返回值，视情况而定，如果需要返回值，就写上返回值，需要注意的就是，<strong>返回多个值的时候，返回的类型为元组</strong></p></blockquote><h3 id="17-4-函数的参数定义"><a href="#17-4-函数的参数定义" class="headerlink" title="17.4 函数的参数定义"></a>17.4 函数的参数定义</h3><ul><li>函数定义时，给形参设置默认值，只有与默认值不符的时候才需要传递实参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a, b=<span class="hljs-number">10</span></span>):</span>   <span class="hljs-comment"># b称为默认值参数</span><br>    <span class="hljs-built_in">print</span>(a, b)<br><br><br><span class="hljs-comment"># 函数的调用</span><br>fun(<span class="hljs-number">100</span>)    <span class="hljs-comment"># 100 10</span><br>fun(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>)     <span class="hljs-comment"># 20 30</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码，说明了如果对形参设定了默认值，而传递参数的时候，只有和默认值不符合的时候才会传递这个实参，例如传递<code>100</code>的时候，不影响<code>b</code>的默认值，则不对<code>b</code>进行传参，仍为<code>10</code>。</p></blockquote><hr><ul><li>个位可变的位置参数<ul><li>定义函数时，可能无法事先确定传递的位置实参的个数时，使用可变的位置参数</li><li>使用<code>*</code>定义个人可变的位置形参</li><li>结果为一个元组</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">*args</span>):</span>     <span class="hljs-comment"># 函数定义时，是可以变化的位置参数</span><br>    <span class="hljs-built_in">print</span>(args)<br><br><br>fun(<span class="hljs-number">10</span>)             <span class="hljs-comment"># (10,)</span><br>fun(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>)         <span class="hljs-comment"># (10, 30)</span><br>fun(<span class="hljs-number">30</span>, <span class="hljs-number">29</span>, <span class="hljs-number">40</span>)     <span class="hljs-comment"># (30, 29, 40)</span><br></code></pre></td></tr></table></figure><hr><ul><li>个数可变的关键字形参<ul><li>定义函数时，无法事先确定传递的关键字实参的个数时，使用可变的关键字形参</li><li>使用<code>**</code>定义个数可变的关键字形参</li><li>结果为一个字典</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">**args</span>):</span><br>    <span class="hljs-built_in">print</span>(args)<br><br><br>fun(a=<span class="hljs-number">10</span>)               <span class="hljs-comment"># &#123;&#x27;a&#x27;: 10&#125;</span><br>fun(a=<span class="hljs-number">20</span>, b=<span class="hljs-number">30</span>, c=<span class="hljs-number">40</span>)   <span class="hljs-comment"># &#123;&#x27;a&#x27;: 20, &#x27;b&#x27;: 30, &#x27;c&#x27;: 40&#125;</span><br><br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">def fun2(*args, *a):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">以上代码，程序会报错，可变的位置参数，只能是1个</span><br><span class="hljs-string"></span><br><span class="hljs-string">def fun2(**args, **a):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">以上代码，程序会报错，个数可变的关键字参数，只能是1个</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun2</span>(<span class="hljs-params">*args1, **args2</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">def fun3(**args1, *args):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">    在一个函数的定义过程中，既有个数可变的关键字形参，也有个数可变的位置形参</span><br><span class="hljs-string">    要求：个数可变的位置形参，放在个数可变的关键字形参前面</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码是函数定义的参数定义的一个特殊情况，如果又有关键字形参也有位置形参，那就要求个数可变的位置形参，放在个数可变的关键字形参的前面</p></blockquote><hr><table><thead><tr><th align="center">序号</th><th>参数的类型</th><th align="center">函数的定义</th><th align="center">函数的调用</th><th>备注</th></tr></thead><tbody><tr><td align="center">1.1</td><td>位置实参</td><td align="center"></td><td align="center">√</td><td></td></tr><tr><td align="center">1.2</td><td>将序列中的每个元素都转换成位置实参</td><td align="center"></td><td align="center">√</td><td>使用<code>*</code></td></tr><tr><td align="center">2.1</td><td>关键字实参</td><td align="center"></td><td align="center">√</td><td></td></tr><tr><td align="center">2.2</td><td>将序列中的每个键值对都转换为关键字实参</td><td align="center"></td><td align="center">√</td><td>使用<code>**</code></td></tr><tr><td align="center">3</td><td>默认值形参</td><td align="center">√</td><td align="center"></td><td></td></tr><tr><td align="center">4</td><td>关键字形参</td><td align="center">√</td><td align="center"></td><td>使用<code>*</code></td></tr><tr><td align="center">5</td><td>个数可变的位置形参</td><td align="center">√</td><td align="center"></td><td>使用<code>*</code></td></tr><tr><td align="center">6</td><td>个数可变的关键字形参</td><td align="center">√</td><td align="center"></td><td>使用<code>**</code></td></tr></tbody></table><blockquote><p>函数调用的时候的参数传递</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a, b, c</span>):</span>       <span class="hljs-comment"># a,b,c在函数的定义处，所以是形式参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a=&quot;</span>, a, <span class="hljs-string">&#x27;b=&#x27;</span>, b, <span class="hljs-string">&#x27;c=&#x27;</span>, c)<br><br><span class="hljs-comment"># 函数的调用</span><br>fun(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)     <span class="hljs-comment"># 函数调用时的参数传递，称为位置传参</span><br>lst = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>]<br><br>fun(*lst)   <span class="hljs-comment"># 在函数调用时，将列表中的每个元素都转换成位置实参传入</span><br><br>fun(a=<span class="hljs-number">100</span>, c=<span class="hljs-number">300</span>, b=<span class="hljs-number">200</span>)    <span class="hljs-comment"># 函数的调用，所以是关键字传参</span><br><br>dic = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">111</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">222</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">333</span>&#125;<br>fun(**dic)      <span class="hljs-comment"># 在函数调用时，将字典中的键值对都转换成关键字实参传入</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>函数调用的时候，函数的定义形参问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a, b=<span class="hljs-number">10</span></span>):</span>   <span class="hljs-comment"># b是在函数的定义处，所以b是形参，而且进行了赋值，所以b称为默认值形参</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a=&#x27;</span>, a, <span class="hljs-string">&#x27;b=&#x27;</span>, b)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun2</span>(<span class="hljs-params">*args</span>):</span>    <span class="hljs-comment"># 个数可变的位置形参</span><br>    <span class="hljs-built_in">print</span>(args)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun3</span>(<span class="hljs-params">**args</span>):</span>    <span class="hljs-comment"># 个数可变的关键字形参</span><br>    <span class="hljs-built_in">print</span>(args)<br><br>fun2(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>)    <span class="hljs-comment"># (10, 20, 30, 40)</span><br>fun3(a=<span class="hljs-number">11</span>, b=<span class="hljs-number">12</span>, c=<span class="hljs-number">143</span>, d=<span class="hljs-number">15</span>)   <span class="hljs-comment"># &#123;&#x27;a&#x27;: 11, &#x27;b&#x27;: 12, &#x27;c&#x27;: 143, &#x27;d&#x27;: 15&#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun4</span>(<span class="hljs-params">a, b, c, d</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a=&quot;</span>, a, <span class="hljs-string">&#x27;b=&#x27;</span>, b, <span class="hljs-string">&#x27;c=&#x27;</span>, c, <span class="hljs-string">&#x27;d=&#x27;</span>, d)<br><br><span class="hljs-comment"># 调用fun4函数</span><br>fun4(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>)    <span class="hljs-comment"># 位置实参传递</span><br>fun4(a=<span class="hljs-number">10</span>, b=<span class="hljs-number">20</span>, c=<span class="hljs-number">30</span>, d=<span class="hljs-number">40</span>)    <span class="hljs-comment"># 关键字实参传递</span><br>fun4(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, c=<span class="hljs-number">30</span>, d=<span class="hljs-number">40</span>)    <span class="hljs-comment"># 前两个参数，采用的是位置实参传递，而c,d采用的是关键字实参传递</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">需求，c,d只能采用关键字实参传递</span><br><span class="hljs-string">def fun4(a, b, *, c, d):    # 从*之后的参数，在函数调用的时候，都必须采用关键字参数传递</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot;函数定义时的形参顺序问题&quot;&quot;&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun5</span>(<span class="hljs-params">a, b, *, c, d, **args</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun6</span>(<span class="hljs-params">*args, **args2</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun7</span>(<span class="hljs-params">a, b=<span class="hljs-number">10</span>, *args, **args2</span>):</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="17-5-变量的作用域"><a href="#17-5-变量的作用域" class="headerlink" title="17.5 变量的作用域"></a>17.5 变量的作用域</h3><ul><li>程序代码能访问该变量的区域</li><li>根据变量的有效范围可以分为<ul><li>局部变量<ul><li>在函数内定义并使用的变量，只在函数内部有效，局部变量使用global声明，这个变量就成为全局变量</li></ul></li><li>全局变量<ul><li>函数体外声明的变量，可作用于函数内外</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a, b</span>):</span><br>    c = a+b     <span class="hljs-comment"># C成为局部变量，因为C是再函数体内进行定义的变量，a,b为函数的形参，作用范围也是函数内部，相当于局部变量</span><br>    <span class="hljs-built_in">print</span>(c)<br><br>name = <span class="hljs-string">&#x27;张三&#x27;</span>     <span class="hljs-comment"># name的作用范围为函数内部和外部都可以使用，被称为全局变量</span><br><span class="hljs-built_in">print</span>(name)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun2</span>():</span><br>    <span class="hljs-built_in">print</span>(name)<br><br><span class="hljs-comment"># 调用函数</span><br>fun2()      <span class="hljs-comment"># 张三</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun3</span>():</span><br>    <span class="hljs-keyword">global</span> age      <span class="hljs-comment"># 函数内部定义的变量，局部变量，局部变量使用global声明，变量就变成全局变量了</span><br>    age = <span class="hljs-number">20</span><br>    <span class="hljs-built_in">print</span>(age)<br><br>fun3()<br><span class="hljs-built_in">print</span>(age)      <span class="hljs-comment"># 20</span><br></code></pre></td></tr></table></figure><h3 id="17-6-递归函数"><a href="#17-6-递归函数" class="headerlink" title="17.6 递归函数"></a>17.6 递归函数</h3><blockquote><p>什么是递归函数</p></blockquote><ul><li>如果在一个函数的函数体内调用了该函数本身，这个函数就称为<strong>递归函数</strong></li></ul><blockquote><p>递归的组成部分</p></blockquote><ul><li>递归调用与递归终止条件</li></ul><blockquote><p>递归的调用过程</p></blockquote><ul><li>每递归调用一次函数，都会在栈内存分配一个栈帧</li><li>每执行完一次函数，都会释放相应的空间</li></ul><blockquote><p>递归的优缺点</p></blockquote><ul><li><strong>缺点：</strong>占用内存多，效率底下</li><li><strong>优点：</strong>思路和代码简单</li></ul><p>使用递归来计算阶乘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fac</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> n*fac(n-<span class="hljs-number">1</span>)<br><br><span class="hljs-built_in">print</span>(fac(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>使用递归来计算斐波那契数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>):</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> n == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fib(n-<span class="hljs-number">1</span>)+fib(n-<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 斐波那契数列在第6位上的数字</span><br><span class="hljs-built_in">print</span>(fib(<span class="hljs-number">6</span>))<br><br><span class="hljs-comment"># 输出这个数列的前6位上的数字</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    <span class="hljs-built_in">print</span>(fib(i))<br><br></code></pre></td></tr></table></figure><h2 id="18-Bug"><a href="#18-Bug" class="headerlink" title="18. Bug"></a>18. Bug</h2><h3 id="18-1-Bug的由来及分类"><a href="#18-1-Bug的由来及分类" class="headerlink" title="18.1 Bug的由来及分类"></a>18.1 Bug的由来及分类</h3><blockquote><p>马克2号当年计算机出现问题，始终没有修理好，最终打开计算机，发现里面有一只飞蛾，便有了Bug</p></blockquote><ul><li>世界上第一部万用计算机的进化版-马克2号（Mark Ⅱ）</li></ul><blockquote><p>bug的常见类型</p></blockquote><ul><li>粗心导致的语法错误 <code>SyntaxError</code></li><li>知识点不熟练导致的错误<ul><li>（1） 索引越界问题IndexError</li><li><code>lst = [11,22,33,44]</code></li><li><code>print(lst[4])</code>应该输出<code>lst[3]</code></li><li>（2） append()方法的使用掌握不熟练</li><li><code>lst = []</code></li><li><code>lst = append(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;)</code>  append是列表的方法，在调用的时候应该是<code>lst.append(&#39;A&#39;)</code></li><li><code>print(lst)</code>并且<code>append</code>方法一次只能添加一个元素</li></ul></li></ul><h3 id="18-2-不同异常类型的处理方式"><a href="#18-2-不同异常类型的处理方式" class="headerlink" title="18.2 不同异常类型的处理方式"></a>18.2 不同异常类型的处理方式</h3><ul><li><p>粗心导致错误的自查宝典</p><ul><li>漏了<strong>末尾的冒号</strong>，如if语句、循环语句、else子句等</li><li><strong>缩进错误</strong>，该缩进的没缩进，不该缩进的瞎缩进</li><li>把<strong>英文符号</strong>写出<strong>中文符号</strong>，比如说：冒号、引号、括号</li><li>字符串拼接的时候，把<strong>字符串和数字</strong>拼接在一起</li><li>没有<strong>定义变量</strong>，比如说while的循环条件的变量</li><li>“<code>==</code>”比较运算符和“<code>=</code>”赋值运算符的混用</li></ul></li><li><p>思路不清晰导致的问题解决方案</p><ul><li>使用<code>print()</code>函数</li><li>使用“<code>#</code>”暂时注解部分代码 </li></ul></li><li><p>被动掉坑：程序代码逻辑没有错，只是因为用户错误操作或者一些“例外情况”而导致的程序崩溃</p><ul><li>被动掉坑问题的解决方案<ul><li>Python提供了异常处理机制，可以在异常出现的时候及时捕获，然后内部“消化”，让程序继续运行</li></ul></li><li>多个except结构<ul><li>捕获异常的顺序按照先子类后父类的顺序，为了避免遗漏可能出现的异常，可以在最后增加BaseException</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能会出现异常的代码<br><span class="hljs-keyword">except</span> xxx(异常类型):<br>    报错后执行的代码<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第一个整数：&#x27;</span>))<br>    b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第二个整数：&#x27;</span>))<br>    result = a/b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结果为：&#x27;</span>, result)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，除数不允许为0&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;程序结束&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>上面的代码是只处理一个异常，所以只使用了一个<code>except</code></p></blockquote><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第一个整数：&#x27;</span>))<br>    b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第二个整数：&#x27;</span>))<br>    result = a/b<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结果为：&#x27;</span>, result)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，除数不允许为0&#x27;</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不能将字符串转换成数字&#x27;</span>)<br><span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;程序结束&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>上面的代码，想要处理多个异常，所以加了很多个except分支，从而判断异常的类型</p></blockquote><h3 id="18-3-异常处理机制"><a href="#18-3-异常处理机制" class="headerlink" title="18.3 异常处理机制"></a>18.3 异常处理机制</h3><ul><li><code>try...except...else</code>结构<ul><li>如果<code>try</code>块中没有抛出异常，则执行<code>else</code>块，如果<code>try</code>中抛出异常，则执行<code>except</code>块</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第一个整数：&#x27;</span>))<br>    b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第二个整数：&#x27;</span>))<br>    result = a/b<br><span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结果为：&#x27;</span>, result)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;程序结束&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><ul><li><code>try...except...else...finally</code>结构<ul><li><code>finally</code>块无论是否发生异常都会被执行，能常用来释放<code>try</code>块中申请的资源</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第一个整数：&#x27;</span>))<br>    b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入第二个整数：&#x27;</span>))<br>    result = a/b<br><span class="hljs-keyword">except</span> BaseException <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;结果为：&#x27;</span>, result)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无论是否残生异常，总会被执行的代码&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;程序结束&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><ul><li>Python常见的异常错误</li></ul><table><thead><tr><th align="center">序号</th><th align="center">异常类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>ZeroDivisionError</code></td><td>除（或取模）零（所有数据类型）</td></tr><tr><td align="center">2</td><td align="center"><code>IndexError</code></td><td>序列中没有此索引（<code>index</code>）</td></tr><tr><td align="center">3</td><td align="center"><code>KeyError</code></td><td>映射中没有这个键</td></tr><tr><td align="center">4</td><td align="center"><code>NameError</code></td><td>未声明/初始化对象（没有属性）</td></tr><tr><td align="center">5</td><td align="center"><code>SyntaxError</code></td><td>python语法错误</td></tr><tr><td align="center">6</td><td align="center"><code>ValueError</code></td><td>传入无效的参数</td></tr></tbody></table><hr><ul><li><code>traceback</code>模块<ul><li>使用traceback模块打印异常信息</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> traceback<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span>:<br>    traceback.print_exc()<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">-----------------------</span><br><span class="hljs-string">Traceback (most recent call last):</span><br><span class="hljs-string">  File &quot;D:\PythonPractice\PyTest\Test01.py&quot;, line 820, in &lt;module&gt;</span><br><span class="hljs-string">    print(1/0)</span><br><span class="hljs-string">ZeroDivisionError: division by zero</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="18-4-PyCharm的调试模式"><a href="#18-4-PyCharm的调试模式" class="headerlink" title="18.4 PyCharm的调试模式"></a>18.4 PyCharm的调试模式</h3><ul><li>断点<ul><li>程序运行到此处，暂时挂起，停止执行，此时可以详细观察程序的运行情况，方便做出进一步判断</li></ul></li><li>进入调试试图<ul><li>进入调试试图的三种方式<ul><li><ol><li>单机工具栏上的按钮</li><li>右键单击编辑区：点击：<code>debug‘模块名’</code></li><li>快捷键：<code>shift+F9</code></li></ol></li></ul></li></ul></li></ul><h2 id="19-编程的两大思想"><a href="#19-编程的两大思想" class="headerlink" title="19. 编程的两大思想"></a>19. 编程的两大思想</h2><h3 id="19-1-两大编程思想"><a href="#19-1-两大编程思想" class="headerlink" title="19.1 两大编程思想"></a>19.1 两大编程思想</h3><ul><li>面向过程：事物比较简单，可以用线性的思维去解决</li><li>面向对象：事物比较复杂，使用简单的线性思维无法解决</li><li>共同点：面向对象和面向过程都是解决实际问题的一种思维方式</li></ul><blockquote><p>二者相辅相成，并不是对立的</p><p>解决复杂问题，通过面向对象方式便于我们从宏观上把握事物之间复杂的关系，方便我们分析整个系统，具体到围观操作，仍然使用面向过程方式来处理</p></blockquote><h3 id="19-2-类和对象的创建"><a href="#19-2-类和对象的创建" class="headerlink" title="19.2 类和对象的创建"></a>19.2 类和对象的创建</h3><ul><li>类<ul><li>类别：分门别类，物以类聚，人类、鸟类、动物类、植物类</li><li>类是多个类似事物组成的群体的统称。能够帮助我们快速理解和判断事物的性质</li></ul></li></ul><hr><ul><li>数据类型<ul><li>不同的数据类型属于不同的类</li><li>使用内置函数<code>type()</code>查看数据类型</li></ul></li></ul><hr><ul><li>对象<ul><li>100、99都是<code>int</code>类之下包含的相似的不同个例，这个个例专业术语称为实例或者对象</li><li>一切皆对象、万物皆对象</li></ul></li></ul><hr><ul><li>创建类的语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> :</span><span class="hljs-comment"># student为类的名称，有一个或多个单词组成，每个单词的首字母大写，其余小写（默认规则）</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><hr><ul><li>类的组成<ul><li>类属性</li><li>实例方法</li><li>静态方法</li><li>类方法</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span>:</span><br>    native_plase = <span class="hljs-string">&#x27;河南&#x27;</span>     <span class="hljs-comment"># 直接写在类里面的变量，称为类属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span>   <span class="hljs-comment"># init初始化方法</span><br>        self.name = name    <span class="hljs-comment"># 赋值操作，将局部变量的name的值赋给实体属性</span><br>        self.age = age      <span class="hljs-comment"># self、name称为实体属性</span><br>    <span class="hljs-comment"># 实例方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">info</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字叫做：&#x27;</span>, self.name, <span class="hljs-string">&#x27;年龄为：&#x27;</span>, self.age)<br>    <span class="hljs-comment"># 类方法</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cm</span>(<span class="hljs-params">cls</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;类方法&#x27;</span>)<br>    <span class="hljs-comment"># 静态方法</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sm</span>():</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;静态方法&#x27;</span>)<br><br><span class="hljs-comment"># 在类之外定义的称为函数，在类之内定义的称为方法</span><br></code></pre></td></tr></table></figure><hr><ul><li>对象的创建<ul><li>对象的创建又称为类的实例化</li><li>语法：<code>实例名 = 类名()</code></li><li>意义：有了实例，就可以调用类中的内容</li></ul></li></ul><hr><h3 id="19-3-类对象与类属性"><a href="#19-3-类对象与类属性" class="headerlink" title="19.3 类对象与类属性"></a>19.3 类对象与类属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建student类的实例对象</span><br>stu = student(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">19</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(stu))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(stu))<br><span class="hljs-built_in">print</span>(stu.name)<br><span class="hljs-built_in">print</span>(stu.age)<br>stu.info()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">2877277908752</span><br><span class="hljs-string">&lt;class &#x27;__main__.student&#x27;&gt;</span><br><span class="hljs-string">张三</span><br><span class="hljs-string">19</span><br><span class="hljs-string">我的名字叫做： 张三 年龄为： 19</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>在调用方法的时候，有一些不一样的方式，第一种就是<code>对象名.方法名</code>，如<code>stu1.eat()</code>，第二种是<code>类名.方法名(类的对象)</code>，如<code>student.eat(stu1)</code>，这里的类的对象，其实就是指在声明中的<code>self</code></p></blockquote><h3 id="19-4-类方法与静态方法"><a href="#19-4-类方法与静态方法" class="headerlink" title="19.4 类方法与静态方法"></a>19.4 类方法与静态方法</h3><ul><li><strong>类属性：</strong>类中方法外的变量称为类属性，被该类的所有对象所共享</li><li><strong>类方法：</strong>使用<code>@classmethod</code>修饰的方法，使用类名直接访问的方法</li><li><strong>静态方法：</strong>使用<code>@staticmethod</code>修饰的主发，使用类名直接访问的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(student.native_place)<span class="hljs-comment"># 访问类属性</span><br>student.cm()<span class="hljs-comment"># 调用类方法</span><br>student.sm()<span class="hljs-comment"># 调用静态方法</span><br></code></pre></td></tr></table></figure><hr><p>动态绑定属性和方法</p><ul><li>Python是动态语言，在创建对象之后，可以动态地绑定属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span>  <span class="hljs-comment"># 初始化方法</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.name+<span class="hljs-string">&#x27;在吃饭&#x27;</span>)<br><br>stu1 = Student(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>)<br>stu2 = Student(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(stu1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(stu2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------为stu2动态绑定性别属性---------------&#x27;</span>)<br>stu2.gender = <span class="hljs-string">&#x27;女&#x27;</span>       <span class="hljs-comment"># 动态绑定属性</span><br><span class="hljs-built_in">print</span>(stu1.name, stu1.age)<br><span class="hljs-built_in">print</span>(stu2.name, stu2.age, stu2.gender)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;定义在类之外的，称为函数&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------为stu2动态绑定方法---------------&#x27;</span>)<br>stu1.show = show    <span class="hljs-comment"># 动态绑定方法</span><br>stu1.show()<br></code></pre></td></tr></table></figure><ul><li>编程实现<ul><li>面向对象</li><li>面向过程</li></ul></li><li>类对象<code>class</code><ul><li>类属性</li><li>类方法</li><li>实例方法</li><li>静态方法</li></ul></li><li>实例对象<ul><li>类名()，创建实例对象</li><li>动态绑定属性</li><li>动态绑定方法</li></ul></li></ul><h2 id="20-面向对象的三大特性"><a href="#20-面向对象的三大特性" class="headerlink" title="20. 面向对象的三大特性"></a>20. 面向对象的三大特性</h2><blockquote><p>面向对象的三大特性</p></blockquote><ul><li><strong>封装：</strong>提高程序的安全性<ul><li>将数据（属性）和行为（方法）包装到类对象中。在方法内部对属性进行操作，在类对象的外部调用方法。这样，无需关心方法内部的具体实现细节，从而隔离了复杂类</li><li>在Python中没有专门的修饰符用于属性的私有，如果该属性不希望在类对象外部被访问，前边使用两个”_”</li></ul></li><li><strong>继承：</strong>提高代码的复用性</li><li><strong>多态：</strong>提高程序的可扩展性和可维护性</li></ul><h3 id="20-1-封装"><a href="#20-1-封装" class="headerlink" title="20.1 封装"></a>20.1 封装</h3><p>封装就是将一些属性或者方法封装在类内，使得类内可以访问，类外不能访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.__age = age      <span class="hljs-comment"># 年龄不希望在类的外部被使用，所以加了两个_</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self.name, self.__age)<br><br>stu = Student(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>)<br>stu.show()<br><span class="hljs-comment"># 在类的外面使用name和age</span><br><span class="hljs-built_in">print</span>(stu.name)<br><span class="hljs-comment"># print(stu.__age)    # AttributeError: &#x27;Student&#x27; object has no attribute &#x27;__age&#x27;</span><br><span class="hljs-comment"># print(dir(stu))     # 打印出来stu的所有属性</span><br><span class="hljs-built_in">print</span>(stu._Student__age)    <span class="hljs-comment"># 在类的外部可以通过 _Student__age 进行访问</span><br></code></pre></td></tr></table></figure><h3 id="20-2-继承"><a href="#20-2-继承" class="headerlink" title="20.2 继承"></a>20.2 继承</h3><ul><li>语法格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> 子类类名(<span class="hljs-params">父类<span class="hljs-number">1</span>, 父类<span class="hljs-number">2.</span>..</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><ul><li>如果一个类没有继承任何类，则默认继承object</li><li>python支持多继承</li><li>定义子类时，必须在其构造函数中调用父类的构造函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义人类父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">info</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;姓名：&#123;0&#125;, 年龄：&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.name, self.age))<br><span class="hljs-comment"># 定义学生子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">Person</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, score</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self.score = score<br><br><span class="hljs-comment"># 定义老师子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params">Person</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, teacherFyear</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self.teacherFyear = teacherFyear<br><br><span class="hljs-comment"># 测试</span><br>stu = Student(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>)<br>stu.info()<br>teacher = Teacher(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">10</span>)<br>teacher.info()<br></code></pre></td></tr></table></figure><h3 id="20-3-方法重写"><a href="#20-3-方法重写" class="headerlink" title="20.3 方法重写"></a>20.3 方法重写</h3><ul><li>如果子类对继承自父类的某个属性或方法不太满意，可以从子类中对其（方法体）进行重新编写</li><li>子类重写后的方法中可以通过<code>super().xxx()</code>调用父类中被重写的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">info</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;姓名：&#123;0&#125;, 年龄：&#123;1&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.name, self.age))<br><span class="hljs-comment"># 定义学生子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>(<span class="hljs-params">Person</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, score</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self.score = score<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">info</span>(<span class="hljs-params">self</span>):</span>         <span class="hljs-comment"># 子类方法重写</span><br>        <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;学生分数：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.score))<br><span class="hljs-comment"># 定义老师子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params">Person</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age, teacherFyear</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(name, age)<br>        self.teacherFyear = teacherFyear<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">info</span>(<span class="hljs-params">self</span>):</span>         <span class="hljs-comment"># 子类方法重写</span><br>        <span class="hljs-built_in">super</span>().info()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;教师年龄：&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.teacherFyear))<br><span class="hljs-comment"># 测试</span><br>stu = Student(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>)<br>stu.info()<br>teacher = Teacher(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">34</span>, <span class="hljs-number">10</span>)<br>teacher.info()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">姓名：张三, 年龄：20</span><br><span class="hljs-string">学生分数：90</span><br><span class="hljs-string">姓名：李四, 年龄：34</span><br><span class="hljs-string">教师年龄：10</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="20-4-object类"><a href="#20-4-object类" class="headerlink" title="20.4 object类"></a>20.4 <code>object</code>类</h3><ul><li><code>boject</code>类是所有类的父亲，因此所有类都有<code>object</code>类的属性和方法</li><li>内置函数<code>dir()</code>可以查看指定对象所有属性</li><li><code>object</code>有一个<code>__str__()</code>方法，用于返回一个对于“对象的描述”，对应于内置函数<code>str()</code>经常用于<code>print()</code>方法，帮助我们查看对象的信息，所以我们经常会对<code>__str__()</code>进行重写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>      <span class="hljs-comment"># 重写str方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;我的名字是&#123;0&#125;，今年&#123;1&#125;岁了&#x27;</span>.<span class="hljs-built_in">format</span>(self.name, self.age)<br>stu = Student(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(stu))     <span class="hljs-comment"># 内置函数，查看指定对象的所有属性</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(stu)      <span class="hljs-comment"># 默认会调用__str__()这样的方法</span><br><span class="hljs-comment"># 我的名字是张三，今年20岁了</span><br></code></pre></td></tr></table></figure><blockquote><p>我们经常会在定义一个类之后，重写他的<code>__str__()</code>方法，来对类进行一个描述</p></blockquote><h3 id="20-5-多态"><a href="#20-5-多态" class="headerlink" title="20.5 多态"></a>20.5 多态</h3><ul><li>简单的说，多态就是“具有多种形态”，它指的是：即便不知道一个变量所引用的对象到底是什么类型，仍然可以通过这个变量调用方法，在运行过程中根据变量所引用对象的类型，动态决定调用哪个对象中的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物会吃&#x27;</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">Animal</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗吃骨头&#x27;</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>(<span class="hljs-params">Animal</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;猫吃鱼&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;人吃五谷杂粮&#x27;</span>)<br><br><span class="hljs-comment"># 定义一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fun</span>(<span class="hljs-params">obj</span>):</span><br>    obj.eat()<br><br><span class="hljs-comment"># 开始调用函数</span><br>fun(Cat())<br>fun(Dog())<br>fun(Animal())<br>fun(Person())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">猫吃鱼</span><br><span class="hljs-string">狗吃骨头</span><br><span class="hljs-string">动物会吃</span><br><span class="hljs-string">人吃五谷杂粮</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>静态语言和动态语言关于多态的区别<ul><li>静态语言实现多态的三个必要条件<ul><li>继承</li><li>方法重写</li><li>父类引用指向子类对象</li></ul></li><li>动态语言的多态崇尚“鸭子类型”，当看到一只鸟走起来像鸭子、游泳起来像鸭子、收起来也想鸭子，那么这只鸟就可以被称为鸭子。在鸭子类型中，不需要关心对象是什么类型，到底是不是鸭子，只关心对象的行为</li></ul></li></ul><h3 id="20-6-特殊方法和特殊属性"><a href="#20-6-特殊方法和特殊属性" class="headerlink" title="20.6 特殊方法和特殊属性"></a>20.6 特殊方法和特殊属性</h3><table><thead><tr><th align="center"></th><th align="center">名称</th><th>描述</th></tr></thead><tbody><tr><td align="center">特殊属性</td><td align="center"><code>__dict__</code></td><td>获得类对象或实例对象所绑定的所有属性和方法的字典</td></tr><tr><td align="center">特殊方法</td><td align="center"><code>__len__()</code></td><td>通过重写方法，让内置函数<code>len()</code>的参数可以自定义类型</td></tr><tr><td align="center">特殊方法</td><td align="center"><code>__add__()</code></td><td>通过重写方法，可使用自定义对象具有“<code>+</code>”功能</td></tr><tr><td align="center">特殊方法</td><td align="center"><code>__new__()</code></td><td>用于创建对象</td></tr><tr><td align="center">特殊方法</td><td align="center"><code>__init__()</code></td><td>对创建的对象进行初始化</td></tr></tbody></table><hr><ul><li>特殊属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>(<span class="hljs-params">A, B</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br><span class="hljs-comment"># 创建C类的对象</span><br>x = C(<span class="hljs-string">&#x27;张三&#x27;</span>) <span class="hljs-comment"># x就是C类型的一个实例对象</span><br><span class="hljs-built_in">print</span>(x.__dict__)   <span class="hljs-comment"># 实例对象的属性字典 &#123;&#x27;name&#x27;: &#x27;张三&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(C.__dict__)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(x.__class__)  <span class="hljs-comment"># &lt;class &#x27;__main__.C&#x27;&gt;  输出了对象所属的类</span><br><span class="hljs-built_in">print</span>(C.__bases__)  <span class="hljs-comment"># C类的父类类型的元素   (&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;)</span><br><span class="hljs-built_in">print</span>(C.__base__)   <span class="hljs-comment"># C类的父类类型的一个基类    &lt;class &#x27;__main__.A&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(C.__mro__)    <span class="hljs-comment"># 类的层次结构</span><br><span class="hljs-built_in">print</span>(A.__subclasses__())   <span class="hljs-comment"># 子类的列表 [&lt;class &#x27;__main__.C&#x27;&gt;]</span><br></code></pre></td></tr></table></figure><hr><ul><li>特殊方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__add__</span>(<span class="hljs-params">self, other</span>):</span><br>        <span class="hljs-keyword">return</span> self.name + other.name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.name)<br><br><br>stu1 = Student(<span class="hljs-string">&#x27;张三&#x27;</span>)<br>stu2 = Student(<span class="hljs-string">&#x27;李四&#x27;</span>)<br>s = stu1+stu2   <span class="hljs-comment"># 实现了两个对象的加法运算（因为在student类中，编写了__add__()特殊 的方法）</span><br><span class="hljs-built_in">print</span>(s)<br>s = stu1.__add__(stu2)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------&#x27;</span>)<br>lst = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(lst))     <span class="hljs-comment"># len是内置函数len</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(stu1))<span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(stu2))<span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><hr><p>下面的代码主要是介绍<code>__init__()</code>和<code>__new__()</code>方法的意思</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__new__被调用执行了，cls的id值为&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(cls)))<br>        obj = <span class="hljs-built_in">super</span>().__new__(cls)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;创建的对象id为：&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(obj)))<br>        <span class="hljs-keyword">return</span> obj<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, age</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__init__被调用了，self的id值为：&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(self)))<br>        self.name = name<br>        self.age = age<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;object这个类对象的id为：&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(<span class="hljs-built_in">object</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;person这个类对象的id为：&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(Person)))<br><br><span class="hljs-comment"># 创建Person类的实例对象</span><br>p1 = Person(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p1这个person类的实例对象的id:&#123;0&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">id</span>(p1)))<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">object这个类对象的id为：140710131355136</span><br><span class="hljs-string">person这个类对象的id为：2337138898688</span><br><span class="hljs-string">__new__被调用执行了，cls的id值为2337138898688</span><br><span class="hljs-string">创建的对象id为：2337139834592</span><br><span class="hljs-string">__init__被调用了，self的id值为：2337139834592</span><br><span class="hljs-string">p1这个person类的实例对象的id:2337139834592</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>根据上面代码的输出结果，不难得出有一些结论，其实在创建实例对象的过程中，首先先创建了一个<code>Person(&#39;张三&#39;, 20)</code>，在类内，先是调用了<code>new</code>方法，在方法中又调用 了父类<code>object</code>的<code>new</code>方法，之后调用了<code>init</code>方法，最后才把实例化的<code>Person</code>赋值给<code>p1</code></p></blockquote><h3 id="20-7-类的深拷贝和浅拷贝"><a href="#20-7-类的深拷贝和浅拷贝" class="headerlink" title="20.7 类的深拷贝和浅拷贝"></a>20.7 类的深拷贝和浅拷贝</h3><ul><li>变量的赋值操作<ul><li>只是形成两个变量，实际上还是指向同一个对象</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disk</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cpu, disk</span>):</span><br>        self.cpu = cpu<br>        self.disk = disk<br><span class="hljs-comment"># (1)变量的赋值</span><br>cpu1 = CPU()<br>cpu2 = cpu1<br><span class="hljs-built_in">print</span>(cpu1)     <span class="hljs-comment"># &lt;__main__.CPU object at 0x000001F9FF699FD0&gt;</span><br><span class="hljs-built_in">print</span>(cpu2)     <span class="hljs-comment"># &lt;__main__.CPU object at 0x000001F9FF699FD0&gt;</span><br></code></pre></td></tr></table></figure><hr><ul><li>浅拷贝<ul><li>Python拷贝一般都是浅拷贝，拷贝时，对象包含的子对象内容不拷贝，因此，源对象与拷贝对象会引用同一个子对象</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disk</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cpu, disk</span>):</span><br>        self.cpu = cpu<br>        self.disk = disk<br><span class="hljs-comment"># (2)类的浅拷贝</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>)<br>disk = Disk()   <span class="hljs-comment"># 创建一个硬盘类的对象</span><br>computer = Computer(cpu1, disk) <span class="hljs-comment"># 创建一个计算机类的对象</span><br><span class="hljs-built_in">print</span>(disk)<br><span class="hljs-comment"># 浅拷贝</span><br><span class="hljs-keyword">import</span> copy<br>computer2 =copy.copy(computer)<br><span class="hljs-built_in">print</span>(computer, computer.cpu, computer.disk)<br><span class="hljs-built_in">print</span>(computer2, computer2.cpu, computer2.disk)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;__main__.Computer object at 0x000001FBCA0EAF70&gt; &lt;__main__.CPU object at 0x000001FBCA0EAFD0&gt; &lt;__main__.Disk object at 0x000001FBCA0EAFA0&gt;</span><br><span class="hljs-string">&lt;__main__.Computer object at 0x000001FBCA0EAD90&gt; &lt;__main__.CPU object at 0x000001FBCA0EAFD0&gt; &lt;__main__.Disk object at 0x000001FBCA0EAFA0&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>由代码打印出来的<code>id</code>可以得到，浅拷贝只会拷贝父对象，子对象没有进行拷贝，得到的子对象的<code>id</code>都是相同的</p></blockquote><hr><ul><li>深拷贝<ul><li>使用<code>copy</code>模块的<code>deepcopy</code>函数，递归拷贝对象中包含的子对象，源对象和拷贝对象所有的子对象也不相同</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPU</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Disk</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, cpu, disk</span>):</span><br>        self.cpu = cpu<br>        self.disk = disk<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------------&#x27;</span>)<br>disk = Disk()   <span class="hljs-comment"># 创建一个硬盘类的对象</span><br>computer = Computer(cpu1, disk) <span class="hljs-comment"># 创建一个计算机类的对象</span><br><span class="hljs-built_in">print</span>(disk)<br><span class="hljs-comment"># (3)类的深拷贝</span><br>computer3 = copy.deepcopy(computer)<br><span class="hljs-built_in">print</span>(computer, computer.cpu, computer.disk)<br><span class="hljs-built_in">print</span>(computer3, computer3.cpu, computer3.disk)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;__main__.Computer object at 0x000001FBCA0EAF70&gt; &lt;__main__.CPU object at 0x000001FBCA0EAFD0&gt; &lt;__main__.Disk object at 0x000001FBCA0EAFA0&gt;</span><br><span class="hljs-string">&lt;__main__.Computer object at 0x000001FBCA0EAC10&gt; &lt;__main__.CPU object at 0x000001FBCA0EA1C0&gt; &lt;__main__.Disk object at 0x000001FBCA0EC940&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>由打印出来的<code>id</code>可以发现，深拷贝中，不仅父对象被拷贝，父对象中的每个子对象也都被拷贝</p></blockquote><h2 id="21-模块"><a href="#21-模块" class="headerlink" title="21. 模块"></a>21. 模块</h2><h3 id="21-1-什么叫模块"><a href="#21-1-什么叫模块" class="headerlink" title="21.1 什么叫模块"></a>21.1 什么叫模块</h3><ul><li>模块的英文单词为<code>Modules</code></li><li>函数与模块的关系<ul><li>一个模块中可以包含N多个函数</li></ul></li><li>在Python中一个扩展名为<code>.py</code>的文件就是一个模块</li><li>使用模块的好处<ul><li>方便其它程序和脚本的导入与使用</li><li>避免函数名和变量名冲突</li><li>提高代码的可维护性</li><li>提高代码的可重用性</li></ul></li></ul><h3 id="21-2-自定义模块"><a href="#21-2-自定义模块" class="headerlink" title="21.2 自定义模块"></a>21.2 自定义模块</h3><ul><li>创建模块<ul><li>新建一个<code>.py</code>文件，名称尽量不要与Python自带的标准模块名称相同</li></ul></li><li>导入模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 模块名称 [<span class="hljs-keyword">as</span>别名]<br><span class="hljs-keyword">from</span> 模块名称 <span class="hljs-keyword">import</span> 函数/变量/类<br></code></pre></td></tr></table></figure><h3 id="21-3-以主程序的形式执行"><a href="#21-3-以主程序的形式执行" class="headerlink" title="21.3 以主程序的形式执行"></a>21.3 以主程序的形式执行</h3><ul><li>在每个模块的定义中都包括一个记录模块名称的变量<code>__name__</code>，程序可以检查该变量，以确定他们在哪个模块中执行。如果一个模块不是被导入到其它程序中执行，那么它可能在解释器的顶级模块中执行。顶级模块的<code>__name__</code>变量的值为<code>__main__</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ = <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">a, b</span>):</span><br>    <span class="hljs-keyword">return</span> a+b<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))  <span class="hljs-comment"># 只有运行test01时，才会执行运算</span><br></code></pre></td></tr></table></figure><h3 id="21-4-Python中的包"><a href="#21-4-Python中的包" class="headerlink" title="21.4 Python中的包"></a>21.4 Python中的包</h3><ul><li><p>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下</p></li><li><p>作用：</p><ul><li>代码规范</li><li>避免模块名称冲突</li></ul></li><li><p>包和目录的区别</p><ul><li>包括<code>__init__.py</code>文件的目录称为包</li><li>目录里通常不包含<code>__init__.py</code>文件</li></ul></li><li><p>包的导入</p><ul><li><code>import  包名.模块名</code></li></ul></li><li><p>导入带有包的模块时注意事项</p><ul><li><code>import pageage1</code></li><li><code>import cakc</code></li><li>使用<code>import</code>方式导入时，只能跟包名或者模块名</li><li><code>from pageage1 import module_A</code></li><li><code>from pageage1.module_A import a</code></li><li>使用<code>from...import</code>可以导入包、模块、函数、变量</li></ul></li></ul><h3 id="21-5-第三方模块的安装以及使用"><a href="#21-5-第三方模块的安装以及使用" class="headerlink" title="21.5 第三方模块的安装以及使用"></a>21.5 第三方模块的安装以及使用</h3><ul><li>python中常用的内置模块</li></ul><table><thead><tr><th align="center">模块名</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>sys</code></td><td>与Python解释器及其环境操作相关的标准库</td></tr><tr><td align="center"><code>time</code></td><td>提供与时间相关的各类函数的标准库</td></tr><tr><td align="center"><code>os</code></td><td>提供了访问操作系统服务功能的标准库</td></tr><tr><td align="center"><code>calendar</code></td><td>提供与日期相关的各类函数的标准库</td></tr><tr><td align="center"><code>urllib</code></td><td>用于读取来自网上（服务器）的数据标准库</td></tr><tr><td align="center"><code>json</code></td><td>用于使用json序列化和反序列化对象</td></tr><tr><td align="center"><code>re</code></td><td>用于在字符串中执行正则表达式匹配和替换</td></tr><tr><td align="center"><code>math</code></td><td>提供标准算术运算函数的标准库</td></tr><tr><td align="center"><code>decimal</code></td><td>用于进行精确控制运算精度、有效数位和四舍五入操作的十进制运算</td></tr><tr><td align="center"><code>logging</code></td><td>提供了灵活的记录事件、错误、警告和调试信息等日志信息的功能</td></tr></tbody></table><ul><li>第三方模块的安装<ul><li><code>pip install 模块名</code></li></ul></li><li>第三方模块的使用<ul><li><code>import 模块名</code></li></ul></li></ul><h2 id="22-编码"><a href="#22-编码" class="headerlink" title="22. 编码"></a>22. 编码</h2><h3 id="22-1-编码格式介绍"><a href="#22-1-编码格式介绍" class="headerlink" title="22.1 编码格式介绍"></a>22.1 编码格式介绍</h3><ul><li>常见的字符编码格式<ul><li>Python的解释器使用的是<code>Unicode</code>（内存）</li><li><code>.py</code>文件在磁盘上使用<code>UTF-8</code>存储（外存）</li></ul></li></ul><h3 id="22-2-文件的读写原理"><a href="#22-2-文件的读写原理" class="headerlink" title="22.2 文件的读写原理"></a>22.2 文件的读写原理</h3><ul><li>文件读写俗称“IO操作”</li><li>文件读写操作流程</li><li>操作原理<ul><li>Python操作文件</li><li>打开或新建文件</li><li>读、写文件</li><li>关闭资源</li><li>又从<code>.py</code>文件——&gt;解释器——&gt;OS——&gt;操作——&gt;硬盘</li></ul></li></ul><h3 id="22-3-文件的读写操作"><a href="#22-3-文件的读写操作" class="headerlink" title="22.3 文件的读写操作"></a>22.3 文件的读写操作</h3><ul><li>内置函数opem()创建文件对象</li><li>语法规则<code>file = open(filename [, mode, encoding])</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-built_in">print</span>(file.readlines())<br>file.close()<br></code></pre></td></tr></table></figure><hr><ul><li>常用的文件打开模式<ul><li>按照文件中数据的组织形式，文件分为以下两大类<ul><li>文本文件：存储的普通“字符”文本，默认为Unicode字符集，可以使用记事本程序打开</li><li>二进制文件：把数据内容用“字节”进行存储，无法用记事本打开，必须使用专用的软件打开，如MP3音频文件，jpg图片等</li></ul></li></ul></li></ul><table><thead><tr><th align="center">打开模式</th><th>描述</th></tr></thead><tbody><tr><td align="center"><code>r</code></td><td>以只读模式打开文件，文件的指针将会放在文件的开头</td></tr><tr><td align="center"><code>w</code></td><td>以只写模式打开文件，如果文件不存在则创建，如果文件存在，则覆盖原有内容，文件的指针在文件的开头</td></tr><tr><td align="center"><code>a</code></td><td>以追加模式打开文件，如果文件不存在则创建，文件指针在文件开头，如果文件存在，则在文件末尾追加内容，文件指针在原文件末尾</td></tr><tr><td align="center"><code>b</code></td><td>以二进制方式打开文件，不能单独使用，需要与其它模式一起使用，<code>rb</code>或者<code>wb</code></td></tr><tr><td align="center"><code>+</code></td><td>以读写方式打开文件，不能单独使用，需要与其它模式一起使用，如<code> a+</code></td></tr></tbody></table><h3 id="22-4-文件对象常用的方法"><a href="#22-4-文件对象常用的方法" class="headerlink" title="22.4 文件对象常用的方法"></a>22.4 文件对象常用的方法</h3><table><thead><tr><th align="center">方法名</th><th>说明</th></tr></thead><tbody><tr><td align="center"><code>read([size])</code></td><td>从文件中读取<code>size</code>个字节或字符的内容返回。若省略<code>[size]</code>，则读取到文件末尾，即一次读取文件所有内容</td></tr><tr><td align="center"><code>readline()</code></td><td>从文本文件中读取一行内容</td></tr><tr><td align="center"><code>readlines()</code></td><td>把文本文件中每一行都作为独立的字符串对象，并将这些对象放入列表返回</td></tr><tr><td align="center"><code>write(str)</code></td><td>将字符串<code>str</code>内容写入文件</td></tr><tr><td align="center"><code>writelines(s_list)</code></td><td>将字符串列表<code>s_list</code>写入文本文件，不添加换行符</td></tr><tr><td align="center"><code>seek(offset[, whence])</code></td><td>把文件指针移动到新的位置，<code>offset</code>表示相对于<code>whence</code>的位置：<br /><code>offset</code>：为正往结束方向移动，为负往开始方向移动<br /><code>whence</code>不同的值代表不同含义：<br />0：从文件开头开始计算（默认值）<br />1：从当前位置开始计算<br />2：从文件尾开始计算</td></tr><tr><td align="center"><code>tell()</code></td><td>返回文件指针的当前位置</td></tr><tr><td align="center"><code>flush()</code></td><td>把缓冲区的内容写入文件，但不关闭文件</td></tr><tr><td align="center"><code>close()</code></td><td>把缓冲区的内容写入文件，同时关闭文件，释放文件对象相关资源</td></tr></tbody></table><h3 id="22-5-with语句（上下文管理器）"><a href="#22-5-with语句（上下文管理器）" class="headerlink" title="22.5 with语句（上下文管理器）"></a>22.5 with语句（上下文管理器）</h3><ul><li>with语句可以自动管理上下文资源，无论什么原因跳出with块，都能确保文件正确的关闭，以此来达到释放资源的目的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;logo.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> src_file:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;src_file.read()&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-built_in">print</span>(file.read())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">你好，世界！</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="%E6%80%BB%E7%BB%93.png" alt="总结"></p><h3 id="22-6-目录操作"><a href="#22-6-目录操作" class="headerlink" title="22.6 目录操作"></a>22.6 目录操作</h3><ul><li>OS模块是Python内置的与操作系统功能和文件系统相关的模块，该模块中的语句的执行结果通常与操作系统有关，在不同的操作系统上运行，得到的结果可能不一样</li><li>OS模块与<code>os.path</code>模块用于对目录或者文件进行操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># os模块与操作系统相关的一个模块</span><br><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&#x27;notepad.exe&#x27;</span>)    <span class="hljs-comment"># 打开记事本文件</span><br>os.system(<span class="hljs-string">&#x27;calc.exe&#x27;</span>)   <span class="hljs-comment"># 打开系统自带的计算器</span><br><br><span class="hljs-comment"># 直接调用可执行文件</span><br>os.startfile(<span class="hljs-string">&#x27;D:\\QQ\\Bin\\QQ.exe&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><ul><li>os模块操作目录相关函数</li></ul><table><thead><tr><th align="center">函数</th><th>说明</th></tr></thead><tbody><tr><td align="center"><code>getcwd()</code></td><td>返回当前的工作目录</td></tr><tr><td align="center"><code>listdir(path)</code></td><td>返回指定路径下的文件和目录信息</td></tr><tr><td align="center"><code>mkdir(path[, mode])</code></td><td>创建目录</td></tr><tr><td align="center"><code>makedirs(path1/path2...[, mode])</code></td><td>创建多级目录</td></tr><tr><td align="center"><code>rmdir(path)</code></td><td>删除目录</td></tr><tr><td align="center"><code>removedirs(path1/path2...)</code></td><td>删除多级目录</td></tr><tr><td align="center"><code>chdir(path)</code></td><td>将path设置为当前工作目录</td></tr></tbody></table><hr><ul><li><code>os.path</code>模块操作目录相关函数</li></ul><table><thead><tr><th align="center">函数</th><th>说明</th></tr></thead><tbody><tr><td align="center"><code>abspath(path)</code></td><td>用于获取文件或目录的绝对路径</td></tr><tr><td align="center"><code>exists(path)</code></td><td>用于判断文件或目录是否存在，如果存在返回<code>True</code>，否则返回<code>False</code></td></tr><tr><td align="center"><code>join(path, name)</code></td><td>将目录与目录或者文件拼接起来</td></tr><tr><td align="center"><code>splitext()</code></td><td>分离文件名和扩展名</td></tr><tr><td align="center"><code>basename(path)</code></td><td>从一个目录中提取文件名</td></tr><tr><td align="center"><code>dirname(path)</code></td><td>从一个路径中获取文件路径，不包括文件名</td></tr><tr><td align="center"><code>isdir(path)</code></td><td>用于判断是否为路径</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础（中）</title>
      <link href="/2022/01/20/python-ji-chu-zhong/"/>
      <url>/2022/01/20/python-ji-chu-zhong/</url>
      
        <content type="html"><![CDATA[<p>最近这几天一边学习其他知识，一边又把Python的基础知识接着整理了一下，这次主要就是整理了Python中比较重要的几个数据结构，分别是列表、字典、元组和集合，作者认为这几块是比较容易让人产生困惑的，以及可能在后续的学习中会弄混淆，所以特别抽出来写一篇Python（中），后续还会接着整理最后下部分的基础知识。</p><h2 id="11-列表"><a href="#11-列表" class="headerlink" title="11. 列表"></a>11. 列表</h2><h3 id="11-1-为什么需要列表"><a href="#11-1-为什么需要列表" class="headerlink" title="11.1 为什么需要列表"></a>11.1 为什么需要列表</h3><ul><li>变量可以存储一个元素，但是列表是一个“大容器”，可以存储N多个元素，程序可以方便地对这些数据进行整体操作</li><li>列表相当于其它语言中的数组</li></ul><h3 id="11-2-列表的创建"><a href="#11-2-列表的创建" class="headerlink" title="11.2 列表的创建"></a>11.2 列表的创建</h3><ul><li><p>列表需要使用中括号[]，元素之间使用英文的逗号进行分割</p></li><li><p><code>lst = [&#39;大圣&#39;, &#39;孙悟空&#39;]</code></p></li><li><p>列表的创建方式</p><ul><li>直接使用中括号    <code>lst = [&#39;大圣&#39;, &#39;孙悟空&#39;]</code></li><li>调用内置函数list()   <code>lst2 = list([&#39;大圣&#39;, &#39;孙悟空&#39;])</code></li></ul></li></ul><h3 id="11-3-列表的特点"><a href="#11-3-列表的特点" class="headerlink" title="11.3 列表的特点"></a>11.3 列表的特点</h3><ol><li>列表元素按照顺序有序排序</li><li>索引映射唯一一个数据</li><li>列表可以存储重复数据</li><li>列表可以任意数据类型混存</li><li>根据需要动态分配和回收内存</li></ol><h3 id="11-4-列表的查询操作"><a href="#11-4-列表的查询操作" class="headerlink" title="11.4 列表的查询操作"></a>11.4 列表的查询操作</h3><blockquote><ol><li>获取列表中指定元素的索引<code>index()</code></li></ol></blockquote><ul><li>如查列表中存在<code>N</code>个相同元素，只返回相同元素中的第一个元素的索引</li><li>如果查询的元素在列表中不存在，则会抛出<code>ValueError</code></li><li>还可以在指定的<code>start</code>和<code>stop</code>之间进行查找</li></ul><p>下面用一个简单的代码例子来说明<code>index()</code>方法查询的三个特点</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">985</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-built_in">print</span>(lst.index(<span class="hljs-string">&#x27;hello&#x27;</span>))  <span class="hljs-comment"># 如查列表中有相同元素，只返回相同元素中的第一个元素的索引</span><br><span class="hljs-built_in">print</span>(lst.index(<span class="hljs-string">&#x27;python&#x27;</span>))  <span class="hljs-comment"># 如果不存在，则会抛出异常.ValueError: &#x27;python&#x27; is not in list</span><br><span class="hljs-built_in">print</span>(lst.index(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 索引从1到3，但是不包括3.ValueError: &#x27;hello&#x27; is not in list</span><br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>获取列表中的单个元素</li></ol></blockquote><ul><li>正向索引从<code>0</code>到<code>N-1</code>    举例：<code>lst[0]</code></li><li>逆向索引从<code>-N</code>到<code>-1</code>     举例：<code>lst[-N]</code></li><li>指定索引不存在时，会抛出<code>indexError</code></li></ul><p>下面用一个简单的代码例子来说明获取单个元素的方法查询三个特点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">985</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">211</span>]<br><span class="hljs-comment"># 获取索引为2的元素</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">2</span>])   <span class="hljs-comment"># 985</span><br><span class="hljs-comment"># 获取索引为-3的元素</span><br><span class="hljs-built_in">print</span>(lst[-<span class="hljs-number">3</span>])  <span class="hljs-comment"># hello</span><br><span class="hljs-comment"># 获取索引为10的元素</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">10</span>])  <span class="hljs-comment"># 报错提示列表超出范围，查询不到。IndexError: list index out of range</span><br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>获取列表中的多个元素</li></ol></blockquote><p>语法格式：列表名<code>[start : stop : step]</code></p><ul><li>切片的结果：原列表片段的拷贝</li><li>切片的范围：<code>[start, stop]</code></li><li><code>step</code>默认为<code>1</code>：可以简写为<code>[start: stop]</code></li><li><code>step</code>为正数的时候<ul><li><code>[: stop: step]</code>：切片的第一个元素默认是列表中的第一个元素</li><li><code>[start: :step]</code>：切片的最后一个元素默认是列表的最后一个元素</li></ul></li><li><code>step</code>为负数的时候<ul><li><code>[: stop: step]</code>：切片的第一个元素默认是列表中的最后一个元素</li><li><code>[start: :step]</code>：切片的最后一个元素默认是列表的第一个元素</li></ul></li></ul><p>下面通过一个例子解释一下，如何获取列表中的多个元素，以及它们的不同形式写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>]<br><span class="hljs-comment"># start=1,stop=6,step=1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">1</span>])   <span class="hljs-comment"># [20, 30, 40, 50, 60]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表&#x27;</span>, <span class="hljs-built_in">id</span>(lst))   <span class="hljs-comment"># 原列表 2125077867328</span><br>lst2 = lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;切的片段&#x27;</span>, <span class="hljs-built_in">id</span>(lst2)) <span class="hljs-comment"># 切的片段 2125077761664</span><br><span class="hljs-comment"># 默认步长为1    后面加一个冒号，step不填也默认步长为1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>])     <span class="hljs-comment"># [20, 30, 40, 50, 60]</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:])    <span class="hljs-comment"># [20, 30, 40, 50, 60]</span><br><span class="hljs-comment"># start=1，stop=6，step=2</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>])   <span class="hljs-comment"># [20, 40, 60]</span><br><span class="hljs-comment"># stop=6,step=2,start采用默认</span><br><span class="hljs-built_in">print</span>(lst[:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>])    <span class="hljs-comment"># [10, 30, 50]</span><br><span class="hljs-comment"># start=1，step=2，stop采用默认</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>])    <span class="hljs-comment"># [20, 40, 60, 80]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------------step步长为负数的情况-----------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(lst[::-<span class="hljs-number">1</span>])    <span class="hljs-comment"># [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-comment"># start=7,stop省略，step=-1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">7</span>::-<span class="hljs-number">1</span>])   <span class="hljs-comment"># [80, 70, 60, 50, 40, 30, 20, 10]</span><br><span class="hljs-comment"># start=6，stop=0，step=-1</span><br><span class="hljs-built_in">print</span>(lst[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>:-<span class="hljs-number">2</span>])  <span class="hljs-comment"># [70, 50, 30]</span><br></code></pre></td></tr></table></figure><blockquote><ol start="4"><li>判断指定元素在列表中是否存在</li></ol></blockquote><ul><li>元素 <code>in</code>  列表名</li><li>元素 <code>not  in</code>  列表名</li></ul><p>下面是一个例子说明如何判断指定元素是否在列表中存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> lst)    <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">in</span> lst)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lst)    <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> lst)   <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><blockquote><ol start="5"><li>列表元素的遍历</li></ol></blockquote><p><code>for  迭代变量  in  列表名 ：</code></p><p>下面是一个例子说明如何操作对列表元素的遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lst:<br>    <span class="hljs-built_in">print</span>(item)<br><br>    <span class="hljs-comment">#输出结果</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">10</span><br><span class="hljs-string">20</span><br><span class="hljs-string">python</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="11-5-列表的增加操作"><a href="#11-5-列表的增加操作" class="headerlink" title="11.5 列表的增加操作"></a>11.5 列表的增加操作</h3><blockquote><p>列表元素的增加操作</p></blockquote><table><thead><tr><th align="center">方法/其它</th><th align="center">操作描述</th></tr></thead><tbody><tr><td align="center"><code>append()</code></td><td align="center">在列表的末尾添加<strong>一个元素</strong></td></tr><tr><td align="center"><code>extend()</code></td><td align="center">在列表的末尾添加<strong>至少一个元素</strong></td></tr><tr><td align="center"><code>insert()</code></td><td align="center">在列表的任意位置添加<strong>一个元素</strong></td></tr><tr><td align="center">切片</td><td align="center">在列表的任意位置添加<strong>至少一个元素</strong></td></tr></tbody></table><p>下面用一个代码例子来说明上面四种添加方法的不同之处</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># 向列表的末尾添加一个元素</span><br><br>lst2 = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>]<br><span class="hljs-comment"># lst.append(lst2)    # 将lst2作为一个元素添加到列表的末尾</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 30, 100, [&#x27;hello&#x27;, &#x27;world&#x27;]]</span><br>lst.extend(lst2)    <span class="hljs-comment"># 将lst2里面的各个元素作为单独元素添加到列表的末尾</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 30, 100, &#x27;hello&#x27;, &#x27;world&#x27;]</span><br><span class="hljs-comment"># 在任意位置上添加一个元素</span><br>lst.insert(<span class="hljs-number">1</span>, <span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 90, 20, 30, 100, &#x27;hello&#x27;, &#x27;world&#x27;]</span><br><br>lst3 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-comment"># 在任意的位置上添加N多个元素</span><br>lst[<span class="hljs-number">1</span>:] = lst3<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, True, False, &#x27;hello&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="11-6-列表的删除操作"><a href="#11-6-列表的删除操作" class="headerlink" title="11.6 列表的删除操作"></a>11.6 列表的删除操作</h3><table><thead><tr><th align="center">方法/其它</th><th align="center">操作描述</th></tr></thead><tbody><tr><td align="center"><code>remove()</code></td><td align="center">1. 一次删除一个元素<br />2. 重复元素只能删除第一个<br />3. 元素不存在抛出<code>ValueError</code></td></tr><tr><td align="center"><code>pop()</code></td><td align="center">1. 删除一个指定索引位置上的元素<br />2. 指定索引不存在抛出<code>IndexError</code><br />3. 不指定索引，删除列表种最后一个元素</td></tr><tr><td align="center">切片</td><td align="center">一次至少删除一个元素</td></tr><tr><td align="center"><code>clear()</code></td><td align="center">清空列表</td></tr><tr><td align="center"><code>del</code></td><td align="center">删除列表</td></tr></tbody></table><p>下面通过一个代码例子，来说明一下几种列表的删除操作的一些用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>, <span class="hljs-number">30</span>]<br>lst.remove(<span class="hljs-number">30</span>)  <span class="hljs-comment"># 从列表种移除一个元素，如果有重复的只移除第一个元素</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 40, 50, 60, 30]</span><br><span class="hljs-comment"># lst.remove(100) # ValueError: list.remove(x): x not in list</span><br><br><span class="hljs-comment"># pop()根据索引移除元素</span><br>lst.pop(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 40, 50, 60, 30]，将索引为1的元素20删除</span><br><span class="hljs-comment"># lst.pop(5)  # IndexError: pop index out of range，如果指定的索引位置不存在，将抛出异常</span><br>lst.pop()   <span class="hljs-comment"># 如果不指定参数（索引），那么将删除列表种的最后一个元素</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 40, 50, 60]</span><br><br><span class="hljs-comment"># 切片操作</span><br><span class="hljs-string">&quot;&quot;&quot;切片操作，删除至少一个元素，将产生一个新的列表对象&quot;&quot;&quot;</span><br>new_list = lst[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;原列表&#x27;</span>, lst)   <span class="hljs-comment"># 原列表 [10, 40, 50, 60]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新列表&#x27;</span>, new_list)  <span class="hljs-comment"># 新列表 [40, 50]</span><br><span class="hljs-string">&quot;&quot;&quot;不产生新的列表对象，而是删除原列表中的内容&quot;&quot;&quot;</span><br>lst[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>] = []<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 60]</span><br><br><span class="hljs-comment"># 清除列表中的所有元素</span><br>lst.clear()<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># []</span><br><br><span class="hljs-comment"># del语句会将列表对象删除</span><br><span class="hljs-keyword">del</span> lst<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># NameError: name &#x27;lst&#x27; is not defined</span><br></code></pre></td></tr></table></figure><h3 id="11-7-列表元素的修改操作"><a href="#11-7-列表元素的修改操作" class="headerlink" title="11.7 列表元素的修改操作"></a>11.7 列表元素的修改操作</h3><ul><li>为指定索引的元素赋予一个新值</li><li>为指定的切片赋予一个新值</li></ul><p>下面是一个代码例子，来参考学习一下列表元素的两种修改操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-comment"># 一次修改一个值</span><br>lst[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 20, 100, 40]</span><br><span class="hljs-comment"># 利用切片，一次修改多个值</span><br>lst[<span class="hljs-number">1</span>: <span class="hljs-number">3</span>] = [<span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>, <span class="hljs-number">600</span>]<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [10, 300, 400, 500, 600, 40]</span><br></code></pre></td></tr></table></figure><h3 id="11-8-列表元素的排序操作"><a href="#11-8-列表元素的排序操作" class="headerlink" title="11.8 列表元素的排序操作"></a>11.8 列表元素的排序操作</h3><blockquote><p>列表元素的排序操作，常见的有两种方式</p></blockquote><ul><li>调用<code>sort()</code>方法，列表中的所有元素默认按照从小到大的顺序进行排序，可以指定<code>reverse=True</code>，进行降序排序</li><li>调用内置函数<code>sorted()</code>，可以指定<code>reverse=True</code>，进行降序排序，原列表不发生改变</li></ul><p>下面通过一个例子，了解一下两种不同函数进行排序操作的一些特点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [<span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">98</span>, <span class="hljs-number">54</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序前的列表&#x27;</span>, lst, <span class="hljs-built_in">id</span>(lst))   <span class="hljs-comment"># 排序前的列表 [20, 40, 10, 98, 54] 2701818270784</span><br><span class="hljs-comment"># 开始排序，利用列表对象的sort方法，升序排序</span><br>lst.sort()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序后的列表&#x27;</span>, lst, <span class="hljs-built_in">id</span>(lst))   <span class="hljs-comment"># 排序后的列表 [10, 20, 40, 54, 98] 2701818270784</span><br><span class="hljs-comment"># 通过指定关键字参数，将列表中的元素进行降序排序</span><br>lst.sort(reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [98, 54, 40, 20, 10]</span><br><span class="hljs-comment"># ---------使用内置函数sorted()对列表进行排序，将产生一个新的列表对象-----------</span><br>lst = [<span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">98</span>, <span class="hljs-number">54</span>]<br>new_list = <span class="hljs-built_in">sorted</span>(lst)<br><span class="hljs-built_in">print</span>(new_list)     <span class="hljs-comment"># [10, 20, 40, 54, 98]</span><br><span class="hljs-comment"># 指定关键字参数，实现列表元素的降序排序</span><br>desc_list = <span class="hljs-built_in">sorted</span>(lst, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(desc_list)    <span class="hljs-comment"># [98, 54, 40, 20, 10]</span><br></code></pre></td></tr></table></figure><h3 id="11-9-列表生成式"><a href="#11-9-列表生成式" class="headerlink" title="11.9 列表生成式"></a>11.9 列表生成式</h3><p>列表生成式简称<strong>“生成列表的公式”</strong></p><p>下面通过一段代码，加深对列表生成式的理解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">lst = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(lst)  <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br>lst2 = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(lst2) <span class="hljs-comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="hljs-string">&quot;&quot;&quot;列表中的元素的值为2，4，6，8，10&quot;&quot;&quot;</span><br>lst3 = [i*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)]<br><span class="hljs-built_in">print</span>(lst3) <span class="hljs-comment"># [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure><blockquote><p>由上述代码可见，其实真正决定<code>lst</code>的取值的就在于<code>for</code>前面的表达式为多少，如果是<code>i</code>，那就是<code>range()</code>本身迭代的元素，如果是<code>i*2</code>，那就要把迭代的元素全扩大2倍，就如注意事项说的一样，<code>i*i</code>表示为列表元素的表达式。</p></blockquote><h2 id="12-字典"><a href="#12-字典" class="headerlink" title="12 字典"></a>12 字典</h2><h3 id="12-1-什么是字典"><a href="#12-1-什么是字典" class="headerlink" title="12.1 什么是字典"></a>12.1 什么是字典</h3><ul><li><p>Python内置的数据结构之一，与列表一样是一个<strong>可变序列</strong></p><ul><li><strong>可变</strong>就是指可以执行增删改操作</li></ul></li><li><p>以键值对的方式存储数据，字典是一个<strong>无序的序列</strong></p></li><li><p><code>scores = &#123;&#39;张山&#39;: 100, &#39;李四&#39;: 98, &#39;王五&#39;: 45&#125;</code></p><ul><li>他们分别由字典名、花括号、逗号、键、冒号、值一一对应组成</li></ul></li></ul><h3 id="12-2-字典的原理"><a href="#12-2-字典的原理" class="headerlink" title="12.2 字典的原理"></a>12.2 字典的原理</h3><blockquote><p> 字典的实现原理</p></blockquote><p>字典的实现原理与查字典类似，查字典是先根据部首或者拼音查找对应的页码，而Python中的字典是根据<code>key</code>查找<code>value</code>所在的位置</p><h3 id="12-3-字典的创建与删除"><a href="#12-3-字典的创建与删除" class="headerlink" title="12.3 字典的创建与删除"></a>12.3 字典的创建与删除</h3><blockquote><ol><li>字典的创建</li></ol></blockquote><ul><li>最常用的方式：使用花括号<ul><li><code>scores = &#123;&#39;张山&#39;: 100, &#39;李四&#39;: 98, &#39;王五&#39;: 45&#125;</code></li></ul></li><li>使用内置函数<code>dict()</code><ul><li><code>dict(name = &#39;jack&#39;, age = 20)</code></li></ul></li></ul><p>下面通过一段代码，来了解一下</p><h3 id="12-4-字典的查询操作"><a href="#12-4-字典的查询操作" class="headerlink" title="12.4 字典的查询操作"></a>12.4 字典的查询操作</h3><blockquote><p>字典中元素的获取有两种方式</p></blockquote><ol><li><code>[]</code>  ——&gt; 举例：<code>scores[&#39;张三&#39;]</code></li><li><code>get()</code>方法  ——&gt; 举例：<code>scores.get(&#39;张三&#39;)</code></li></ol><p>两种方法有着一些区别之处</p><ul><li><code>[]</code>：如果字典中不存在指定的<code>key</code>，抛出<code>KeyError</code>异常</li><li><code>get()</code>方法取值：如果字典中不存在指定的<code>key</code>，并不会抛出<code>KeyError</code>，而是返回<code>None</code>，可以通过参数设置默认的<code>value</code>，以便指定的<code>key</code>不存在时返回</li></ul><p>下面通过一段代码，了解一下字典的查询操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;获取字典中的元素&quot;&quot;&quot;</span><br>scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-comment"># 第一种方式，使用[]</span><br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;张三&#x27;</span>])     <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(scores[<span class="hljs-string">&#x27;陈六&#x27;</span>])     <span class="hljs-comment"># KeyError: &#x27;陈六&#x27;</span><br><span class="hljs-comment"># 第二种方式，使用get()方法</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;张三&#x27;</span>))     <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;陈六&#x27;</span>))     <span class="hljs-comment"># 并不会报错，而是输出None</span><br><span class="hljs-built_in">print</span>(scores.get(<span class="hljs-string">&#x27;麻七&#x27;</span>, <span class="hljs-number">99</span>)) <span class="hljs-comment"># 99是在查找‘麻七’时，所对应的value不存在时，提供的一个默认值</span><br></code></pre></td></tr></table></figure><h3 id="12-5-字典元素的增、删、改操作"><a href="#12-5-字典元素的增、删、改操作" class="headerlink" title="12.5 字典元素的增、删、改操作"></a>12.5 字典元素的增、删、改操作</h3><h4 id="1-key的判断"><a href="#1-key的判断" class="headerlink" title="1. key的判断"></a>1. key的判断</h4><table><thead><tr><th align="center">key的判断</th><th align="center">解释</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center"><code>in</code></td><td align="center">指定的<code>key</code>在字典中<strong>存在</strong>返回<code>True</code></td><td align="center"><code>&#39;张三&#39; in scores</code></td></tr><tr><td align="center"><code>not in</code></td><td align="center">指定的<code>key</code>在字典中<strong>不存在</strong>返回<code>True</code></td><td align="center"><code>&#39;Marry&#39; not in scores</code></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-string">&quot;&quot;&quot;key值的判断&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">in</span> scores)       <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;张三&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> scores)   <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h4 id="2-字典元素的删除"><a href="#2-字典元素的删除" class="headerlink" title="2. 字典元素的删除"></a>2. 字典元素的删除</h4><ul><li><code>del scores[&#39;张三&#39;]</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-string">&quot;&quot;&quot;字典的删除&quot;&quot;&quot;</span><br><span class="hljs-keyword">del</span> scores[<span class="hljs-string">&#x27;张三&#x27;</span>]    <span class="hljs-comment"># 删除指定的键值对（key-value）</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45&#125;</span><br>scores.clear()  <span class="hljs-comment"># 清空字典中的所有元素</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-字典元素的新增"><a href="#3-字典元素的新增" class="headerlink" title="3. 字典元素的新增"></a>3. 字典元素的新增</h4><ul><li><code>scores[&#39;jack&#39;] = 90</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-string">&quot;&quot;&quot;字典元素的新增&quot;&quot;&quot;</span><br>scores[<span class="hljs-string">&#x27;陈六&#x27;</span>] = <span class="hljs-number">98</span>   <span class="hljs-comment"># 新增元素</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;陈六&#x27;: 98&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;字典元素的修改&quot;&quot;&quot;</span><br>scores[<span class="hljs-string">&#x27;陈六&#x27;</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(scores)   <span class="hljs-comment"># &#123;&#x27;李四&#x27;: 98, &#x27;王五&#x27;: 45, &#x27;陈六&#x27;: 100&#125;</span><br></code></pre></td></tr></table></figure><p>值得注意的是，字典元素的新增也可以作为修改来运行，只需把括号里面的键改成自己需要修改的元素，即可对他的<code>value</code>进行修改</p><h4 id="4-获取字典视图的三个方法"><a href="#4-获取字典视图的三个方法" class="headerlink" title="4. 获取字典视图的三个方法"></a>4. 获取字典视图的三个方法</h4><ul><li><code>keys()</code>              ——&gt;获取字典中所有的<code>key</code></li><li><code>values()</code>       ——&gt;获取字典中所有<code>value</code></li><li><code>items()</code>         ——&gt;获取字典中所有<code>key</code>，<code>value</code>对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-comment"># 获取所有的key</span><br>keys = scores.keys()<br><span class="hljs-built_in">print</span>(keys)             <span class="hljs-comment"># dict_keys([&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(keys))       <span class="hljs-comment"># &lt;class &#x27;dict_keys&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(keys))       <span class="hljs-comment"># [&#x27;张三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;]，将所有的key组成的试图转成列表</span><br><br><span class="hljs-comment"># 获取所有的value</span><br>values = scores.values()<br><span class="hljs-built_in">print</span>(values)           <span class="hljs-comment"># dict_values([100, 98, 45])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(values))     <span class="hljs-comment"># &lt;class &#x27;dict_values&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(values))     <span class="hljs-comment"># [100, 98, 45]</span><br><br><span class="hljs-comment"># 获取所有的key-value对</span><br>items=scores.items()<br><span class="hljs-built_in">print</span>(items)            <span class="hljs-comment"># dict_items([(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)])</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(items))      <span class="hljs-comment"># &lt;class &#x27;dict_items&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(items))      <span class="hljs-comment"># [(&#x27;张三&#x27;, 100), (&#x27;李四&#x27;, 98), (&#x27;王五&#x27;, 45)]，转换之后的列表元素是有元组组成的</span><br></code></pre></td></tr></table></figure><h4 id="5-字典元素的遍历"><a href="#5-字典元素的遍历" class="headerlink" title="5. 字典元素的遍历"></a>5. 字典元素的遍历</h4><p>代码格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p>下面是一个代码例子，用来理解一下元素的遍历方法的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">scores = &#123;<span class="hljs-string">&#x27;张三&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;李四&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;王五&#x27;</span>: <span class="hljs-number">45</span>&#125;<br><span class="hljs-comment"># 字典元素的遍历</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> scores:<br>    <span class="hljs-built_in">print</span>(item, scores[item], scores.get(item))<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">张三 100 100</span><br><span class="hljs-string">李四 98 98</span><br><span class="hljs-string">王五 45 45</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p> 由代码例子可见，遍历的时候，获取<code>value</code>的值也是和上面的方法类似，可以直接使用<code>[]</code>方法，也可以使用<code>get()</code>方法。但是使用[]方法的时候可能会抛出异常，而<code>get()</code>方法不会抛出异常，只会输出<code>None</code></p></blockquote><h3 id="12-6-字典的特点"><a href="#12-6-字典的特点" class="headerlink" title="12.6 字典的特点"></a>12.6 字典的特点</h3><ul><li>字典中的所有元素都是一个<code>key-value</code>对，<code>key</code>不允许重复，<code>value</code>可以重复</li><li>字典中的元素是无序的</li><li>字典中的<code>key</code>必须是不可变对象</li><li>字典也可以根据需要动态地伸缩</li><li>字典会浪费较大的内存，是一种使用空间换时间的数据结构</li></ul><h3 id="12-7字典推导式"><a href="#12-7字典推导式" class="headerlink" title="12.7字典推导式"></a>12.7字典推导式</h3><p><code>items = [&#39;Fruits&#39;, &#39;Books&#39;, &#39;Others&#39;]      prices = [96, 78, 85]</code></p><p><code>&#123;&#39;Fruits&#39;: 96,&#39;Books&#39;: 78, &#39;Others&#39;: 85&#125;</code></p><ul><li>内置函数<code>zip()</code><ul><li>用于将可迭代对象作为参数，将对象中对应的元素打包成一个元组，然后返回由这些元组组成的列表</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">items = [<span class="hljs-string">&#x27;Fruits&#x27;</span>, <span class="hljs-string">&#x27;Books&#x27;</span>, <span class="hljs-string">&#x27;Others&#x27;</span>]<br>prices = [<span class="hljs-number">96</span>, <span class="hljs-number">78</span>, <span class="hljs-number">85</span>]<br>lst = <span class="hljs-built_in">zip</span>(items, prices)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(lst))    <span class="hljs-comment"># [(&#x27;Fruits&#x27;, 96), (&#x27;Books&#x27;, 78), (&#x27;Others&#x27;, 85)]</span><br><br>d = &#123;item: price <span class="hljs-keyword">for</span> item, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items, prices)&#125;<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># &#123;&#x27;Fruits&#x27;: 96, &#x27;Books&#x27;: 78, &#x27;Others&#x27;: 85&#125;</span><br><br>items = [<span class="hljs-string">&#x27;Fruits&#x27;</span>, <span class="hljs-string">&#x27;Books&#x27;</span>, <span class="hljs-string">&#x27;Others&#x27;</span>]<br>prices = [<span class="hljs-number">96</span>, <span class="hljs-number">78</span>, <span class="hljs-number">85</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>]<br>d = &#123;item: price <span class="hljs-keyword">for</span> item, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items, prices)&#125;<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># &#123;&#x27;Fruits&#x27;: 96, &#x27;Books&#x27;: 78, &#x27;Others&#x27;: 85&#125;</span><br><br>d = &#123;item.upper(): price <span class="hljs-keyword">for</span> item, price <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(items, prices)&#125;<br><span class="hljs-built_in">print</span>(d)    <span class="hljs-comment"># &#123;&#x27;FRUITS&#x27;: 96, &#x27;BOOKS&#x27;: 78, &#x27;OTHERS&#x27;: 85&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>根据上述代码的演示，可以发现，就是利用两个列表合并，用for循环遍历生成了一个字典，其中使用到了内置函数<code>zip()</code>，包括使用到了<code>str.upper()</code>函数，这个函数的意思为将小写字母变成大写字母</p></blockquote><h2 id="13-元组"><a href="#13-元组" class="headerlink" title="13. 元组"></a>13. 元组</h2><h3 id="13-1-什么是元组"><a href="#13-1-什么是元组" class="headerlink" title="13.1 什么是元组"></a>13.1 什么是元组</h3><ul><li><p><code>t = (&#39;Python&#39;, &#39;hello&#39;, 90)</code></p></li><li><p>元组：Python内置的数据结构之一，是一个不可变序列</p></li><li><p>不可变序列和可变序列</p><ul><li>不可变序列：字符串、元组<ul><li>不可变序列没有增删改的操作</li></ul></li><li>可变序列：列表、字典<ul><li>可变序列可以对序列执行增删改操作，对象地址不发生更改</li></ul></li></ul></li></ul><h3 id="13-2-元组的创建方式"><a href="#13-2-元组的创建方式" class="headerlink" title="13.2 元组的创建方式"></a>13.2 元组的创建方式</h3><blockquote><ol><li>直接小括号</li></ol></blockquote><p><code>t = (&#39;Python&#39;, &#39;hello&#39;, 90)</code></p><blockquote><ol start="2"><li>使用内置函数tuple()</li></ol></blockquote><p><code>t = tuple((&#39;Python&#39;, &#39;hello&#39;, 90))</code></p><blockquote><ol start="3"><li>只包含一个元组的元素需要使用逗号和小括号</li></ol></blockquote><p><code>t = (10, )</code></p><p>下面是几段代码，来解释一下元组的创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种创建方式</span><br>t = (<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">90</span>)<br><span class="hljs-built_in">print</span>(t)                <span class="hljs-comment"># (&#x27;Python&#x27;, &#x27;hello&#x27;, 90)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-built_in">type</span>(t))     <span class="hljs-comment"># t &lt;class &#x27;tuple&#x27;&gt;</span><br><br>t2 = <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">90</span>  <span class="hljs-comment"># 省略了小括号</span><br><span class="hljs-built_in">print</span>(t2)               <span class="hljs-comment"># (&#x27;Python&#x27;, &#x27;hello&#x27;, 90)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t2&#x27;</span>, <span class="hljs-built_in">type</span>(t2))   <span class="hljs-comment"># t2 &lt;class &#x27;tuple&#x27;&gt;</span><br><br>t3 = (<span class="hljs-string">&#x27;python&#x27;</span>, )       <span class="hljs-comment"># 如果元组种只有一个元素，逗号不能省略</span><br><span class="hljs-built_in">print</span>(t3)               <span class="hljs-comment"># (&#x27;python&#x27;,)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t3&#x27;</span>, <span class="hljs-built_in">type</span>(t3))   <span class="hljs-comment"># t3 &lt;class &#x27;tuple&#x27;&gt;</span><br><br><span class="hljs-comment"># 第二种创建方式，使用内置函数tuple()</span><br>t4 = <span class="hljs-built_in">tuple</span>((<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">90</span>))<br><span class="hljs-built_in">print</span>(t4)               <span class="hljs-comment"># (&#x27;Python&#x27;, &#x27;hello&#x27;, 90)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t4&#x27;</span>, <span class="hljs-built_in">type</span>(t4))   <span class="hljs-comment"># t4 &lt;class &#x27;tuple&#x27;&gt;</span><br><br><span class="hljs-comment"># 空列表的创建方式</span><br>lst = []<br>lst1 = <span class="hljs-built_in">list</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空列表&#x27;</span>, lst, lst1)     <span class="hljs-comment"># 空列表 [] []</span><br><br><span class="hljs-comment"># 空字典的创建方式</span><br>d = &#123;&#125;<br>d1 = <span class="hljs-built_in">dict</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空字典&#x27;</span>, d, d1)         <span class="hljs-comment"># 空字典 &#123;&#125; &#123;&#125;</span><br><br><span class="hljs-comment"># 空元组的创建方式</span><br>t = ()<br>t1 = <span class="hljs-built_in">tuple</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;空元组&#x27;</span>, t, t1)         <span class="hljs-comment"># 空元组 () ()</span><br></code></pre></td></tr></table></figure><blockquote><p>上面代码种也提到了一些注意事项，例如元组只有一个元素的时候，应该怎么创建，在后面加上逗号。另外，还提到了空列表、空字典、空元组的创建方式</p></blockquote><h3 id="13-3-元组的遍历"><a href="#13-3-元组的遍历" class="headerlink" title="13.3 元组的遍历"></a>13.3 元组的遍历</h3><p>元组是可迭代对象，所以可以使用<code>for  in</code>进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">10</span>, [<span class="hljs-number">20</span>, <span class="hljs-number">30</span>], <span class="hljs-number">9</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><h3 id="13-4-为什么将元组设计成不可变序列"><a href="#13-4-为什么将元组设计成不可变序列" class="headerlink" title="13.4 为什么将元组设计成不可变序列"></a>13.4 为什么将元组设计成不可变序列</h3><ul><li>在多任务环境下，同时操作对象时不需要加锁</li><li>因此，在程序种尽量使用不可变序列</li></ul><p><strong>注意事项：</strong></p><ul><li>元组种存储的是对象的引用<ul><li>如果元组中对象本身是不可对象，则不能再引用其他对象</li><li>如果元组种的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变</li></ul></li></ul><p>下面是一段代码例子，用来说明一下注意事项中的两条</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">10</span>, [<span class="hljs-number">20</span>, <span class="hljs-number">30</span>], <span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(t))    <span class="hljs-comment"># 1505236190656</span><br><span class="hljs-built_in">print</span>(t)  <span class="hljs-comment"># (10, [20, 30], 9)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t))  <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">0</span>], <span class="hljs-built_in">type</span>(t[<span class="hljs-number">0</span>]), <span class="hljs-built_in">id</span>(t[<span class="hljs-number">0</span>]))  <span class="hljs-comment"># 10 &lt;class &#x27;int&#x27;&gt; 2168335919696</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">1</span>], <span class="hljs-built_in">type</span>(t[<span class="hljs-number">1</span>]), <span class="hljs-built_in">id</span>(t[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># [20, 30] &lt;class &#x27;list&#x27;&gt; 1505235036864</span><br><span class="hljs-built_in">print</span>(t[<span class="hljs-number">2</span>], <span class="hljs-built_in">type</span>(t[<span class="hljs-number">2</span>]), <span class="hljs-built_in">id</span>(t[<span class="hljs-number">2</span>]))  <span class="hljs-comment"># 9 &lt;class &#x27;int&#x27;&gt; 2168335919664</span><br><br><span class="hljs-string">&quot;&quot;&quot;尝试将t[1]修改成100&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">100</span>))<br><span class="hljs-comment"># t[1] = 100      # 元组是不允许修改元素的</span><br><span class="hljs-comment"># 由于[20，30]是列表，而列表是可变序列，所以可以向列中添加元素，但是列表的内存地址不变</span><br>t[<span class="hljs-number">1</span>].append(<span class="hljs-number">100</span>)  <span class="hljs-comment"># 向列表中添加元素</span><br><span class="hljs-built_in">print</span>(t, <span class="hljs-built_in">id</span>(t[<span class="hljs-number">1</span>]))  <span class="hljs-comment"># (10, [20, 30, 100], 9) 1505235036864</span><br></code></pre></td></tr></table></figure><blockquote><p>由此可见，如果元组对象中的是不可变对象，比如<code>10</code>，<code>9</code>，那么他们就不能再引用其他对象，因为他们的<code>id</code>是固定的，如果是<code>t[1]</code>，<code>[20, 30]</code>，本身是一个可变的列表，那么它的引用是不可变的，因为它的<code>id</code>是固定的。但是可以再列表后面接着追加变量，例如<code>append(100)</code>，此时它的<code>id</code>仍然是没有变化</p></blockquote><h2 id="14-集合"><a href="#14-集合" class="headerlink" title="14. 集合"></a>14. 集合</h2><h3 id="14-1-什么是集合"><a href="#14-1-什么是集合" class="headerlink" title="14.1 什么是集合"></a>14.1 什么是集合</h3><ul><li>Python语言提供的内置数据结构</li><li>与列表、字典一样都属于可变类型的序列</li><li>集合是没有value的字典</li></ul><h3 id="14-2-集合的创建"><a href="#14-2-集合的创建" class="headerlink" title="14.2 集合的创建"></a>14.2 集合的创建</h3><ul><li>直接<code>&#123;&#125;</code><ul><li><code>s = &#123;&#39;python&#39;, &#39;hello&#39;, 90&#125;</code></li></ul></li><li>使用内置函数<code>set()</code></li></ul><p>下面通过一些代码例子，来了解一下集合的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种创建方式，使用&#123;&#125;</span><br>s = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>&#125;    <span class="hljs-comment"># 集合中的元素不允许重复</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;2, 3, 4, 5, 6, 7&#125;</span><br><br><span class="hljs-comment"># 第二种创建方式，使用内置函数set()</span><br>s1 = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(s1, <span class="hljs-built_in">type</span>(s1))     <span class="hljs-comment"># &#123;0, 1, 2, 3, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>])     <span class="hljs-comment"># 将列表中的元素转换成集合</span><br><span class="hljs-built_in">print</span>(s2, <span class="hljs-built_in">type</span>(s2))     <span class="hljs-comment"># &#123;1, 2, 4, 5, 6&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s3 = <span class="hljs-built_in">set</span>((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">65</span>))     <span class="hljs-comment"># 元组是无序的，所以打印出来的数字顺序变化</span><br><span class="hljs-built_in">print</span>(s3, <span class="hljs-built_in">type</span>(s3))     <span class="hljs-comment"># &#123;65, 1, 2, 4, 5&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s4 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;python&#x27;</span>)      <span class="hljs-comment"># 将str类型的元素转换成集合</span><br><span class="hljs-built_in">print</span>(s4, <span class="hljs-built_in">type</span>(s4))     <span class="hljs-comment"># &#123;&#x27;h&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;n&#x27;, &#x27;t&#x27;, &#x27;y&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span><br>s5 = <span class="hljs-built_in">set</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">31</span>, <span class="hljs-number">23</span>, <span class="hljs-number">45</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>&#125;)   <span class="hljs-comment"># 将集合中的元素转换成另外一个集合，元素的顺序发成变化</span><br><span class="hljs-built_in">print</span>(s5, <span class="hljs-built_in">type</span>(s5))     <span class="hljs-comment"># &#123;1, 22, 23, 45, 31&#125; &lt;class &#x27;set&#x27;&gt;</span><br><br><span class="hljs-comment"># 定义一个空集合</span><br>s6 = &#123;&#125;     <span class="hljs-comment"># 直接定义一个花括号，类型是字典，并不是集合</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s6))     <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br>s7 = <span class="hljs-built_in">set</span>()  <span class="hljs-comment"># 用set()定义的时候才是集合</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s7))     <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="14-3-集合的增删查改操作"><a href="#14-3-集合的增删查改操作" class="headerlink" title="14.3 集合的增删查改操作"></a>14.3 集合的增删查改操作</h3><h4 id="1-集合元素的判断操作"><a href="#1-集合元素的判断操作" class="headerlink" title="1. 集合元素的判断操作"></a>1. 集合元素的判断操作</h4><ul><li><code>in</code>或者<code>not in</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># 集合元素的判断操作</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> s)      <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">100</span> <span class="hljs-keyword">in</span> s)     <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><h4 id="2-集合元素的新增操作"><a href="#2-集合元素的新增操作" class="headerlink" title="2. 集合元素的新增操作"></a>2. 集合元素的新增操作</h4><ul><li>调用<code>add()</code>方法，一次添加一个元素</li><li>调用<code>update()</code>方法，至少添加一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># 集合元素的新增操作</span><br>s.add(<span class="hljs-number">80</span>)   <span class="hljs-comment"># 一次添加一个元素</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;80, 50, 20, 40, 10, 30&#125;</span><br>s.update(&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>&#125;)   <span class="hljs-comment"># 一次添加至少一个元素</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;100, 40, 200, 10, 300, 80, 50, 20, 30&#125;</span><br>s.update([<span class="hljs-number">100</span>, <span class="hljs-number">101</span>])<br>s.update((<span class="hljs-number">201</span>, <span class="hljs-number">202</span>))<br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;100, 101, 40, 200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3-集合元素的删除操作"><a href="#3-集合元素的删除操作" class="headerlink" title="3. 集合元素的删除操作"></a>3. 集合元素的删除操作</h4><ul><li>调用<code>remove()</code>方法，一次删除一个指定元素，如果指定的元素不存在，则抛出<code>KeyError</code>异常</li><li>调用<code>discard()</code>方法，一次删除一个指定元素，如果指定的元素不存在，不抛出异常</li><li>调用<code>pop()</code>方法，一次只删除一个任意元素</li><li>调用<code>clear()</code>方法，清空集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">40</span>, <span class="hljs-number">200</span>, <span class="hljs-number">10</span>, <span class="hljs-number">201</span>, <span class="hljs-number">300</span>, <span class="hljs-number">202</span>, <span class="hljs-number">80</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-comment"># 集合元素的删除操作</span><br>s.remove(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;101, 40, 200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br><span class="hljs-comment"># s.remove(500)   # KeyError: 500</span><br>s.discard(<span class="hljs-number">101</span>)<br>s.discard(<span class="hljs-number">500</span>)  <span class="hljs-comment"># 集合中没有500，但是程序也没有报错没有抛出异常</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;40, 200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br>s.pop()     <span class="hljs-comment"># 随机把40删除了，pop()函数是没有参数的，删除的元素也是随机的</span><br><span class="hljs-built_in">print</span>(s)    <span class="hljs-comment"># &#123;200, 10, 201, 300, 202, 80, 50, 20, 30&#125;</span><br>s.clear()   <span class="hljs-comment"># 直接把集合清空了</span><br></code></pre></td></tr></table></figure><h3 id="14-4-集合之间的关系"><a href="#14-4-集合之间的关系" class="headerlink" title="14.4 集合之间的关系"></a>14.4 集合之间的关系</h3><ul><li>两个集合是否相等<ul><li>可以使用运算符<code>==</code>或者<code>!=</code>进行判断</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 判断两个集合是否相等</span><br>s = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s2 = &#123;<span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>&#125;<br><span class="hljs-built_in">print</span>(s == s2)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s != s2)  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>一个集合是否是另一个集合的子集<ul><li>可以调用方法<code>issubset</code>进行判断</li><li><code>B</code>是<code>A</code>的子集</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个集合是否是另一个集合的子集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s3 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-built_in">print</span>(s2.issubset(s1))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s3.issubset(s1))  <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>一个集合是否是另一个集合的超集<ul><li>可以调用方法<code>issuperset</code>进行判断</li><li><code>A</code>是<code>B</code>的超集</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 一个集合是否是另一个集合的超集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s3 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-built_in">print</span>(s1.issuperset(s2))    <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(s1.issuperset(s3))    <span class="hljs-comment"># False</span><br></code></pre></td></tr></table></figure><ul><li>两个集合是否没有交集<ul><li>可以调用方法<code>isdisjoint</code>进行判断</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 两个集合是否没有交集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>&#125;<br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s3 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">90</span>&#125;<br><span class="hljs-built_in">print</span>(s2.isdisjoint(s3))    <span class="hljs-comment"># False     有交集为False</span><br>s4 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>&#125;<br><span class="hljs-built_in">print</span>(s2.isdisjoint(s4))    <span class="hljs-comment"># True  s2和s4是没有交集的，没有交集为True</span><br></code></pre></td></tr></table></figure><h3 id="14-5-集合的数据操作"><a href="#14-5-集合的数据操作" class="headerlink" title="14.5 集合的数据操作"></a>14.5 集合的数据操作</h3><p>交集、并集、差集、对称差集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># （1）交集</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br>s2 = &#123;<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-built_in">print</span>(s1.intersection(s2))  <span class="hljs-comment"># &#123;40, 20, 30&#125;</span><br><span class="hljs-built_in">print</span>(s1 &amp; s2)  <span class="hljs-comment"># &#123;40, 20, 30&#125;      intersection()和 &amp; 等价，都是交集操作</span><br><br><span class="hljs-comment"># （2）并集</span><br><span class="hljs-built_in">print</span>(s1.union(s2))     <span class="hljs-comment"># &#123;40, 10, 50, 20, 30&#125;</span><br><span class="hljs-built_in">print</span>(s1 | s2)  <span class="hljs-comment"># &#123;40, 10, 50, 20, 30&#125;      union()和 | 等价，都是并集操作</span><br><br><span class="hljs-comment"># （3）差集</span><br><span class="hljs-built_in">print</span>(s1.difference(s2))    <span class="hljs-comment"># &#123;10&#125;</span><br><span class="hljs-built_in">print</span>(s1-s2)    <span class="hljs-comment"># &#123;10&#125;      difference()和 - 等价，都是差集操作</span><br><br><span class="hljs-comment"># （4）对称差集</span><br><span class="hljs-built_in">print</span>(s1.symmetric_difference(s2))  <span class="hljs-comment"># &#123;10, 50&#125;</span><br></code></pre></td></tr></table></figure><h3 id="14-6-集合生成式"><a href="#14-6-集合生成式" class="headerlink" title="14.6 集合生成式"></a>14.6 集合生成式</h3><ul><li>用于生成集合的公式<ul><li><code>&#123;i * i for i in range(1, 10)&#125;</code></li><li><code>i*i</code>中的<code>i</code>表示集合元素的表达式，第二个i是自定义变量，<code>range</code>是可迭代对象</li></ul></li><li>将<code>&#123;&#125;</code>修改为<code>[]</code>就是列表生成式</li><li>没有元素生成式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表生成式</span><br>lst = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>)]<br><span class="hljs-built_in">print</span>(lst)      <span class="hljs-comment"># [0, 1, 4, 9, 16, 25]</span><br><br><span class="hljs-comment"># 集合生成式</span><br>s = &#123;i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)&#125;<br><span class="hljs-built_in">print</span>(s)        <span class="hljs-comment"># &#123;0, 1, 64, 4, 36, 9, 16, 49, 81, 25&#125;</span><br></code></pre></td></tr></table></figure><h2 id="15-列表、字典、元组、集合总结"><a href="#15-列表、字典、元组、集合总结" class="headerlink" title="15. 列表、字典、元组、集合总结"></a>15. 列表、字典、元组、集合总结</h2><table><thead><tr><th align="center">数据结构</th><th align="center">是否可变</th><th align="center">是否重复</th><th align="center">是否有序</th><th align="center">定义符号</th></tr></thead><tbody><tr><td align="center">列表（<code>list</code>）</td><td align="center">可变</td><td align="center">可重复</td><td align="center">有序</td><td align="center"><code>[]</code></td></tr><tr><td align="center">元组（<code>tuple</code>）</td><td align="center">不可变</td><td align="center">可重复</td><td align="center">有序</td><td align="center"><code>()</code></td></tr><tr><td align="center">字典（<code>dict</code>）</td><td align="center">可变</td><td align="center"><code>key</code>不可重复<br /><code>value</code>可重复</td><td align="center">无序</td><td align="center"><code>&#123;key: value&#125;</code></td></tr><tr><td align="center">集合（<code>set</code>）</td><td align="center">可变</td><td align="center">不可重复</td><td align="center">无序</td><td align="center"><code>&#123;&#125;</code></td></tr></tbody></table><p><img src="python%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.png" alt="元组与集合的知识总结"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础（上）</title>
      <link href="/2022/01/14/python-ji-chu-shang/"/>
      <url>/2022/01/14/python-ji-chu-shang/</url>
      
        <content type="html"><![CDATA[<p>前一段时间一直在学习Python基础，但是学的也是杂乱无章，忘的也比较快，今天特别抽时间把学习的笔记整理出来一部分，基本上都是参考马士兵Python的b站课程顺序整理出来的</p><h2 id="1-print打印"><a href="#1-print打印" class="headerlink" title="1. print打印"></a>1. print打印</h2><ul><li>功能：向目的地输出内容</li><li>输出的内容：数字、字符串、表达式</li><li>目的地：LDLE（集成开发环境）、控制台、文件</li></ul><h2 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2. 转义字符"></a>2. 转义字符</h2><h3 id="2-1-什么是转义字符"><a href="#2-1-什么是转义字符" class="headerlink" title="2.1 什么是转义字符"></a>2.1 什么是转义字符</h3><blockquote><p>就是反斜杠+想要实现的转义功能首字母</p></blockquote><h3 id="2-2-为什么需要转义字符"><a href="#2-2-为什么需要转义字符" class="headerlink" title="2.2 为什么需要转义字符"></a>2.2 为什么需要转义字符</h3><blockquote><p>当字符串中包含反斜杠、单引号和双引号等有特殊用途的字符时，必须使用反斜杠对这些字符进行转义（转换一个含义）</p><ul><li>反斜杠 <code>\\</code></li><li>单引号 <code>\‘</code></li><li>双引号 <code>\“</code></li></ul></blockquote><blockquote><p>当字符串中包含换行、回车、水平制表符或者退格等无法直接表示的特殊字符时，也可以使用转义字符</p><ul><li>换行 \n     newline换行首字母</li><li>回车 \r     回车会把前面的覆盖掉<code>print(&#39;hello \r world&#39;)</code>，这里的打印出world，回车会把hello覆盖</li><li>水平制表符 \t      制表符从前到后开始数，四个为一个制表位</li><li>退格 \b      退一格，会把上一个字符退格删了</li></ul></blockquote><h3 id="2-3-原字符"><a href="#2-3-原字符" class="headerlink" title="2.3 原字符"></a>2.3 原字符</h3><blockquote><p>原字符：不希望字符串中的转义字符起作用，就使用原字符， 就是在字符串之前加上<code>R</code>或者<code>r</code></p><p>注意事项：最后一个字符不能是反斜杠</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nworld\&#x27;)</span><br></code></pre></td></tr></table></figure><p>最后只有一个字符是反斜杠就会报错，如果是两个反斜杠就没有问题</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nworld&#x27;</span>)<span class="hljs-comment">#则打印出来显示的为”hello\nworld“</span><br></code></pre></td></tr></table></figure><h2 id="3-二进制和字符编码"><a href="#3-二进制和字符编码" class="headerlink" title="3. 二进制和字符编码"></a>3. 二进制和字符编码</h2><p><strong>8bit(位)=1byte(字节)        1024byte=1kb        1024kb=1mb        1024mb=1gb        1024gb=1t</strong></p><blockquote><p>机器语言只能识别0和1</p></blockquote><blockquote><p>基本的汉字和一些符号有ASII表</p></blockquote><blockquote><p>在中国有GB2312、GBK、GB18030等一些编码，在国外有其他国家的字符编码</p></blockquote><blockquote><p>但是Unicode几乎包含了全世界的字符、他就是UTF-8编码</p></blockquote><h2 id="4-标识符和保留字"><a href="#4-标识符和保留字" class="headerlink" title="4. 标识符和保留字"></a>4. 标识符和保留字</h2><h3 id="4-1-保留字"><a href="#4-1-保留字" class="headerlink" title="4.1 保留字"></a>4.1 保留字</h3><blockquote><p>有一些单词被赋予了特定的意义，这些单词在给任何对象起名字的时候都不能用到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-literal">None</span>       <span class="hljs-keyword">break</span>      <span class="hljs-keyword">except</span>     <span class="hljs-keyword">in</span>         <span class="hljs-keyword">raise</span><br><span class="hljs-literal">True</span>       <span class="hljs-class"><span class="hljs-keyword">class</span>      <span class="hljs-title">finally</span>    <span class="hljs-title">is</span>         <span class="hljs-title">return</span></span><br><span class="hljs-class"><span class="hljs-title">and</span>        <span class="hljs-title">continue</span>   <span class="hljs-title">for</span>        <span class="hljs-title">lambda</span>     <span class="hljs-title">try</span></span><br><span class="hljs-class"><span class="hljs-title">as</span>         <span class="hljs-title">def</span>        <span class="hljs-title">from</span>       <span class="hljs-title">nonlocal</span>   <span class="hljs-title">while</span></span><br><span class="hljs-class"><span class="hljs-title">assert</span>     <span class="hljs-title">del</span>        <span class="hljs-title">global</span>     <span class="hljs-title">not</span>        <span class="hljs-title">with</span></span><br><span class="hljs-class"><span class="hljs-title">async</span>      <span class="hljs-title">elif</span>       <span class="hljs-title">if</span>         <span class="hljs-title">or</span>         <span class="hljs-title">yield</span></span><br></code></pre></td></tr></table></figure></blockquote><p><strong>1.  <code>True</code>、<code>False</code></strong></p><p><code>False </code>布尔类型的值，表示假，与<code>True</code>相反 <code>True </code>布尔类型的值，表示真，与<code>False</code>相反</p><p><strong>2. <code>and</code>、<code>or</code>、<code>not</code></strong></p><p>逻辑运算符 与、或、非</p><p><strong>3.<code>class</code></strong></p><p>定义类的关键字</p><p><strong>4.<code>is</code>、<code>in</code></strong></p><p>Python中的对象包含三个要素：<code>id</code>，<code>type</code>，<code>value</code> 其中：</p><ul><li><code>id</code>:用来唯一标识一个对象</li><li><code>type</code>：标识对象的类型</li><li><code>value</code>：是对象的值</li></ul><p><code>is</code>：就是用来判断a对象是否就是b对象，是通过id来判断的</p><p><code>==</code>：判断的是a对象的值是否和b对象的值相等，是通过value来判断的</p><p><code>in</code>：判断变量是否存在序列中</p><p><strong>5.<code>try</code>、<code>except</code>、<code>finally</code>、<code>raise</code></strong></p><p>使用<code>try...except...finally</code>语句来处理异常。</p><ul><li>通常的语句块放在<code>try</code>块中</li><li>错误处理的语句放在<code>except</code>块中</li><li>始终执行的语句放在<code>finally</code>块中</li><li><code>raise</code> 语句抛出一个指定的异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:        <br>    <span class="hljs-comment">#some code here        </span><br>    <span class="hljs-keyword">raise</span> MyException      <br><span class="hljs-keyword">except</span> MyException:        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MyException encoutered&quot;</span>) <br><span class="hljs-keyword">finally</span>:        <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Arrive finally&quot;</span>)<br>    <br>x = <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;x 不能大于 5。x 的值为: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(x))<br></code></pre></td></tr></table></figure><p><strong>6.<code>if</code>、<code>elif</code>、<code>else</code></strong></p><p>判断语句，<code>if</code>语句用来检验一个条件，如果条件为真，运行一块语句(称为<code>if…</code>块)，否则处理另外一块语句（称为<code>else…</code>块）。<code>else</code>从句是可选的</p><p><strong>7.<code>def</code>、<code>global</code>、<code>nonlocal</code>、<code>return</code>、<code>yield</code></strong></p><ul><li><code>def </code>定义函数的关键字</li><li><code>global</code> 定义全局变量</li><li><code>nonlocal </code>在局部寻找外层函数中离他最近的那个变量</li><li><code>return</code> 函数中的返回值</li><li><code>yield</code>的用法有点像<code>return</code>,除了它返回的是一个生成器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createGenerator</span>():</span><br>    mylist = <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist:<br>        <span class="hljs-keyword">yield</span> i*i<br></code></pre></td></tr></table></figure><p><strong>8.<code>for</code>、<code>while</code></strong></p><p><code>for</code>循环可以遍历任何序列的项目，如一个列表或者一个字符串 <code>while</code>循环可以通关判断条件真假无限循环</p><p><strong>9.<code>break</code>、<code>continue</code></strong></p><ul><li><code>break</code>语句是用来终止循环语句，即使哪怕循环条件没有称为<code>false</code>或者序列还没有被完全递归，也会停止循环</li><li><code>continue</code>语句被用来跳过当前循环块中的剩余语句，继续进行下一轮循环</li></ul><p><strong>10.<code>assert</code></strong></p><p><code>assert</code> 关键字用于在代码中设置检查点，用于当程序出现错误时中断程序执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">3</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt;<span class="hljs-number">10</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#3&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt;<span class="hljs-number">10</span><br>AssertionError<br> <br><span class="hljs-comment"># assert 条件后可以增加错误信息解释</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;超出范围！&#x27;</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;pyshell#5&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span> &lt; a &lt; <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;超出范围！&#x27;</span><br>AssertionError: 超出范围！<br></code></pre></td></tr></table></figure><p><strong>11.<code>del</code></strong></p><p><code>del</code>删除变量或者序列的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-number">85</span>] <span class="hljs-comment"># 定义一个list      </span><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">0</span>] <span class="hljs-comment"># 删除第0个元素      </span><br><span class="hljs-keyword">del</span> a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>] <span class="hljs-comment"># 删除从第2个到第3个元素。</span><br></code></pre></td></tr></table></figure><p><strong>12.<code>import</code>、<code>from</code>、 <code>as</code></strong></p><p>用于导包，<code>as</code>为重命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> fd <span class="hljs-keyword">as</span> f<br></code></pre></td></tr></table></figure><p><strong>13.<code>with</code></strong></p><p>用于文件的读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 写文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;wt&quot;</span>) <span class="hljs-keyword">as</span> out_file:<br>    out_file.write(<span class="hljs-string">&quot;公众号：一行数据，没想到吧，这里有植入&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>14.<code>pass</code></strong></p><p><code>pass</code>空的类，函数，方法的占位符</p><p><strong>15.<code>await</code>、<code>async</code></strong></p><p><code>async</code> 用来声明一个函数为异步函数，异步函数的特点是能在函数执行过程中挂起，去执行其他异步函数，等到挂起条件（假设挂起条件是<code>sleep(5)</code>）消失后，也就是5秒到了再回来执行。</p><p><code>await</code> 用来用来声明程序挂起，比如异步程序执行到某一步时需要等待的时间很长，就将此挂起，去执行其他的异步程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>(<span class="hljs-params">i</span>):</span><br>     r = <span class="hljs-keyword">await</span> other_test(i)<br>     <span class="hljs-built_in">print</span>(i,r)<br> <br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">other_test</span>(<span class="hljs-params">i</span>):</span><br>     r = requests.get(i)<br>     <span class="hljs-built_in">print</span>(i)<br>     <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">4</span>)<br>     <span class="hljs-built_in">print</span>(time.time()-start)<br>     <span class="hljs-keyword">return</span> r<br> <br>url = [<span class="hljs-string">&quot;https://segmentfault.com/p/1210000013564725&quot;</span>,<br>        <span class="hljs-string">&quot;https://www.jianshu.com/p/83badc8028bd&quot;</span>,<br>        <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>]<br> <br>loop = asyncio.get_event_loop()<br>task = [asyncio.ensure_future(test2(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url]<br>start = time.time()<br>loop.run_until_complete(asyncio.wait(task))<br>endtime = time.time()-start<br><span class="hljs-built_in">print</span>(endtime)<br>loop.close()<br></code></pre></td></tr></table></figure><p><strong>16.<code>lambda</code></strong></p><p>通常是在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是<strong>匿名函数</strong></p><p><code>&lt;函数名&gt; = lambda &lt;参数&gt; : &lt;表达式&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-keyword">lambda</span> x, y, z: x+y+z  <span class="hljs-comment">#f是表达式的名字</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  <span class="hljs-comment">#像函数一样调用</span><br></code></pre></td></tr></table></figure><h3 id="4-2-标识符"><a href="#4-2-标识符" class="headerlink" title="4.2 标识符"></a>4.2 标识符</h3><ul><li>变量、函数、类、模块和其他对象的起的名字都叫标识符</li><li>规则<ul><li>字母、数字、下划线_</li><li>不能以数字开头</li><li>不能是python保留字</li><li>严格区分大小写</li></ul></li></ul><p><strong>通过程序可以将所有保留字打印出来</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<span class="hljs-number">23</span><br><br><span class="hljs-comment">#输出结果</span><br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;__peg_parser__&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;async&#x27;</span>, <span class="hljs-string">&#x27;await&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h2><blockquote><p>变量就是内存中一个带标签的盒子</p></blockquote><p><strong>变量由三部分组成</strong></p><ul><li>标识：表示对象所存储的内存地址，使用内置函数<code>id(obj)</code>来获取</li><li>类型：表示的是对象的数据类型，使用内置函数<code>type(obj)</code>来获取</li><li>值：表示对象所存储的具体数据，使用<code>print(obj)</code>可以将值进行打印输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;张志鹏&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;标识：&quot;</span>, <span class="hljs-built_in">id</span>(name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;类型：&quot;</span>, <span class="hljs-built_in">type</span>(name))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;值&quot;</span>, name)<br><br><span class="hljs-comment">#标识： 2222422933936</span><br><span class="hljs-comment">#类型： &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-comment">#值 张志鹏</span><br></code></pre></td></tr></table></figure><blockquote><p>当多次赋值之后，变量名会指向新的空间</p></blockquote><h2 id="6-数据类型"><a href="#6-数据类型" class="headerlink" title="6. 数据类型"></a>6. 数据类型</h2><blockquote><p>常用的数据类型</p></blockquote><table><thead><tr><th align="center">数据类型</th><th align="center">表示</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">整数类型</td><td align="center">int</td><td align="center">98</td></tr><tr><td align="center">浮点数类型</td><td align="center">float</td><td align="center">3.14159</td></tr><tr><td align="center">布尔类型</td><td align="center">bool</td><td align="center">TURE、FALSE</td></tr><tr><td align="center">字符串类型</td><td align="center">str</td><td align="center">人生苦短，我用python</td></tr></tbody></table><h3 id="6-1-整数类型"><a href="#6-1-整数类型" class="headerlink" title="6.1 整数类型"></a>6.1 整数类型</h3><ul><li>英文为<code>integer</code>，简写为<code>int</code>，可以表示为正数、负数和零</li><li>整数的不同进制表示方式<ul><li>十进制—&gt;默认的进制</li><li>二进制—&gt;以0b开头</li><li>八进制—&gt;以0o开头</li><li>十六进制—&gt;以0x开头</li></ul></li></ul><h3 id="6-2-浮点类型"><a href="#6-2-浮点类型" class="headerlink" title="6.2 浮点类型"></a>6.2 浮点类型</h3><ul><li><p>浮点数由整数部分和小数部分组成</p></li><li><p>浮点数存储不精确性</p><ul><li><p>使用浮点数进行计算时，可能会出现小数位数不确定的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1.1</span>+<span class="hljs-number">2.2</span>) <span class="hljs-comment">#3.3000000000000003</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1.1</span>+<span class="hljs-number">2.1</span>) <span class="hljs-comment">#3.2</span><br></code></pre></td></tr></table></figure></li><li><p>解决方案</p><ul><li><p>导入模块<code>decimal</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><span class="hljs-built_in">print</span>(Decimal(<span class="hljs-string">&#x27;1.1&#x27;</span>)+Decimal(<span class="hljs-string">&#x27;2.2&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="6-3-布尔类型"><a href="#6-3-布尔类型" class="headerlink" title="6.3 布尔类型"></a>6.3 布尔类型</h3><ul><li><p>用来表示真或假的值</p></li><li><p><code>True</code>表示真，<code>False</code>表示假</p></li><li><p>布尔值可以转化为整数</p><ul><li>True—&gt;1</li><li>False—&gt;0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-literal">True</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">#2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-literal">False</span>+<span class="hljs-number">1</span>) <span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="6-4-字符串类型"><a href="#6-4-字符串类型" class="headerlink" title="6.4 字符串类型"></a>6.4 字符串类型</h3><ul><li>字符串又被称为不可变的字符序列</li><li>可以使用单引号、双引号、三引号来定义</li><li>单引号和双引号定义的字符串必须在一行</li><li>三引号定义的字符串可以分布在连续的多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;人生苦短，我用python&#x27;</span><br>str2 = <span class="hljs-string">&quot;人生苦短，我用python&quot;</span><br>str3 = <span class="hljs-string">&#x27;&#x27;&#x27;人生苦短</span><br><span class="hljs-string">我用python&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(str1)<br><span class="hljs-built_in">print</span>(str2)<br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-comment">#人生苦短，我用python</span><br><br><span class="hljs-comment">#人生苦短，我用python</span><br><br><span class="hljs-comment">#人生苦短</span><br><span class="hljs-comment">#我用python</span><br></code></pre></td></tr></table></figure><h3 id="6-5-数据类型转换"><a href="#6-5-数据类型转换" class="headerlink" title="6.5 数据类型转换"></a>6.5 数据类型转换</h3><blockquote><p>将不同数据类型的数据拼接在一起</p></blockquote><table><thead><tr><th align="center">函数名</th><th align="center">作用</th><th align="center">注意事项</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">str()</td><td align="center">将其他数据类型转换成字符串</td><td align="center">也可用于引号转换</td><td align="center">str(123)—&gt;’123’</td></tr><tr><td align="center">int()</td><td align="center">将其他数据类型转换成整数</td><td align="center">1.文字类和小数类字符串，无法转换成整数<br/>2.浮点数转换成整数，抹零取整</td><td align="center">int(‘123’)<br/>int(9.8)</td></tr><tr><td align="center">float()</td><td align="center">将其他数据类型转换成浮点数</td><td align="center">1.文字类无法转成整数<br/>2.整数转成浮点数，末尾为.0</td><td align="center">float(‘9.9’)<br/>float(9)</td></tr></tbody></table><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7. 注释"></a>7. 注释</h2><ul><li>在代码中对代码的功能进行解释说明的标注性文字，可以提高代码的可读性</li><li>注释的内容会被Python解释器忽略</li><li>通常包括三种类型的注释<ul><li>单行注释——&gt;以<code>#</code>开头，直到换行结束</li><li>多行注释——&gt;将一对三括号（<code>‘’‘</code>或者<code>&quot;&quot;&quot;</code>）注释</li><li>中文编码声明注释——&gt;在文件开头加上中文声明注释，用以指明编码文件的编码格式</li></ul></li></ul><h2 id="8-input函数"><a href="#8-input函数" class="headerlink" title="8. input函数"></a>8. input函数</h2><blockquote><p>作用：接收来自用户的输入</p><p>返回值类型：输入值的类型为<code>str</code></p><p>值的存储：使用<code>=</code>对输入的值进行存储</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#输入函数input</span><br>present=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;大圣想要什么礼物呢？&#x27;</span>)<br><span class="hljs-built_in">print</span>(present,<span class="hljs-built_in">type</span>(present))<br><br><span class="hljs-comment">#大圣想要什么礼物呢？定海神针</span><br><span class="hljs-comment">#定海神针 &lt;class &#x27;str&#x27;&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从键盘录入两个整数，计算两个整数的和</span><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入一个加数&#x27;</span>)<br>a = <span class="hljs-built_in">int</span>(a)      <span class="hljs-comment"># 将转换之后的结果存储到a中</span><br>b = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入另一个加数&#x27;</span>)<br>b = <span class="hljs-built_in">int</span>(b)<br><span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-comment"># 也可以直接a = int(input(&#x27;请输入一个加数&#x27;))</span><br></code></pre></td></tr></table></figure><h2 id="9-常用运算符"><a href="#9-常用运算符" class="headerlink" title="9. 常用运算符"></a>9. 常用运算符</h2><h3 id="9-1-算术运算符"><a href="#9-1-算术运算符" class="headerlink" title="9.1 算术运算符"></a>9.1 算术运算符</h3><ol><li><p>标准算术运算符        加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、整除（<code>//</code>）</p><p><code>取整（一正一负向下取整） 9//-4或者-9//4的答案都是-3，由-2向下取整为-3</code></p></li><li><p>取余运算符        <code>%</code></p><p><code>取余（一正一负要公式）  余数=被除数-除数*商</code></p><p><code>9%-4结果为-3    9-(-4)*(-3)=9-12=-3</code></p><p><code>-9%4结果为3    -9-(4)*(-3)=-9+12=3</code></p></li><li><p>幂运算符          <code> **</code></p></li></ol><h3 id="9-2-赋值运算符"><a href="#9-2-赋值运算符" class="headerlink" title="9.2 赋值运算符"></a>9.2 赋值运算符</h3><blockquote><p>执行顺序：从右到左</p><p>支持链式赋值    <code>a=b=c=20</code></p><p>支持参数赋值    <code>+=、-=、*=、/=、//=、%=</code></p><p>支持系列解包赋值    <code>a,b,c=20,30,40</code></p></blockquote><h3 id="9-3-比较运算符"><a href="#9-3-比较运算符" class="headerlink" title="9.3 比较运算符"></a>9.3 比较运算符</h3><blockquote><p><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>       返回值为True、False</p><p><code>==</code>            对象value的比较</p><p><code>is</code>、<code>is not</code>         对象的id的比较</p></blockquote><p>其中，一个 <code>=</code> 称为赋值运算符，<code>==</code> 称为比较运算符</p><p>一个变量由三部分组成，标识，类型，值</p><p><code>==</code> 比较的是值还是标识呢？      比较的是值</p><p>比较对象的标识使用  <code>is</code> 和 <code>is not</code></p><p>下面由两个例子供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a == b)<span class="hljs-comment"># True说明，a与b的value    相等</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b)<span class="hljs-comment"># True说明，a与b的id标识  相等</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">lst1 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>lst2 = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(lst1 == lst2)     <span class="hljs-comment"># value  --&gt;True</span><br><span class="hljs-built_in">print</span>(lst1 <span class="hljs-keyword">is</span> lst2)     <span class="hljs-comment"># id --&gt;False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(lst1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(lst2))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">输出结果</span><br><span class="hljs-string">True</span><br><span class="hljs-string">False</span><br><span class="hljs-string">1351505079360</span><br><span class="hljs-string">1351504973504</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="9-4-布尔运算符"><a href="#9-4-布尔运算符" class="headerlink" title="9.4 布尔运算符"></a>9.4 布尔运算符</h3><p>布尔运算符主要是对于布尔值之间的运算</p><p>包括<code> and</code> 、<code>or</code> 、<code>not</code> 、<code>in</code> 、<code>not in</code> </p><ul><li>运算符<code>and</code>        当两个运算数都为<code>True</code>时，运算结果才为<code>True</code></li><li>运算符<code>or</code>        只要有一个运算数为<code>True</code>，运算结果就为<code>True</code></li><li>运算符<code>not</code>       如果运算数为<code>True</code>，运算结果为<code>False</code>，反之</li><li>运算符<code>in</code>         表示在不在里面，下面用例子演示一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&#x27;helloworld&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w&#x27;</span> <span class="hljs-keyword">in</span> s)<span class="hljs-comment"># True，表示字符w在变量s里面出现</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k&#x27;</span> <span class="hljs-keyword">in</span> s)<span class="hljs-comment"># Flase，表示字符k不在变量s里面出现</span><br></code></pre></td></tr></table></figure><h3 id="9-5-位运算符"><a href="#9-5-位运算符" class="headerlink" title="9.5 位运算符"></a>9.5 位运算符</h3><p><strong>在做位运算的操作时候一定要先把数据转换成二进制再进行计算</strong></p><table><thead><tr><th align="center">位运算符</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center">位与 <code>&amp;</code></td><td align="center">对应数位都是1，结果数位才是1，否则是0</td></tr><tr><td align="center">位或 `</td><td align="center">`</td></tr><tr><td align="center">左移运算符<code>&lt;&lt;</code></td><td align="center">高位溢出舍弃，低位补0</td></tr><tr><td align="center">右移运算符<code>&gt;&gt;</code></td><td align="center">低位溢出舍弃，高位补0</td></tr></tbody></table><h3 id="9-6-运算符的优先级"><a href="#9-6-运算符的优先级" class="headerlink" title="9.6 运算符的优先级"></a>9.6 运算符的优先级</h3><p>优先级依次为：</p><blockquote><p><code>**</code>                    幂运算符号</p><p><code>*</code>,<code>/</code>,<code>//</code>,<code>%</code>        乘除、取余</p><p><code>+</code>,<code>-</code>                加减</p><p><strong>算术运算：先算乘除，后算加减，有幂运算，先算幂运算</strong></p><p><code>&lt;&lt;</code>,<code>&gt;&gt;</code>            左移位、右移位运算符</p><p><code>&amp;</code>            位与</p><p><code>|</code>            位或</p><p><strong>位运算：先算移位，再算位与和位或</strong></p><p><code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code>        大于小于、比较</p><p><strong>比较运算：结果集为True、False</strong></p><p><code>and</code>            布尔运算符</p><p><code>or</code>                布尔运算符</p><p><strong>布尔运算：对上一步结果集进行布尔运算</strong></p><p><code>=</code>                    最后再是赋值运算符</p></blockquote><h2 id="10-程序的组织结构"><a href="#10-程序的组织结构" class="headerlink" title="10 程序的组织结构"></a>10 程序的组织结构</h2><p><strong>程序的结构一般都分为顺序结构、选择结构和循环结构，此处和本人学过的C语言、C++语言以及Java语言相识，都是同为三种基本结构</strong></p><hr><h3 id="10-1-顺序结构"><a href="#10-1-顺序结构" class="headerlink" title="10.1 顺序结构"></a>10.1 顺序结构</h3><p><strong>顺序结构</strong>，顾名思义，就是按照一定的顺序来执行语言程序，在python中，就是按照自上到下的顺序来执行程序，又比如在赋值运算中就是从右到左，按着一定的优先级的顺序来执行赋值运算。</p><h3 id="10-2-对象的布尔值"><a href="#10-2-对象的布尔值" class="headerlink" title="10.2 对象的布尔值"></a>10.2 对象的布尔值</h3><p>在进行下面两种结构总结之前，应该先介绍一下对象的布尔值</p><ul><li>Python一切皆对象，所有对象都有一个布尔值<ul><li>获取对象的布尔值，就要使用到内置函数bool()</li></ul></li><li>以下对象的布尔值为False<ul><li>False</li><li>数值0</li><li>None</li><li>空字符串</li><li>空列表        <code>[]</code>、<code>list()</code></li><li>空元组        <code>()</code>、<code>tuple()</code></li><li>空字典        <code>&#123;&#125;</code>、<code>dict()</code></li><li>空集合        <code>set()</code></li></ul></li></ul><h3 id="10-3-选择结构"><a href="#10-3-选择结构" class="headerlink" title="10.3 选择结构"></a>10.3 选择结构</h3><p><strong>选择结构，就是程序根据判断条件的布尔值选择性地执行部分代码，明确的让计算机在什么条件下，该去做什么</strong></p><p>语法结构通常有单分支结构、双分支结构、多分支结构、嵌套if结构</p><p><strong>语法结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#单分支结构</span><br><span class="hljs-keyword">if</span> 条件表达式:<br>    条件执行体<span class="hljs-number">1</span><br>    条件执行体<span class="hljs-number">2</span><br><br><span class="hljs-comment">#双分支结构</span><br><span class="hljs-keyword">if</span> 条件表达式:<br>    条件执行体<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    条件执行体<span class="hljs-number">2</span><br>    <br><span class="hljs-comment">#多分支结构</span><br><span class="hljs-keyword">if</span> 条件表达式<span class="hljs-number">1</span>:<br>    条件执行体<span class="hljs-number">1</span><br><span class="hljs-keyword">elif</span> 条件表达式<span class="hljs-number">2</span>:<br>    条件执行体<span class="hljs-number">3</span><br><span class="hljs-keyword">elif</span> 条件表达式N:<br>    条件执行体N<br><span class="hljs-keyword">else</span>:<br>    条件执行体N+<span class="hljs-number">1</span><br>    <br><span class="hljs-comment">#嵌套if结构</span><br><span class="hljs-keyword">if</span> 条件表达式<span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> 内层条件表达式:<br>        内层条件执行体<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        内层条件执行体<span class="hljs-number">2</span><br><span class="hljs-keyword">else</span>:<br>    条件执行体<br></code></pre></td></tr></table></figure><p>选择结构中可以简写成条件表达式<code>if....else</code>，：<code>【条件为真的结果】if 条件 else 【条件为假的结果】</code></p><p>下面以一个例子来参考一下用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#比较大小</span><br><span class="hljs-keyword">if</span> num_a&gt;=num_b:<br>    <span class="hljs-built_in">print</span>(num_a,<span class="hljs-string">&#x27;大于等于&#x27;</span>,num_b)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(num_a,<span class="hljs-string">&#x27;小于&#x27;</span>,num_b)<br><br><span class="hljs-comment">#使用条件表达式进行比较</span><br><span class="hljs-built_in">print</span>( (num_a,<span class="hljs-string">&#x27;大于等于&#x27;</span>,num_b)<span class="hljs-keyword">if</span> num_a&gt;=num_b <span class="hljs-keyword">else</span>  (num_a,<span class="hljs-string">&#x27;小于&#x27;</span>,num_b))<br><span class="hljs-comment">#或者将打印出来的东西化简</span><br><span class="hljs-built_in">print</span>( <span class="hljs-built_in">str</span>(num_a)+<span class="hljs-string">&#x27;大于等于&#x27;</span>+<span class="hljs-built_in">str</span>(num_b) <span class="hljs-keyword">if</span> num_a&gt;=num_b <span class="hljs-keyword">else</span>  <span class="hljs-built_in">str</span>(num_a)+<span class="hljs-string">&#x27;小于&#x27;</span>+<span class="hljs-built_in">str</span>(num_b)  )<br></code></pre></td></tr></table></figure><p><strong>此外，在Python中还有一点与其他语言不相同之处</strong></p><p>在C与Java中，表示两个数之间的范围通常只能用<code>score &gt; 80 &amp;&amp; score &lt; 90</code></p><p>但是在Python中，表示两个数之间的范围可以用两种表达方式<code>score &gt; 80 and score &lt; 90</code>或者直接<code>80 &lt; score &lt; 90</code>，此处的&amp;&amp;也换成了Python中布尔运算符的and，并且可以直接用数学中连等的方式来表示</p><h3 id="10-4-pass语句"><a href="#10-4-pass语句" class="headerlink" title="10.4 pass语句"></a>10.4 pass语句</h3><blockquote><p>pass语句：语句什么都不做，只是一个占位符，用在语法上需要语句的地方</p></blockquote><p>pass语句可以用在：<strong>先搭建语法结构，还没想好代码怎么写的时候</strong></p><p>关于什么语法可以一起使用：</p><ul><li>if语句的条件执行体</li><li>for-in语句的循环体</li><li>定义函数时的函数体</li></ul><p>下面是使用方式，以<code>if</code>语句作为例子参考学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> a&gt;b:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#此时的代码是没有报错的，但是也不会执行出结果，有种类似于只为了不报错也不想看到出格的结果的感觉</span><br></code></pre></td></tr></table></figure><h3 id="10-5-range-函数"><a href="#10-5-range-函数" class="headerlink" title="10.5 range()函数"></a>10.5 range()函数</h3><p>在总结循环结构之前还是需要先写一下<code>range()</code>函数的用法，因为可能后面的<code>for</code>循环会经常用到这个函数</p><blockquote><p><code>range()</code>函数：就是用来生成一个整数序列</p></blockquote><ul><li><p>创建<code>range</code>对象有三种方式，后面会有相关代码例子介绍</p><ul><li><code>range(stop)</code></li><li><code>range(start,stop)</code></li><li><code>range(start,stop,step)</code></li></ul></li><li><p><code>range()</code>函数的返回值是一个迭代器对象</p></li><li><p>range类型的优点</p></li><li><blockquote><p>不管<code>range</code>对象表示的整数序列有多长，所有range对象占用的内存空间都是相同的，因为仅仅需要存储start,stop和step，只有当用到range对象时，才会去计算序列中的相关元素</p></blockquote></li><li><p><code>in</code> 与 <code>not in</code> 可以判断整数序列中是否存在（不存在）指定的整数</p></li></ul><p>下面就一个例子，简单描述一下<code>range()</code>函数的一些创建方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># rang()的三种创建方式</span><br><span class="hljs-string">&quot;&quot;&quot;第一种创建方式：只有一个参数（小括号里面只给了一个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)       <span class="hljs-comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]，默认从0开始，默认相差1称为步长</span><br><span class="hljs-built_in">print</span>(r)            <span class="hljs-comment"># range(0, 10)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># 用于查看range对象种的整数序列  ——&gt;list是列表的意思</span><br><br><span class="hljs-string">&quot;&quot;&quot;第二种创建方式：给了两个参数（小括号里面给了两个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)    <span class="hljs-comment"># 指定了起始值，从1开始，到10结束（不包括10），默认步长为1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br><span class="hljs-string">&quot;&quot;&quot;第三种创建方式：给了三个参数（小括号里面给了三个数字）&quot;&quot;&quot;</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>) <span class="hljs-comment"># 指定了起始值，从1开始，到10结束（不包括10），指定了步长为2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))      <span class="hljs-comment"># [1, 3, 5, 7, 9]</span><br><br><span class="hljs-string">&quot;&quot;&quot;判断指出的整数 再序列中是否存在 用in， not in&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> r)      <span class="hljs-comment"># False， 10不在当前的r这个整数序列 中</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">9</span> <span class="hljs-keyword">in</span> r)       <span class="hljs-comment"># True， 9在当前的r这个序列中</span><br></code></pre></td></tr></table></figure><h3 id="10-6-循环结构"><a href="#10-6-循环结构" class="headerlink" title="10.6 循环结构"></a>10.6 循环结构</h3><blockquote><p> 循环结构就是指反复做一件事情</p></blockquote><p>循环结构一般有<code>while</code>、<code>for -in</code></p><p><strong>选择结构的if与循环结构<code>while</code>的区别</strong></p><ul><li><code>if</code>是判断一次，条件为<code>True</code>执行一次</li><li><code>while</code>是判断N+1次，条件为<code>True</code>执行N次</li></ul><hr><p><code>while</code>的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件表达式:<br>    条件执行体(循环体)<br></code></pre></td></tr></table></figure><p><code>while</code>的一个万金油例子，计算1-100之间的偶数和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">sum</span> += a<br>    a += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1-100之间的偶数和为&#x27;</span>, <span class="hljs-built_in">sum</span>)<br><span class="hljs-comment">#输出结果：1-100之间的偶数和为 2550</span><br></code></pre></td></tr></table></figure><hr><p><code>for-in</code>循环</p><blockquote><ul><li><code>in</code>表达从（字符串、序列等）中依次取值，又称为遍历</li><li><code>for-in</code>遍历的对象必须是可迭代对象</li></ul></blockquote><p><code>for-in</code>的语法结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 自定义的变量 <span class="hljs-keyword">in</span> 可迭代对象:<br>    循环体<br></code></pre></td></tr></table></figure><p><strong>另外，循环体内不需要访问自定义变量，可以将自定义变量替代为下划线</strong></p><p>下面以几个代码例子演示一下<code>for-in</code>的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Python&#x27;</span>:    <span class="hljs-comment"># 第一次取出来的是P，将P赋值给item，将item的值输出</span><br>    <span class="hljs-built_in">print</span>(item)<br><span class="hljs-comment"># 输出结果依次为 P  y  t  h  o  n</span><br><br><span class="hljs-comment"># range()产生一个整数序列 --&gt;也是一个可迭代对象</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-comment"># 输出结果依次为 0  1  2  3  4  5  6  7  8  9</span><br><br><span class="hljs-comment"># 如果在循环体中不需要使用到自定义变量，可将自定义变量写成”_“</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;人生苦短，我用Python&#x27;</span>)<br><span class="hljs-comment"># 输出结果为循环五次 人生苦短，我用Python</span><br></code></pre></td></tr></table></figure><h3 id="10-7-流程控制语句"><a href="#10-7-流程控制语句" class="headerlink" title="10.7 流程控制语句"></a>10.7 流程控制语句</h3><blockquote><p><code>break</code>语句：用于结束循环结构，通常与分支结构<code>if</code>一起使用</p></blockquote><blockquote><p><code>continue</code>语句：用于结束当前循环，进入下一次循环，通常与分支结构中的<code>if</code>一起使用</p></blockquote><blockquote><p>通常在多重循环中的<code>break</code>和<code>continue</code>只用于控制本层的循环</p></blockquote><p>此处提到的控制语句<code>break</code>和<code>continue</code>其实与C语言中的作业一样，都是结束循环和结束本次循环的意思</p><h3 id="10-8-else语句"><a href="#10-8-else语句" class="headerlink" title="10.8 else语句"></a>10.8 else语句</h3><p><code>else</code>语句在前面的<code>if...else</code>中有讲到，但是它其实有这三种搭配方式，所以单独提出来再总结一些东西</p><hr><p><code>else</code>可以与<code>if</code>配合使用，但是<code>if</code>条件表达式不成立的时候才能执行<code>else</code></p><p><code>else</code>也可以和<code>while</code>、<code>for</code>配合使用，但是只有当没有碰到<code>break</code>的时候才执行<code>else</code></p><p>下面列举几个例子方便理解使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 此处的else是与上面的if搭配使用的，如果if执行成功，就不会再执行else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br><span class="hljs-keyword">else</span>:           <span class="hljs-comment"># 此处的else是与最上面的for搭配使用的，如果没有遇到break，那么else就一定会被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次密码均输入错误&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">3</span>:<br>    pwd = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的密码：&#x27;</span>)<br>    <span class="hljs-keyword">if</span> pwd == <span class="hljs-string">&#x27;8888&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:       <span class="hljs-comment"># 此处的else是与上面的if搭配使用的，如果if执行成功，就不会再执行else</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码不正确&#x27;</span>)<br>    a+=<span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:           <span class="hljs-comment"># 此处的else是与最上面的while搭配使用的，如果没有遇到break，那么else就一定会被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;对不起，三次密码均输入错误&#x27;</span>)<br><br></code></pre></td></tr></table></figure><blockquote><p>由此可见，其实<code>else</code>的用法和C语言的其实也不太一样，但是代码其实从上到下按照本身的逻辑走一遍，这里面的<code>else</code>是与谁搭配使用的就很好被理解了</p></blockquote><h3 id="10-9-嵌套循环"><a href="#10-9-嵌套循环" class="headerlink" title="10.9 嵌套循环"></a>10.9 嵌套循环</h3><p>嵌套循环在前面几个知识点的例子中都有涉及到，只是没有指出来细细讲解</p><p><strong>其意义就是：</strong>循环结构中<strong>又嵌套</strong>了另外的完整的循环结构，其中内层循环作为外层循环的循环体执行</p><p>下面就直接举一个打印九九乘法表的代码例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, item+<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(it, <span class="hljs-string">&#x27;*&#x27;</span>, item, <span class="hljs-string">&#x27;=&#x27;</span>, item*it, end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1 * 1 = 1</span><br><span class="hljs-string">1 * 2 = 22 * 2 = 4</span><br><span class="hljs-string">1 * 3 = 32 * 3 = 63 * 3 = 9</span><br><span class="hljs-string">1 * 4 = 42 * 4 = 83 * 4 = 124 * 4 = 16</span><br><span class="hljs-string">1 * 5 = 52 * 5 = 103 * 5 = 154 * 5 = 205 * 5 = 25</span><br><span class="hljs-string">1 * 6 = 62 * 6 = 123 * 6 = 184 * 6 = 245 * 6 = 306 * 6 = 36</span><br><span class="hljs-string">1 * 7 = 72 * 7 = 143 * 7 = 214 * 7 = 285 * 7 = 356 * 7 = 427 * 7 = 49</span><br><span class="hljs-string">1 * 8 = 82 * 8 = 163 * 8 = 244 * 8 = 325 * 8 = 406 * 8 = 487 * 8 = 568 * 8 = 64</span><br><span class="hljs-string">1 * 9 = 92 * 9 = 183 * 9 = 274 * 9 = 365 * 9 = 456 * 9 = 547 * 9 = 638 * 9 = 729 * 9 = 81</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>果然啊，用Python写九九乘法表就是很容易，比起C语言和Java的双层for循环，这个似乎简单了不少</p></blockquote><p>由于时间的原因，也没有整理出来特别多的知识点，所以只整理到了这里，有些知识点的细节部分可能没有讲清楚，后续有时间还会接着整理出中、下部分。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug改错之hexo部署问题</title>
      <link href="/2022/01/12/bug-gai-cuo-zhi-hexo-bu-shu-wen-ti/"/>
      <url>/2022/01/12/bug-gai-cuo-zhi-hexo-bu-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="%E9%97%AE%E9%A2%98%E7%85%A7%E7%89%87.jpg" alt="问题描述"></p><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h1><blockquote><p>在利用<code>hexo</code>部署个人博客网站的过程中遇到了一些问题，下面是报错代码，作者也总结了几种方法，供参考。</p><p><code>FATAL &#123;   err: Error: Spawn failed       at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:51:21)       at ChildProcess.emit (node:events:390:28)       at ChildProcess.cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)       at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;     code: 128   &#125; &#125; Something&#39;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</code></p></blockquote><h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h1><h2 id="2-1-解决方式一："><a href="#2-1-解决方式一：" class="headerlink" title="2.1 解决方式一："></a>2.1 解决方式一：</h2><p>1、进入到博客根目录，先把<code>git</code>提交的内容文件夹<code>.deploy_git</code>手动删除，也可利用指令<code>rm -rf .deploy_git</code>对文件夹进行删除</p><p>2、重新执行<code>git config --global core.autocrlf false</code></p><p>3、最后再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="2-2-解决方式二："><a href="#2-2-解决方式二：" class="headerlink" title="2.2 解决方式二："></a>2.2 解决方式二：</h2><blockquote><p>有可能是因为<code>git</code>的<code>repo</code>配置的地址不正确，可以将<code>http</code>方式变更为<code>ssh</code>方式</p></blockquote><p>1、进入到博客根目录，先把<code>git</code>提交的内容文件夹<code>.deploy_git</code>手动删除，也可利用指令<code>rm -rf .deploy_git</code>对文件夹进行删除</p><p>2、找到博客根目录的<code>_config.yml</code>文件，打开后，对下列的<code>repo</code>进行修改</p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/yourname/yourname.github.io.git -&gt; git@github.com:XXXXXXX/XXXXXX.github.io.git</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>3、 最后再执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><h2 id="2-3-解决方式三：（不太建议）"><a href="#2-3-解决方式三：（不太建议）" class="headerlink" title="2.3 解决方式三：（不太建议）"></a>2.3 解决方式三：（不太建议）</h2><p>1、进入博客根目录 <code>cd D:/MyBlog</code></p><p>2、进入deploy文件夹 <code>cd .deploy_git/</code></p><p>3、强制推送 <code>git push -f</code></p>]]></content>
      
      
      <categories>
          
          <category> Bug改错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>勉励文章</title>
      <link href="/2022/01/12/mian-li-wen-zhang/"/>
      <url>/2022/01/12/mian-li-wen-zhang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是之前比较火的一篇论文致谢，有人说看完热泪盈眶，有人看完陷入沉思，更多的，是对一个穿过黑暗的勇者的敬佩。自己也突然想到了“内卷”两个字眼，下面的是朋友圈的一位朋友发的，感觉说的似乎有那么点道理，便想着发出来记录一下。</p></blockquote><p>越多的人这样做，大家耗费了更多时间和精力却得到了一样的结果。</p><p>内卷指的是，每个人都愿意为五斗米折腰 ，<br>但永远有人折的更低 ，却只是那五斗米。</p><p>内卷并不是说的努力，而是无效内耗。<br>就比如我们这一届老师布置的作业，本身是个实务分析题，写过程就行，有的人加上各种其他的字数，写成了一篇论文的长度，而有的老师鼓励这种，就使得大家都这样做，最后本身课业压力都大，还需要为了某个作业去花费更多的精力才能拿到大家都正常不卷时候的分数，但是本身可以拿这些时间干更多有意义的事情。</p><p>又比如大学的时候，明明要求论文写5000字，有一个同学硬生生写了8000，结果被另一个人知道了，熬夜写了10000，我觉得这才是卷，在负担自己的情况下，卷别人，根本没有正常的努力了，真正的只是正常的努力不是内卷。</p><p>我们不是那些反方向坐地铁却徒劳无功的人我们是渴望步入理想大学的高中生是不甘平庸的大学生。</p><p>我从不认为谁的努力如“内卷”的释义<br>“付出了时间和精力，却得到了和原来一样的结果”。</p><p>这个世界上有人正过着你想要的生活所以我们从不认输。<br>我们总要忍受一段日子才能真正成为自己的光比起那些不努力就能获取的成功我更喜欢<br>先努力优秀，再大方拥有。</p><p>希望少一些无效内耗，也希望不要再滥用“内卷”。</p><p><img src="%E8%87%B4%E8%B0%A2.png" alt="研究生论文致谢"></p>]]></content>
      
      
      <categories>
          
          <category> 记录生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
